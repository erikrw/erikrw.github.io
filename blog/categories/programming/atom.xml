<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Erik Ramsgaard Wognsen]]></title>
  <link href="http://blog.erw.dk/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://blog.erw.dk/"/>
  <updated>2023-07-14T12:02:20+02:00</updated>
  <id>http://blog.erw.dk/</id>
  <author>
    <name><![CDATA[Erik Ramsgaard Wognsen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Taming Python with Dataclasses]]></title>
    <link href="http://blog.erw.dk/2023/02/18/taming-python-with-dataclasses/"/>
    <updated>2023-02-18T20:28:53+01:00</updated>
    <id>http://blog.erw.dk/2023/02/18/taming-python-with-dataclasses</id>
    <content type="html"><![CDATA[<p>The Stack Overflow blog recently published the article
<a href="https://stackoverflow.blog/2023/01/19/adding-structure-to-dynamic-languages/">Minimizing the downsides of dynamic programming languages</a>
(such as JavaScript, Python, Ruby, PHP) from which I&rsquo;ll point out:</p>

<ul>
<li><p>&ldquo;Type hints are the most obvious way to make a dynamic language more static.
In effect, you get the best of both worlds: you can write dynamic code but
are required to be more careful about what types you expect to get and use at
any point.&rdquo;</p></li>
<li><p>&ldquo;Dictionaries are for unknown data.&rdquo; In other words, if you know while
writing the code which keys are going to be in your dictionary at runtime,
you should use an interface (TypeScript), struct (Ruby), or dataclass
(Python), instead of a plain dictionary/object.</p></li>
</ul>


<p>This reminded me that if you&rsquo;re a Python programmer, you should definitely know
about <a href="https://docs.python.org/library/dataclasses.html">dataclasses</a> (since Python 3.7, 2018) because they do both of the
above, as fields of the dataclass are specified using type annotation syntax.</p>

<!-- more -->


<p>For example, if you write:</p>

<pre><code class="python">from dataclasses import dataclass

@dataclass
class InventoryItem:
    name: str
    unit_price: float
    quantity: int = 0
</code></pre>

<p>Then the <code>@dataclass</code> decorator adds something like the following to your class
at runtime.</p>

<pre><code class="python">def __init__(self, name: str, unit_price: float, quantity: int = 0):
    self.name = name
    self.unit_price = unit_price
    self.quantity = quantity

def __repr__(self):
    return (f'InventoryItem(name={repr(self.name)}, '
            f'unit_price={repr(self.unit_price)}, '
            f'quantity={repr(self.quantity)})')

def __eq__(self, other):
    return ((self.name, self.unit_price, self.quantity) ==
            (other.name, other.unit_price, other.quantity))
</code></pre>

<p>Dataclasses can do more than that, but those are the basics. Typically, the
dataclass decorator itself doesn&rsquo;t actually care about the types (str, float,
int) &mdash; it mainly uses the type annotations as a concise syntax to specify the
<em>names</em> of the fields. But since dataclasses are pretty useful, they become
like a &ldquo;gateway drug&rdquo; to using and learning more about Python type annotations.</p>

<a name="Magic"></a>
<h2>Magic</h2>

<p>The Stack Overflow blog post then seems to backpedal with the recommendation
&ldquo;Be more explicit than you need to be&rdquo;. After all, having the dunder methods
(<code>__init__</code> etc.) generated automatically is less explicit than writing them
out yourself. But the blog post clarifies that &ldquo;The only real things that
should ever be doing metaprogramming or reflection are frameworks themselves&rdquo;
which makes it ok again to use dataclasses since they are part of the standard
library.</p>

<p>I agree; &ldquo;magic&rdquo; stuff should mainly be done by frameworks, and only when the
benefits are tangible. And I think dataclasses are so useful (and again, part
of the standard library) that it&rsquo;s ok to expect readers of your code to know or
be willing to learn about them.</p>

<p>However, in combination with other slightly magical things, I was recently
wondering if the code I was writing was a bit &ldquo;too magic&rdquo;:</p>

<p></p>

<pre><code class="python">from dataclasses import dataclass
from rest_framework import serializers

@dataclass
class Thing:
    my_foo: int

@dataclass
class SpecialThing(Thing):
    my_bar: int

class SpecialThingSerializer(serializers.Serializer):
    MyFoo = serializers.IntegerField(source='my_foo')
    MyBar = serializers.IntegerField(source='my_bar)

    def create(self, validated_data):
        return SpecialThing(**validated_data)
</code></pre>

<p>This code can deserialize a JSON object such as <code>{"MyFoo": 1, "MyBar": 2}</code> into
my (pep8 compliant) dataclass as an object with the representation
<code>SpecialThing(my_foo=1, my_bar=2)</code>. This overall journey should not be too
surprising, but the individual steps to get there are not very explicit:</p>

<ul>
<li>The <a href="https://www.django-rest-framework.org/">Django REST framework</a> serializer will produce the <code>validated_data</code>
dict <code>{'my_foo': 1, 'my_bar': 2}</code> because when working in reverse
(deserializing), the <code>source</code> field name becomes the target, so <code>MyFoo</code>
becomes <code>my_foo</code>, etc.</li>
<li>This dict is <code>**</code>unpacked as keyword arguments to instantiate <code>SpecialThing</code></li>
<li>The auto-generated <code>SpecialThing.__init__</code> correctly handles both of these
keyword arguments because one is inherited from the <code>Thing</code> dataclass.</li>
</ul>


<p>I love how compact the code is, but I also have to acknowledge that it might
not be clear to Python novices without the above explanation. But in the
bigger picture I think this example is still within the limits of what is
reasonable because:</p>

<ul>
<li>The overall purpose of the code (deserialization) is fairly straightforward
once you are in the context of Django REST framework</li>
<li>The code doesn&rsquo;t use programmatically constructed variable names, so it
passes the grep test, as mentioned in the Stack Overflow blogpost</li>
<li>The magic is done with the standard library and DRF, the main framework of
the codebase.</li>
</ul>


<p>In the end, you should write so it makes sense to the people who are going to
read it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Visual Studio Sounds]]></title>
    <link href="http://blog.erw.dk/2021/10/02/visual-studio-sounds/"/>
    <updated>2021-10-02T22:35:14+02:00</updated>
    <id>http://blog.erw.dk/2021/10/02/visual-studio-sounds</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/posts/vs_sound1.png"></p>

<!-- more -->


<p><img class="right" src="/images/posts/vs_sound2.png"></p>

<p>I have been working with a slightly heavy C# code base that takes around a
minute to build and start up. This is enough time that I&rsquo;ll switch to another
program each time I start a debug or test run. But it&rsquo;s also short enough time
that if I get side&shy;tracked for five minutes, that&rsquo;s four minutes of Visual
Studio sitting idle.</p>

<p>One day I stumbled upon a setting in Visual Studio named &ldquo;Play a sound when
tests finish running&rdquo;, and from there a button to open the main Windows Sound
settings where a number of events in Visual Studio can be configured to trigger
a sound. This feature is simple but great. Now I can switch context and always
hear when I need to come back and work from a breakpoint or a finished test
run. I can also use different sounds to distinguish positive and negative
outcomes. Using the built-in Windows sounds, I found that these work great:</p>

<div class="next-table"></div>


<table>
<thead>
<tr>
<th> Event              </th>
<th> Sound                      </th>
</tr>
</thead>
<tbody>
<tr>
<td> Breakpoint Hit     </td>
<td> Windows Pop-up Blocked.wav </td>
</tr>
<tr>
<td> Build Failed       </td>
<td> Windows Hardware Fail.wav  </td>
</tr>
<tr>
<td> Build Succeeded    </td>
<td> Windows Print complete.wav </td>
</tr>
<tr>
<td> Test Run Failed    </td>
<td> Windows Hardware Fail.wav  </td>
</tr>
<tr>
<td> Test Run Succeeded </td>
<td> tada.wav                   </td>
</tr>
</tbody>
</table>


<p>Especially the Ta-Daaa! fanfare when the tests pass is a nice way to be called
back to Visual Studio. Happy coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RIP Mercurial (on Bitbucket)]]></title>
    <link href="http://blog.erw.dk/2019/08/28/rip-mercurial-on-bitbucket/"/>
    <updated>2019-08-28T07:39:28+02:00</updated>
    <id>http://blog.erw.dk/2019/08/28/rip-mercurial-on-bitbucket</id>
    <content type="html"><![CDATA[<p><a href="https://bitbucket.org/">Bitbucket</a> is going to <a href="https://bitbucket.org/blog/sunsetting-mercurial-support-in-bitbucket">drop support</a> for the
<a href="https://www.mercurial-scm.org/">Mercurial</a> version control system, due to most people using
<a href="https://git-scm.com/">Git</a> instead. I use both Mercurial (hg) and Git, and while Git has become
the de facto standard today, Mercurial was my first love in the world of
version control systems, and I&rsquo;m sad to see it go.</p>

<p>Of course, Mercurial is not dead, but being removed from Bitbucket is a big
deal (at least to me). But this news also gave me an occasion to reconsider Git
vs. Mercurial, and writing this post has actually given me a newfound, if not
appreciation, then at least understanding of Git.</p>

<!-- more -->


<a name="Init"></a>
<h2>Init</h2>

<p>When I started university in 2006, <a href="https://en.wikipedia.org/wiki/Apache_Subversion">SVN</a> had recently replaced <a href="https://en.wikipedia.org/wiki/Concurrent_Versions_System">CVS</a>
as the cool thing. So for group work we used SVN and it worked fine. Well,
except for all the file conflicts we got. And the awful tree conflicts. Come to
think of it, it didn&rsquo;t work that great. Luckily
<a href="https://en.wikipedia.org/wiki/Distributed_version_control">distributed version control systems</a> had been maturing in the meantime.</p>

<p></p>

<p>In 2009 we started using Mercurial. It was like SVN, except it was actually
good for collaboration! Now you could store a safe snapshot of your own work
before trying to merge other people&rsquo;s changes in. Also merging generally worked
well. Also it was fast.</p>

<p>All was good, but there was also this Git thing people on the internet were
talking about. Coming from SVN, Mercurial made sense and Git didn&rsquo;t. (Linus
Torvalds, being Linus Torvalds, made Git purposely different from the CVS/SVN
family.) Git did seem to be more flexible at the expense of being less elegant.
As was written back then:
<a href="https://importantshock.wordpress.com/2008/08/07/git-vs-mercurial/">Git is MacGyver, Mercurial is James Bond</a>.</p>

<p>My group mates and I kept using Mercurial, but as I started my PhD,
collaboration with new people, not least my supervisor René, made me spend more
time with Git. It got better when I began to understand that the differences
between Mercurial and Git start at fundamental concepts such as branches and
merges.</p>

<a name="Different.Concepts"></a>
<h2>Different Concepts</h2>

<p></p>

<p>&ldquo;Branch&rdquo; doesn&rsquo;t have the same interpretation in Mercurial and Git. In
Mercurial, a branch is a sequence of commits all sharing a (permanent) name. In
Git, a branch is temporary and is represented by a reference to the current
commit at the tip of the branch. Once gone, you can&rsquo;t tell which branch(es)
a commit used to be part of.</p>

<p>In Mercurial branches are also shared between clones of the same repository.
Everybody works on the same branch, and you can <a href="https://www.mercurial-scm.org/repo/hg/help/pull"><code>hg pull</code></a> to get the
newest version of the branch, and then <a href="https://www.mercurial-scm.org/repo/hg/help/update"><code>hg update</code></a> your working
copy. In Git nobody works on the same branch &mdash; there&rsquo;s just people working on
different branches that might or might not have the same name. You can&rsquo;t
&ldquo;update&rdquo; to the newest version because you already have the newest version of
your own branch by definition. But you can <em>merge</em> another branch, possibly
with the same name, into your own.</p>

<p>In Mercurial, merges are used for merging divergent branches or heads. In Git,
everything is a merge, even if only one branch has changed. But at the same
time, a Git merge might or might not create a merge commit. By default, a new
commit will only be created if the two branches had diverged, i.e., work had
been done on both. Otherwise, the current branch will just be updated to point
to the same commit as the branch being merged in. It makes a lot of sense once
you get used to Git, but before that it&rsquo;s just confusing.</p>

<p></p>

<a name="Different.Commands"></a>
<h2>Different Commands</h2>

<p>Learning Git from an SVN/Mercurial background meant relearning a few words.
&ldquo;Revert&rdquo; means something new in Git and &ldquo;shelve&rdquo; is called &ldquo;stash&rdquo;, but that&rsquo;s
not bad. Instead, what is annoying is that many simple Mercurial commands don&rsquo;t
have simple, memorable equivalents in Git:</p>

<p>Show the hash of the current commit:
<code>
hg id
git rev-parse HEAD
</code></p>

<p>Show which commits would be pulled or pushed:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hg in
</span><span class='line'>git fetch &amp;&amp; git log ..@{u}&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;hg out
</span><span class='line'>git fetch &amp;&amp; git log @{u}..</span></code></pre></td></tr></table></div></figure></p>

<p></p>

<p>Mark a file to stop tracking, but don&rsquo;t delete the file. This one is especially
weird in Git because you don&rsquo;t remove something <em>-&#8203;-cached</em>, you cache
(stage) the removal of something:
<code>
hg forget
git rm --cached
</code></p>

<p></p>

<p>Print the root directory of the repository and the URL of the remote repository:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hg root
</span><span class='line'>hg path&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;git rev-parse &ndash;show-toplevel
</span><span class='line'>git config &ndash;get remote.origin.url</span></code></pre></td></tr></table></div></figure></p>

<p>List the version controlled files:
<code>
hg manifest
git ls-tree -r --name-only --full-tree HEAD
</code></p>

<a name="Git.is.Git"></a>
<h2>Git is Git</h2>

<p>I have been using the above commands as aliases in Git, but I have wondered if
doing that somehow prevented me from learning the &ldquo;true spirit&rdquo; of Git. I have
now come to the conclusion that the essence of Git is its architecture and data
model, and not its incoherent command line interface. Learning the user
interface is just a chore, and using aliases to smooth it out is fine.</p>

<p>I&rsquo;m not bashing Git because it&rsquo;s different from Mercurial, but because it is
internally inconsistent and, as another blogger puts it:
<a href="https://stevebennett.me/2012/02/24/10-things-i-hate-about-git/">Git doesn’t so much have a leaky abstraction as no abstraction.</a>
Here are some of the inconsistencies and lacking abstractions:</p>

<ul>
<li>Concepts can have multiple names, like the index a.k.a. the cache a.k.a. the
staging area (which would be okay if Git didn&rsquo;t already have so many
concepts)</li>
<li>The branch <code>origin/master</code> is your (local) remote tracking branch, but
<code>master</code> alone can refer to your local master branch or to the remote&rsquo;s
master branch depending on context</li>
<li>The <a href="https://git-scm.com/docs/git-checkout"><code>git checkout</code></a> command famously does too much: It can
check out a branch (merging in uncommitted changes in the process if you
want, or creating a new branch manually or automatically if you want), and it
can restore or overwrites individual files in the working copy

<ul>
<li>However, the new Git 2.23 released this month has started experimenting
with the new, more specific, and subject to change
<a href="https://git-scm.com/docs/git-switch"><code>git switch</code></a> and <a href="https://git-scm.com/docs/git-restore"><code>git restore</code></a> commands
(similar to <a href="https://www.mercurial-scm.org/repo/hg/help/update"><code>hg update</code></a> and <a href="https://www.mercurial-scm.org/repo/hg/help/revert"><code>hg revert</code></a>!)</li>
</ul>
</li>
<li>The notation <code>A:B</code> sometimes means <code>&lt;src&gt;:&lt;dst&gt;</code> (a refspec) and sometimes
<code>&lt;rev&gt;:&lt;path&gt;</code> (path in a revision &mdash; to be distinguished from a pathspec
which is a third concept that can use the colon in a third way)</li>
<li>The notations <code>A B</code> and <code>A..B</code> mean the same thing to <a href="https://git-scm.com/docs/git-diff"><code>git diff</code></a>
but not to <a href="https://git-scm.com/docs/git-log"><code>git log</code></a></li>
<li>The notations <code>A..B</code> and <code>A...B</code> mean somewhat opposite things to
<a href="https://git-scm.com/docs/git-diff"><code>git diff</code></a> and <a href="https://git-scm.com/docs/git-log"><code>git log</code></a>

<ul>
<li>To specify branches A and B symmetrically you need <code>git diff A..B</code> but <code>git
log A...B</code></li>
<li><code>git diff A...B</code> and <code>git log A..B</code> mean &ldquo;from the common ancestor of A and
B, to B&rdquo;</li>
</ul>
</li>
</ul>


<p></p>

<p>In the end, I think Git is a good tool despite its command line interface. But
if you&rsquo;re the type of person who needs to understand something in depth to feel
comfortable with it, you have a lot of reading to do. If you already know the
basics, <a href="https://git-scm.com/docs/gitglossary"><code>git help gitglossary</code></a> will get you started on 80+
underlying concepts that will help you on your way to master the world&rsquo;s
favored VCS!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubiquitous Language Problems]]></title>
    <link href="http://blog.erw.dk/2018/06/17/ubiquitous-language-problems/"/>
    <updated>2018-06-17T12:38:16+02:00</updated>
    <id>http://blog.erw.dk/2018/06/17/ubiquitous-language-problems</id>
    <content type="html"><![CDATA[<p></p>

<p>Language is tricky. Take the this post, for instance. It&rsquo;s not about language
problems that are ubiquitous. It&rsquo;s about problems related to <em>Ubiquitous
Language</em> &mdash; whether the problems themselves are ubiquitous or not.</p>

<p>Ubiquitous Language is a term from the <a href="https://en.wikipedia.org/wiki/Domain-driven_design">Domain-Driven Design</a> software
development practice. It refers to a set of well-defined project terms shared
by all participants: <a href="https://en.wikipedia.org/wiki/Subject-matter_expert">Domain experts</a>, business analysts, developers,
users. The term was coined by Eric Evans in his <a href="http://dddcommunity.org/book/evans_2003/">DDD book</a>. I haven&rsquo;t
actually read it, but the idea seems sensible: If developers live and breathe
the domain by speaking its language, their output is more likely to fit the
business needs, and developers and domain experts are more likely to understand
one another.</p>

<p>As a business analyst and developer, your task is to adopt the language of the
domain experts, <em>not</em> the other way around. But that doesn&rsquo;t mean that the
domain experts are home free. Changes are probably required to turn their
jargon into a well-defined set of terms that will ensure precise and
unambiguous communication in the project and to the users. Here are some of the
challenges I&rsquo;ve encountered in this process.</p>

<!-- more -->


<a name="Two.Words..One.Concept"></a>
<h2>Two Words, One Concept</h2>

<p>One problem is that people may use different words for the same concept. It is
preferable to use one word per concept, because it will simplify design
discussions and remove confusion arising from the possibility that the words
<em>could</em> have different meanings. The code and the user interface will also be
much easier to understand for developers and users, respectively, if a concept
always has the same name.</p>

<p>As an example, different project participants use the terms User and Employee.
If the business or system has only employees as users, either word is fine.
Picking one over the other risks having a winner and a loser in the process.
Sometimes finding a third term can be a good move, politically or socially.
Perhaps the term Account can cover the concept and satisfy both parties.</p>

<p>Other times, it turns out that the terms actually have different meanings.
Maybe not all users are employees or not all employees are users. In this case,
both terms can stay in the vocabulary, and their exact relationship will have
to be uncovered.</p>

<p></p>

<a name="One.Word..Two.Concepts"></a>
<h2>One Word, Two Concepts</h2>

<p>Another problem is that the same word may be used for different concepts.
Sometimes by different people, sometimes even by the same people. Take the term
Account from the previous section. There, it was taken to mean a user account.
But Account could also mean a bank account, or a even a client (one managed by
an account manager).</p>

<p>If the main business domain (such as banking, accounting, customer relationship
management) already has a specific interpretation of the term, the other
meanings should probably find other names (such as Client, User Account, or
Bank Account). I prefer avoiding partially overlapping terms, so if Account is
already taken, User is better than User Account &mdash; unless User also has
a meaning distinct from User Account.</p>

<a name="Types.and.Instances"></a>
<h2>Types and Instances</h2>

<p>A specific version of the One Word, Two Concepts problem is when the same word
is used about both instances and types. Perhaps the word Service is used about
a service provided to a customer on a specific date and time (such as
a haircut), but also about the type of service the company provides (such as
a haircut). Or Product can mean both a product from the product catalog and
a product in the context of a specific Order.</p>

<p></p>

<p>For these examples, possible concept names could be Service and Service Type as
well as Product and Order Product. It&rsquo;s a first step, but as easy as it is to
add a prefix or suffix, as easy it drop it again in conversation. A better
option is to choose names that don&rsquo;t have anything in common. An Order Product
could be an Order Line (which is actually a well-known concept). A Service
could be an Appointment, while the term Service refers to the type. Or perhaps
Service stays in the appointment interpretation, and Service Type could be
named Function.</p>

<a name="Software.Development.as.Domain"></a>
<h2>Software Development as Domain</h2>

<p>Service and Function are not to be confused with what a software developer
might understand by these terms. Software is a business domain on its own
right, but unless the <em>project&rsquo;s</em> domain is software, developers should let the
business domain take precedence.</p>

<p>It might be necessary for developers to discuss technical design involving
software terms that clash with the domain model (such as Class, Strategy,
Factory, Visitor). It doesn&rsquo;t make sense to rename well-known concepts from the
software domain, but unless the domain experts need to know about them, they
shouldn&rsquo;t be part of the domain model, and so they should only be used
internally between technical designers and developers.</p>

<p>But even inside the software domain, I have observed the One Word, Two Concepts
problem at work. The term Entity, itself used in DDD, can refer to both a type
and an instance. Peter Chen, who introduced the
<a href="https://en.wikipedia.org/wiki/Entity%E2%80%93relationship_model">Entity-Relationship Model</a>, used the term Entity to mean an instance of
some <em>Entity Type</em>. What I mentioned earlier about dropping suffixes also
applies here, and many people, myself included, use Entity in the type meaning.
Ideally, the instance meaning is then referred to by a different word, such as
Object.</p>

<a name="Microsoft.Dynamics.CRM"></a>
<h2>Microsoft Dynamics CRM</h2>

<p>The Microsoft Dynamics Customer Relationship Management (CRM) software
interests me in two ways in relation to DDD and ubiquitous language.
Superficially, Microsoft CRM uses the terms Entity and Record in the above
mentioned type and instance meanings, respectively. But then in the Danish
translation of the software, they use the Danish word <em>objekt</em> &mdash; not
<em>entitet</em> &mdash; as the translation of Entity. (In fact my colleague recently
found out the whole system is translated by Bing!)</p>

<p>Second, Microsoft CRM is somewhat anti-DDD in the sense that the built-in
customer relationship management domain model can conflict with that of the
user organization. It&rsquo;s possible to adapt the built-in data model with new
entities, attributes, and relationships, and by renaming existing items. But
the renaming only applies to the user interface, not the code and database.
This forces developers to think in terms of the built-in model and to translate
back and forth between that and the organization&rsquo;s domain, which is exactly the
thing ubiquitous language tells you to avoid.</p>

<p></p>

<a name="Multiple.Contexts"></a>
<h2>Multiple Contexts</h2>

<p>In this post I have been touching on the matching of words and concepts, both
in general and in software development. In this, I have been simplifying by
focusing on building a single ubiquitous language and domain model for
a project. Part of DDD is acknowledging that a project can be too large for
a single unified model, and instead of trying to make such a model, you should
allow for multiple <a href="https://martinfowler.com/bliki/BoundedContext.html">bounded contexts</a> and instead make sure to define
their boundaries and relationships. But inside each single context, make sure
to use one word per concept.</p>

<p>The more I think about it, the more I see that software development is itself
far too large to be a single context. Words such as <em>prototype</em> or
<em>implementation</em> have multiple meanings. A prototype can be a
<a href="https://en.wikipedia.org/wiki/Software_prototyping">software product</a>, <a href="https://en.wikipedia.org/wiki/Function_prototype">function declaration</a>, or
<a href="https://en.wikipedia.org/wiki/Prototype_pattern">cloneable object</a>. Programmers will understand <em>implementation</em> as the
process of and result of turning the human readable design description into
executable computer code. But implementation can also mean taking that same
executable computer code &mdash; the software product &mdash; and embedding it
successfully in the organization that is going to use it.</p>

<p>So two things are important in achieving clear communication. First, make each
context internally sound, and second, be aware of the existence of multiple
contexts, especially when you are speaking with someone who normally thinks and
works in another context from you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AoC 2017 Day 8: Fell Into a Python Pitfall]]></title>
    <link href="http://blog.erw.dk/2017/12/10/aoc-2017-day-8-fell-into-a-python-pitfall/"/>
    <updated>2017-12-10T20:43:47+01:00</updated>
    <id>http://blog.erw.dk/2017/12/10/aoc-2017-day-8-fell-into-a-python-pitfall</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been using and enjoying <a href="https://www.python.org/">Python</a> since 2009, but while doing
<a href="http://adventofcode.com">Advent of Code</a> again this year, I stumbled upon a Python feature that
led to a subtle bug. Advent of Code spoiler ahead.</p>

<!-- more -->


<a name="The.Puzzle"></a>
<h2>The Puzzle</h2>

<p>In AoC 2017 you travel inside Santa&rsquo;s computer, fixing and computing things so
the Naughty or Nice List can be printed on time for Santa to deliver the
presents on time.</p>

<p>The puzzle for <a href="http://adventofcode.com/2017/day/8">Day 8</a> gives you a textual input such as</p>

<pre><code class="Pascal">b inc 5 if a &gt; 1
a inc 1 if b &lt; 5
c dec -10 if a &gt;= 1
c inc -20 if c == 10
</code></pre>

<p>and asks you to find the largest value in any register after executing the
given instructions (on some imagined CPU). The registers (which are <code>a</code>, <code>b</code>,
and <code>c</code> in the above), are all initialized to zero. The largest value in the
example is 1, which is in the <code>a</code> register at the end.</p>

<p>The real puzzle input is much larger and requires an automated solution. My
approach was to build a register valuation dictionary, update it according to
the instructions, and then find the largest value.</p>

<a name="My.Solution"></a>
<h2>My Solution</h2>

<p>I wrote this code (refactored):</p>

<pre><code class="Python">from operator import lt, gt, le, ge, eq, ne

def day8(input):

    instructions = [line.split() for line in input.splitlines()]
    register_names = set(instruction[0] for instruction in instructions)
    registers = {register_name: 0 for register_name in register_names}

    for mod_reg, mod_op, mod_amt, _, cond_reg, cond_op, cond_const in instructions:
        if eval_cond(registers[cond_reg], cond_op, cond_const):
            registers[mod_reg] += (1 if mod_op == 'inc' else -1) * int(mod_amt)

    return max(registers.values())

def eval_cond(a, cond_op, b):
    return {'&lt;': lt, '&gt;': gt, '&lt;=': le, '&gt;=': ge, '==': eq, '!=': ne}[cond_op](a, b)
</code></pre>

<p>I ran it on the test input, and the test passed. Good! Then I ran it on the
main puzzle input, got a nice looking number, and submitted my result.</p>

<p>Incorrect&hellip; Huh.</p>

<p>Can you spot the mistake?</p>

<p>I later fixed it in line 10, and it relates to types.</p>

<a name="Strong.and.Weak.Typing"></a>
<h2>Strong and Weak Typing</h2>

<p>One of the things I like about Python compared with other dynamically typed
languages is that Python is also strongly typed.</p>

<p>JavaScript &mdash; which is dynamically and weakly typed &mdash; implicitly converts
types, such as from number to string:</p>

<pre><code>&gt; 2 + '2'
'22'
</code></pre>

<p>Python doesn&rsquo;t &mdash; it forces you to choose:</p>

<pre><code>&gt;&gt;&gt; 2 + '2'
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unsupported operand type(s) for +: 'int' and 'str'

&gt;&gt;&gt; 2 + int('2')
4

&gt;&gt;&gt; str(2) + '2'
'22'
</code></pre>

<p>But ok, let&rsquo;s try mixed type comparison in JavaScript:</p>

<pre><code>&gt; 3 &lt; '5'
true

&gt; 30 &lt; '5'
false
</code></pre>

<p>And Python:</p>

<pre><code>&gt;&gt;&gt; 3 &lt; '5'
True

&gt;&gt;&gt; 30 &lt; '5'
True
</code></pre>

<p>(!)</p>

<p>In fact, any integer compares less than any string in CPython 2.</p>

<p>This was the reason for my bug &mdash; I kept comparing integer register values to
unparsed text strings:</p>

<pre><code>        if eval_cond(registers[cond_reg], cond_op, cond_const):
</code></pre>

<p>After adding the integer parsing, it worked as expected:</p>

<pre><code>        if eval_cond(registers[cond_reg], cond_op, int(cond_const)):
</code></pre>

<a name="Why.Does.It.Work.Like.This."></a>
<h2>Why Does It Work Like This?</h2>

<p>It&rsquo;s not that I had expected Python to suddenly do implicit type conversion for
comparison &mdash; I had just forgot the call to <code>int</code> &mdash; even though I had
remembered it while parsing the modification amount <code>mod_amt</code>.</p>

<p>What I would have hoped for was a loud error rather than a subtle bug. It turns
out there is both a reason for the subtle behavior in Python 2 and the option
to get a loud error &mdash; by using Python 3.</p>

<p>From the <a href="https://docs.python.org/2/library/stdtypes.html#comparisons">Python 2 docs</a>:</p>

<blockquote><p>Objects of different types [&hellip;] are ordered consistently but arbitrarily (so
that sorting a heterogeneous array yields a consistent result).</p></blockquote>

<p>From the <a href="https://docs.python.org/3/library/stdtypes.html#comparisons">Python 3 docs</a>:</p>

<blockquote><p>The &lt;, &lt;=, > and >= operators will raise a TypeError exception [&hellip;] when the
objects are of different types that cannot be compared [&hellip;].</p></blockquote>

<a name="Mixed-Type.Operators.Can.Be.Good"></a>
<h2>Mixed-Type Operators Can Be Good</h2>

<p>A little <a href="https://stackoverflow.com/a/2384139">history lesson</a> on stackoverflow.com explains why
heterogeneous lists are not cool anymore, and I&rsquo;m happy about the change in
comparison from Python 2 to 3.</p>

<p>But that does not mean that different types should never be combined with
operators.</p>

<p>Let&rsquo;s take another look at JavaScript:</p>

<pre><code>&gt; '3' * 4
12
</code></pre>

<p>And Python:</p>

<pre><code>&gt;&gt;&gt; '3' * 4
'3333'
</code></pre>

<p>If you were expecting this to evaluate to 12 &mdash; either because you came from
a weakly typed language, or because you simply forgot to parse the string as an
integer &mdash; you might also be confused. But I really like this Python behavior.</p>

<p>&ldquo;String multiplication&rdquo;, or rather <em>sequence replication</em>, is much more useful
than heterogeneous list sorting &mdash; so useful that it is acceptable for it to
risk being confusing to newcomers.</p>

<p>And as opposed to string/integer comparison, it&rsquo;s also less likely to lead to
subtle bugs. While the string/integer comparison returned a boolean just like
integer/integer comparison, string/integer multiplication returns a string, and
not the integer a novice might be expecting.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
