<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Erik Ramsgaard Wognsen]]></title>
  <link href="http://blog.erw.dk/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://blog.erw.dk/"/>
  <updated>2022-11-29T15:32:54+01:00</updated>
  <id>http://blog.erw.dk/</id>
  <author>
    <name><![CDATA[Erik Ramsgaard Wognsen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Visual Studio Sounds]]></title>
    <link href="http://blog.erw.dk/2021/10/02/visual-studio-sounds/"/>
    <updated>2021-10-02T22:35:14+02:00</updated>
    <id>http://blog.erw.dk/2021/10/02/visual-studio-sounds</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/posts/vs_sound1.png"></p>

<!-- more -->


<p><img class="right" src="/images/posts/vs_sound2.png"></p>

<p>I have been working with a slightly heavy C# code base that takes around a
minute to build and start up. This is enough time that I&rsquo;ll switch to another
program each time I start a debug or test run. But it&rsquo;s also short enough time
that if I get side&shy;tracked for five minutes, that&rsquo;s four minutes of Visual
Studio sitting idle.</p>

<p>One day I stumbled upon a setting in Visual Studio named &ldquo;Play a sound when
tests finish running&rdquo;, and from there a button to open the main Windows Sound
settings where a number of events in Visual Studio can be configured to trigger
a sound. This feature is simple but great. Now I can switch context and always
hear when I need to come back and work from a breakpoint or a finished test
run. I can also use different sounds to distinguish positive and negative
outcomes. Using the built-in Windows sounds, I found that these work great:</p>

<div class="next-table-striped"></div>


<table>
<thead>
<tr>
<th> <strong>Event</strong>          </th>
<th> <strong>Sound</strong>                  </th>
</tr>
</thead>
<tbody>
<tr>
<td> Breakpoint Hit     </td>
<td> Windows Pop-up Blocked.wav </td>
</tr>
<tr>
<td> Build Failed       </td>
<td> Windows Hardware Fail.wav  </td>
</tr>
<tr>
<td> Build Succeeded    </td>
<td> Windows Print complete.wav </td>
</tr>
<tr>
<td> Test Run Failed    </td>
<td> Windows Hardware Fail.wav  </td>
</tr>
<tr>
<td> Test Run Succeeded </td>
<td> tada.wav                   </td>
</tr>
</tbody>
</table>


<p><br /> Especially the Ta-Daaa! fanfare when the tests pass is a nice way to be
called back to Visual Studio. Happy coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yousician "No tempo definitions found"]]></title>
    <link href="http://blog.erw.dk/2018/07/28/yousician-no-tempo-definitions-found/"/>
    <updated>2018-07-28T12:23:29+02:00</updated>
    <id>http://blog.erw.dk/2018/07/28/yousician-no-tempo-definitions-found</id>
    <content type="html"><![CDATA[<p></p>

<p><img class="right" src="/images/posts/yousician_no_tempo_definitions.png"></p>

<p>This summer my girlfriend and I started practicing piano with <a href="https://yousician.com">Yousician</a>,
which is a kind of gamified music tutor, that listens to your playing and gives
instant feedback. It contains songs of gradually increasing difficulty, plus
you can upload your own songs in the <a href="https://www.musicxml.com/">MusicXML</a> format.</p>

<p>&ldquo;Adding songs is very easy&rdquo;, claims <a href="https://yousician.zendesk.com/hc/en-us/articles/207247365-What-is-MusicXML-file-and-how-to-upload-it">the documentation</a>, but at our
first attempt we were met with this error message: <strong>&ldquo;No tempo definitions
found. Please specify tempo in the file.&rdquo;</strong> Googling the error message gave no
results at all, so hopefully this post will change that.</p>

<!-- more -->


<p><img class="left" src="/images/posts/musicxml_hello_world.gif"></p>

<p>MusicXML is an interchange format with files typically generated or exported
from <a href="https://en.wikipedia.org/wiki/Scorewriter">scorewriter programs</a>. But us being programmers, we looked
to the XML itself to fix the problem. To find a
<a href="https://en.wikipedia.org/wiki/Minimal_Working_Example">minimal working example</a>, we tried the
<a href="https://www.musicxml.com/tutorial/hello-world/">MusicXML &ldquo;Hello World&rdquo;</a> example. Uploaded to Yousician, it gave the
same error message about the tempo missing.</p>

<a name="Solution"></a>
<h2>Solution</h2>

<p>If you control the scorewriter generating the MusicXML file and it allows
including tempo when you export, that should be the simple solution. Otherwise,
in the first <code>&lt;measure&gt;</code> element, add <code>&lt;sound tempo="120"/&gt;</code> with your desired
tempo in BPM:</p>

<pre><code class="xml">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;!DOCTYPE score-partwise PUBLIC
    "-//Recordare//DTD MusicXML 3.1 Partwise//EN"
    "http://www.musicxml.org/dtds/partwise.dtd"&gt;
&lt;score-partwise version="3.1"&gt;
  &lt;part-list&gt; ... &lt;/part-list&gt;
  &lt;part id="P1"&gt;
    &lt;measure number="1"&gt;
      &lt;sound tempo="120"/&gt;  &lt;!-- ADD THIS ELEMENT --&gt;
      &lt;attributes&gt; ... &lt;/attributes&gt;
      &lt;note&gt; ... &lt;/note&gt;
      ...
</code></pre>

<a name="Details"></a>
<h2>Details</h2>

<p>I don&rsquo;t think Yousician complies completely with the MusicXML standard.
Two things from the documentation of the <a href="https://usermanuals.musicxml.com/MusicXML/Content/CT-MusicXML-sound.htm">sound element</a>:</p>

<ul>
<li>The sound element [&hellip;] can stand alone within a part/measure [&hellip;]</li>
<li>If [the tempo is] 0, the sound-generating program should prompt the user at
the time of compiling a sound (MIDI) file.</li>
</ul>


<p>Yousician doesn&rsquo;t recognize a sound element in a part, only in a measure.
Second, if we see Yousician as a &ldquo;sound-generating program&rdquo; (it can play the
uploaded piece as a practice help, as well as play accompaniments), then it
doesn&rsquo;t satisfy the second part either. Tempo 0 will result in the message
&ldquo;Unfortunately something went wrong with file import.&rdquo; It would be better if it
prompted the user for a tempo, in case of both 0 and missing tempo.</p>

<p>However, tempo 1 was blindly accepted, resulting in a song slower than molasses
in January!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AoC 2017 Day 8: Fell Into a Python Pitfall]]></title>
    <link href="http://blog.erw.dk/2017/12/10/aoc-2017-day-8-fell-into-a-python-pitfall/"/>
    <updated>2017-12-10T20:43:47+01:00</updated>
    <id>http://blog.erw.dk/2017/12/10/aoc-2017-day-8-fell-into-a-python-pitfall</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been using and enjoying <a href="https://www.python.org/">Python</a> since 2009, but while doing
<a href="http://adventofcode.com">Advent of Code</a> again this year, I stumbled upon a Python feature that
led to a subtle bug. Advent of Code spoiler ahead.</p>

<!-- more -->


<a name="The.Puzzle"></a>
<h2>The Puzzle</h2>

<p>In AoC 2017 you travel inside Santa&rsquo;s computer, fixing and computing things so
the Naughty or Nice List can be printed on time for Santa to deliver the
presents on time.</p>

<p>The puzzle for <a href="http://adventofcode.com/2017/day/8">Day 8</a> gives you a textual input such as</p>

<pre><code class="Pascal">b inc 5 if a &gt; 1
a inc 1 if b &lt; 5
c dec -10 if a &gt;= 1
c inc -20 if c == 10
</code></pre>

<p>and asks you to find the largest value in any register after executing the
given instructions (on some imagined CPU). The registers (which are <code>a</code>, <code>b</code>,
and <code>c</code> in the above), are all initialized to zero. The largest value in the
example is 1, which is in the <code>a</code> register at the end.</p>

<p>The real puzzle input is much larger and requires an automated solution. My
approach was to build a register valuation dictionary, update it according to
the instructions, and then find the largest value.</p>

<a name="My.Solution"></a>
<h2>My Solution</h2>

<p>I wrote this code (refactored):</p>

<pre><code class="Python">from operator import lt, gt, le, ge, eq, ne

def day8(input):

    instructions = [line.split() for line in input.splitlines()]
    register_names = set(instruction[0] for instruction in instructions)
    registers = {register_name: 0 for register_name in register_names}

    for mod_reg, mod_op, mod_amt, _, cond_reg, cond_op, cond_const in instructions:
        if eval_cond(registers[cond_reg], cond_op, cond_const):
            registers[mod_reg] += (1 if mod_op == 'inc' else -1) * int(mod_amt)

    return max(registers.values())

def eval_cond(a, cond_op, b):
    return {'&lt;': lt, '&gt;': gt, '&lt;=': le, '&gt;=': ge, '==': eq, '!=': ne}[cond_op](a, b)
</code></pre>

<p>I ran it on the test input, and the test passed. Good! Then I ran it on the
main puzzle input, got a nice looking number, and submitted my result.</p>

<p>Incorrect&hellip; Huh.</p>

<p>Can you spot the mistake?</p>

<p>I later fixed it in line 10, and it relates to types.</p>

<a name="Strong.and.Weak.Typing"></a>
<h2>Strong and Weak Typing</h2>

<p>One of the things I like about Python compared with other dynamically typed
languages is that Python is also strongly typed.</p>

<p>JavaScript &mdash; which is dynamically and weakly typed &mdash; implicitly converts
types, such as from number to string:</p>

<pre><code>&gt; 2 + '2'
'22'
</code></pre>

<p>Python doesn&rsquo;t &mdash; it forces you to choose:</p>

<pre><code>&gt;&gt;&gt; 2 + '2'
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unsupported operand type(s) for +: 'int' and 'str'

&gt;&gt;&gt; 2 + int('2')
4

&gt;&gt;&gt; str(2) + '2'
'22'
</code></pre>

<p>But ok, let&rsquo;s try mixed type comparison in JavaScript:</p>

<pre><code>&gt; 3 &lt; '5'
true

&gt; 30 &lt; '5'
false
</code></pre>

<p>And Python:</p>

<pre><code>&gt;&gt;&gt; 3 &lt; '5'
True

&gt;&gt;&gt; 30 &lt; '5'
True
</code></pre>

<p>(!)</p>

<p>In fact, any integer compares less than any string in CPython 2.</p>

<p>This was the reason for my bug &mdash; I kept comparing integer register values to
unparsed text strings:</p>

<pre><code>        if eval_cond(registers[cond_reg], cond_op, cond_const):
</code></pre>

<p>After adding the integer parsing, it worked as expected:</p>

<pre><code>        if eval_cond(registers[cond_reg], cond_op, int(cond_const)):
</code></pre>

<a name="Why.Does.It.Work.Like.This."></a>
<h2>Why Does It Work Like This?</h2>

<p>It&rsquo;s not that I had expected Python to suddenly do implicit type conversion for
comparison &mdash; I had just forgot the call to <code>int</code> &mdash; even though I had
remembered it while parsing the modification amount <code>mod_amt</code>.</p>

<p>What I would have hoped for was a loud error rather than a subtle bug. It turns
out there is both a reason for the subtle behavior in Python 2 and the option
to get a loud error &mdash; by using Python 3.</p>

<p>From the <a href="https://docs.python.org/2/library/stdtypes.html#comparisons">Python 2 docs</a>:</p>

<blockquote><p>Objects of different types [&hellip;] are ordered consistently but arbitrarily (so
that sorting a heterogeneous array yields a consistent result).</p></blockquote>

<p>From the <a href="https://docs.python.org/3/library/stdtypes.html#comparisons">Python 3 docs</a>:</p>

<blockquote><p>The &lt;, &lt;=, > and >= operators will raise a TypeError exception [&hellip;] when the
objects are of different types that cannot be compared [&hellip;].</p></blockquote>

<a name="Mixed-Type.Operators.Can.Be.Good"></a>
<h2>Mixed-Type Operators Can Be Good</h2>

<p>A little <a href="https://stackoverflow.com/a/2384139">history lesson</a> on stackoverflow.com explains why
heterogeneous lists are not cool anymore, and I&rsquo;m happy about the change in
comparison from Python 2 to 3.</p>

<p>But that does not mean that different types should never be combined with
operators.</p>

<p>Let&rsquo;s take another look at JavaScript:</p>

<pre><code>&gt; '3' * 4
12
</code></pre>

<p>And Python:</p>

<pre><code>&gt;&gt;&gt; '3' * 4
'3333'
</code></pre>

<p>If you were expecting this to evaluate to 12 &mdash; either because you came from
a weakly typed language, or because you simply forgot to parse the string as an
integer &mdash; you might also be confused. But I really like this Python behavior.</p>

<p>&ldquo;String multiplication&rdquo;, or rather <em>sequence replication</em>, is much more useful
than heterogeneous list sorting &mdash; so useful that it is acceptable for it to
risk being confusing to newcomers.</p>

<p>And as opposed to string/integer comparison, it&rsquo;s also less likely to lead to
subtle bugs. While the string/integer comparison returned a boolean just like
integer/integer comparison, string/integer multiplication returns a string, and
not the integer a novice might be expecting.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AoC 2015 Day 5: Fun with Declarative Programming]]></title>
    <link href="http://blog.erw.dk/2015/12/06/fun-with-declarative-programming/"/>
    <updated>2015-12-06T19:36:41+01:00</updated>
    <id>http://blog.erw.dk/2015/12/06/fun-with-declarative-programming</id>
    <content type="html"><![CDATA[<p>My <a href="http://www.bachata-geek.me">girlfriend</a> introduced me to Eric Wastl&rsquo;s <a href="http://adventofcode.com">Advent of Code</a>,
a programming puzzle Advent calendar. The best advent calendar I&rsquo;ve had in my
adult life! (If you&rsquo;re planning on playing it, this article is one big spoiler
for Day 5.) I compare declarative programming puzzle solutions on readability
and speed.</p>

<!-- more -->


<p>The puzzle for Day 5 is:</p>

<blockquote><p>Santa needs help figuring out which strings in his text file are naughty or nice.</p>

<p>A nice string is one with all of the following properties:</p>

<ul>
<li>It contains at least three vowels (<code>aeiou</code> only), like <code>aei</code>, <code>xazegov</code>, or <code>aeiouaeiouaeiou</code>.</li>
<li>It contains at least one letter that appears twice in a row, like <code>xx</code>, <code>abcdde</code> (<code>dd</code>), or <code>aabbccdd</code> (<code>aa</code>, <code>bb</code>, <code>cc</code>, or <code>dd</code>).</li>
<li>It does not contain the strings <code>ab</code>, <code>cd</code>, <code>pq</code>, or <code>xy</code>, even if they are part of one of the other requirements.</li>
</ul>


<p></li>
</ul>


<p>How many strings are nice?</p></blockquote>

<p>On the <a href="http://adventofcode.com">page</a> you get more explanation and an input to use for your
code, but this is the basic challenge.</p>

<p>I&rsquo;d normally do this in Python, but I&rsquo;m brushing up on my C#-fu, so that&rsquo;s what
I went with. I first wrote it in classic, imperative style:</p>

<pre><code class="CSharp">using System;
using System.IO;

namespace Day5
{
  class MainClass
  {
    public static void Main()
    {
      var nNice = 0;

      foreach (var line in File.ReadLines("../../input"))
      {
        if (line.Contains("ab") ||
            line.Contains("cd") ||
            line.Contains("pq") ||
            line.Contains("xy"))
        {
          continue;
        }

        var vowels = 0;
        foreach (var character in line)
        {
          if ("aeiou".Contains(character))
          {
            vowels++;
          }
        }
        if (vowels &lt; 3)
        {
          continue;
        }

        foreach (var character in line)
        {
          if (line.Contains(new string(character, 2)))
          {
            nNice++;
            break;
          }
        }
      }
      Console.WriteLine(nNice);
    }
  }
}
</code></pre>

<p>One of the reasons I love Python is <a href="https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions">comprehensions</a>. But
.NET has <a href="https://msdn.microsoft.com/en-us/library/bb397926.aspx">LINQ</a> (Language Integrated Query), which I one of the reasons
I love C# too. By <code>using System.Linq</code> I can turn the <code>Main()</code> body into
a single, declarative statement:</p>

<pre><code class="CSharp">      Console.WriteLine(
        File.ReadLines("../../input")
        .Count(line =&gt;
          line.Count(character =&gt; "aeiou".Contains(character)) &gt;= 3 &amp;&amp;
          line.Any(character =&gt; line.Contains(new string(character, 2))) &amp;&amp;
          !(new[] { "ab", "cd", "pq", "xy" }.Any(naughty =&gt; line.Contains(naughty)))));
</code></pre>

<p>It sure feels good to write compact code, but is it better than the imperative
version?
It depends on how you evaluate it.</p>

<p></p>

<a name="Readability"></a>
<h2>Readability</h2>

<p>Imperative code always requires detailed inspection and/or non-outdated
comments to understand. On the other hand, I think the gist of the declarative
version is very quick to read: &ldquo;Count the number of lines in the input file
which satisfy &hellip; some criteria&rdquo;. Compared to the imperative version, the
overall purpose is much clearer. But the individual criteria still take time to
read.</p>

<p></p>

<pre><code class="CSharp">          line.Count(character =&gt; "aeiou".Contains(character)) &gt;= 3 &amp;&amp;
          line.Any(character =&gt; line.Contains(new string(character, 2))) &amp;&amp;
          !(new[] { "ab", "cd", "pq", "xy" }.Any(naughty =&gt; line.Contains(naughty)))
</code></pre>

<p>At least three vowels, a repeated character, and no naughty substrings.</p>

<p>The keen reader may have noticed that the first criterion could be written more
compactly as <code>line.Count("aeiou".Contains) &gt;= 3</code> (similarly with the third).
I think this is less readable, and compactness is not a goal in itself, unless
you are playing code golf. Incidentally, the method group (compact) version
also performs slightly slower.</p>

<p>Variable names are a form of built-in documentation. Along the same lines, it
might help to introduce variables:</p>

<pre><code class="CSharp">      var vowels = "aeiou";
      var naughtySubstrings = new[] { "ab", "cd", "pq", "xy" };
</code></pre>

<p>But readability also depends on what you know.
For the uninitiated, <a href="https://en.wikipedia.org/wiki/Regular_expression">regular expressions</a> are complete gibberish. But
for the experienced, <code>using System.Text.RegularExpressions</code> can actually state
the criteria more clearly. Instead of fussing over the individual characters of
the line and naughty patterns, it is easier to compare the whole, undivided
line to a pattern:</p>

<pre><code class="CSharp">          Regex.Matches(line, "[aeiou]").Count &gt;= 3 &amp;&amp;
          Regex.IsMatch(line, @"(.)\1") &amp;&amp;
          !Regex.IsMatch(line, "ab|cd|pq|xy")
</code></pre>

<p>Regular expressions are declarative on an even higher level.</p>

<p>But they might not perform that well, especially when using uncompiled regular
expressions. And that leads us to another criterion.</p>

<a name="Performance"></a>
<h2>Performance</h2>

<p>Doing a quick benchmark on an input with two million strings and warmed-up
caches, the uncompiled Regex version completes in 6.6 seconds, the LINQ version
in 4.4 seconds, and my naive imperative version in 2.4 seconds. So much for
readability. (This was using Mono, btw.)</p>

<p>But, the declarative style has a trick up its sleeve: Parallelism for free!</p>

<pre><code class="CSharp">      Console.WriteLine(
        File.ReadLines("../../input")
        .AsParallel()  ///////////////////////////////// Parallelism for free!
        .Count(line =&gt;
          line.Count(character =&gt; "aeiou".Contains(character)) &gt;= 3 &amp;&amp;
          line.Any(character =&gt; line.Contains(new string(character, 2))) &amp;&amp;
          !(new[] { "ab", "cd", "pq", "xy" }.Any(naughty =&gt; line.Contains(naughty)))));
</code></pre>

<p>1.8 seconds on my quadcore!</p>

<p></p>

<p>Now, I have not optimized any of these three versions for performance, and it
could of course be done faster in C# (with or without explicit threads), and
most likely even faster in C or C++.</p>

<p>So I think the conclusion so far is what it is nothing new:
Readability and performance are conflicting goals.</p>

<a name="Debuggability"></a>
<h2>Debuggability</h2>

<p>One final criterion is debuggability. I have loved declarative style for a long
time, but always found it harder to debug than imperative style. However, an
advantage of Python and C# compared to, say, Haskell, is that they are
basically imperative languages with other paradigms on top. Thus, you can
gradually learn declarative and functional style in the safe context of
imperative programming. And cut down on the declarative-ness when you want to.</p>

<p>However, next up on my reading list is <a href="https://www.simple-talk.com/dotnet/.net-framework/linq-secrets-revealed-chaining-and-debugging/">LINQ Secrets Revealed: Chaining and Debugging</a>.</p>

<a name="Python.Postscript"></a>
<h2>Python Postscript</h2>

<p>I did the puzzle in Python just to see how it compared. Rather than reading the
length of a list made with a list comprehension, I do it in a streaming fashion
by summing over a generator expression:</p>

<pre><code class="Python">import re
print sum(1 for line in open("input").readlines()
          if (len(re.findall('[aeiou]', line)) &gt;= 3 and
              re.search(r'(.)\1', line) and
              not re.search('ab|cd|pq|xy', line)))
</code></pre>

<p></p>

<p>(This is the whole program, not just the body of some main function!)</p>

<p>At 5.3 seconds for the two million strings, this stacks up pretty well against
C#, considering that Python is interpreted.</p>

<p><em>Update 2016-03-12: I added in the performance section that I used Mono.</em></p>

<p><em>Update 2017-12-09: Changed the post title.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ode to my Casio]]></title>
    <link href="http://blog.erw.dk/2015/07/11/ode-to-my-casio/"/>
    <updated>2015-07-11T13:57:20+02:00</updated>
    <id>http://blog.erw.dk/2015/07/11/ode-to-my-casio</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/posts/casio.jpg" width="345"></p>

<p>The year was 2002 and I had started gymnasium (≈high school). My parents had
bought me the graphic calculator required for our maths classes: Casio fx-9750G
PLUS. It was white and green and curvy and Casio &mdash; not dark and rectangular
and from Texas Instruments, as a calculator was expected to be. Soon, however,
this happy-looking thing became my companion on my journey into the world of
programming.</p>

<!-- more -->


<p></p>

<p></p>

<p>Compared with a personal computer, this calculator was weak, to say the least.
The display resolution was 128×64 pixels in black and white. (However, I did
for a long time dream of the color LCD version CFX-9850GC PLUS, which could
show <em>three</em> colors:
<span style="color:orange">orange</span>,
<span style="color:green">green</span>, and
<span style="color:blue">blue</span>.)
The processor was slow. Graphing <em>y = x<sup>2</sup></em> took a good five seconds. Sinusoidal
regression on 150 data points took 75 seconds, plus another 8 seconds to draw
the sine curve.
Memory was limited as well: 32K, of which only 28568 bytes were available to
the user. And of which every list and matrix entry took up 10 bytes! Plus, any
time something was graphed, 4K was reserved for that.
</p>

<p>Yet for all these complaints, this machine was a fantastic place to start
programming. Having a fixed set of features challenges you to do what you can
with what you have. On this fixed platform, there was no getting lost in
debates about which programming language to use, because there was only one
choice. There was no trouble with installation or incompatible software
libraries. There was no web browsing or multitasking. No distraction. And zero
boot time and a year of battery life.</p>

<p><img class="right" src="/images/posts/casio-fact.jpg"></p>

<p>The basic calculator part is a REPL: That is to say it <em>reads</em> your input,
<em>evaluates</em> it, <em>prints</em> the result, and it <em>loops</em>, doing this indefinitely.
In this interactive environment, you can familiarize yourself with expressions
before slowly, step by step, automating small parts of your calculations. You
could, for example, make a small program that asks the user for input and uses
a loop to do a calculation.</p>

<p></p>

<p>And there were enough features to do really cool things: Plotting, lists and
list operations (sorting, summation, product, mean, median, etc.), matrices and
matrix operations, statistics, regression, etc.</p>

<p></p>

<a name="Programming.on.the.Bus"></a>
<h2>Programming on the Bus</h2>

<p>During the bus trips to school I spent as much time with my Casio as people
today spend with their smartphones. And I suppose this puzzled the other
students: How much time can you really spend calculating?</p>

<p>I made programs for all sorts of tasks. One type was the programs that helped
my maths and science classes. In maths it was nice to be able to enter the
information you had about a triangle, and then calculate the rest
automatically. Or calculate the greatest common divisor. In physics,
I calculated and visualized refraction. In chemistry, I calculated molar
masses.</p>

<p><img class="right" src="/images/posts/casio-guitar.jpg"></p>

<p>But it was also fun and games: I made programs that drew nice geometric shapes
for their beauty. I calculated poker odds. During some boring classes I made
a program in which you entered the time of day (the calculator didn&rsquo;t have
a clock), and it drew a 3d pie chart showing how close the current lecture was
to completion. And I factored out the pie chart so other programs could use it
as a subroutine.</p>

<p>I made programs for sound and music. I translated between notes (such as A) and
frequencies (such as 440 Hz). I visualized harmonics. I made a program that
showed all the ways a chosen note could be played on a guitar. (And
I didn&rsquo;t even play the guitar!)</p>

<p>And I made games. Guess which number I&rsquo;m thinking of, where the program tells
you whether your guess was too high or too low. I made a game in which you had
to remember random numbers that were shown in progressively shorter glimpses.
Each level made the number one digit longer. I made Snake. It grew linearly
slower with the length of the snake, and the game was too slow to be fun to
play. But that didn&rsquo;t affect my pride in making it. Near the end of gymnasium,
I was planning a strategy game inspired by Command &amp; Conquer Tiberian Sun,
which I loved. I had a cool animation for the cyborgs&#8217; machine guns, but other
than that, I never got very far. But to be fair, it is a rather big step from
Snake to that.</p>

<a name="Much.Learnage"></a>
<h2>Much Learnage</h2>

<p>This primitive programming taught me some lessons about &ldquo;real&rdquo; programming:</p>

<ul>
<li>Understanding a program you wrote months ago is tricky, when all variable
names are a single character. I learned the value of descriptive variable
names.</li>
<li>The slow processor gave me a tangible sense of execution time and complexity.</li>
<li>With an editor window of 6x21 chars, I soon learned that sketching your
algorithm or architecture before implementing is useful for big programs.
That would probably take more time to learn on a big screen.</li>
<li>I learned to prioritize what to do with the limited memory.</li>
<li>I learned debugging the hard way: There were almost no meaningful error
messages (but at least you could be taken to the location in the code that
caused the error).</li>
<li>I learned that all programs and subroutines sharing a global address space
sucks!</li>
</ul>


<p></p>

<a name="Interacting.with.the.World"></a>
<h2>Interacting with the World</h2>

<p>After some time, interacting with a program through a (tiny) screen and (tiny)
keyboard was not enough. I wanted to interact with the world. Thankfully, my
parents got me the Casio EA-200 data logger. This device was even clunkier than
the calculator, but it was a window to the physical world: Now I could measure
voltage, light, temperature, and sound.</p>

<p>I measured the fluctuation of the temperature in the fridge. Since I could hear
the compressor swiching on and off I knew the temperature couldn&rsquo;t be constant,
so I wanted to know the extent of the lie that &ldquo;a fridge is 5&#x00b0;C&rdquo;. (As
I recall, it went between 4 and 8&#x00b0;C). Knowledge is power, even in the
small.</p>

<p>With the microphone and speaker, I made a dictaphone. As with Snake, the idea
of making it was more important than its usefulness. It did work, but the
memory was somewhat limited.</p>

<p>I also measured the fluctuation of the intensity of light from lightbulbs. Even
when they appear constantly on, they heat and cool with the alternating current
of the electric grid. And I learned about another &ldquo;truth&rdquo;: Our electric grid
runs at 50 Hz. Yes, when it&rsquo;s not 49 and 52 and 50.2 Hz. This is also where
I got to appreciate the Fourier transform that I recently <a href="/2015/03/20/debugging-complex-numbers/">implemented</a>
myself.</p>

<p>My dear Casio, thanks for the ride.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
