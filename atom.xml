<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Erik Ramsgaard Wognsen]]></title>
  <link href="http://blog.erw.dk/atom.xml" rel="self"/>
  <link href="http://blog.erw.dk/"/>
  <updated>2015-02-27T13:43:22+01:00</updated>
  <id>http://blog.erw.dk/</id>
  <author>
    <name><![CDATA[Erik Ramsgaard Wognsen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[4 Years with Colemak]]></title>
    <link href="http://blog.erw.dk/2015/02/27/4-years-with-colemak/"/>
    <updated>2015-02-27T13:38:30+01:00</updated>
    <id>http://blog.erw.dk/2015/02/27/4-years-with-colemak</id>
    <content type="html"><![CDATA[<p>As a young computer user I felt that something was wrong with the keyboard.
Like Morpheus says to Neo when they first meet:</p>

<blockquote><p>What you know you can&rsquo;t explain. But you feel it. You&rsquo;ve felt it your entire
life. That there&rsquo;s something wrong with the world. You don&rsquo;t know what it is
but it&rsquo;s there, like a splinter in your mind driving you mad. It is this
feeling that has brought you to me. Do you know what I&rsquo;m talking about?</p></blockquote>

<p>QWERTY.</p>

<p>Touch typing on the QWERTY keyboard layout is wrong. You can do it every day,
all day, but there&rsquo;s something wrong with it. Today, four years ago, I took the
red pill: I started using the <a href="http://colemak.com/">Colemak</a> keyboard layout.</p>

<p><span class='caption-wrapper'><img class='caption' src='http://blog.erw.dk/images/posts/colemak_qwerty_3d.png' width='' height='' alt='Comparison of QWERTY and Colemak keyboard layouts with letter frequencies. Graphics by Pavel Pavlov.'><span class='caption-text'>Comparison of QWERTY and Colemak keyboard layouts with letter frequencies. Graphics by Pavel Pavlov.</span></span></p>

<!-- more -->


<p>In the image above, the QWERTY and Colemak keyboard layouts are shown with the
height of each key set to the <a href="http://en.wikipedia.org/wiki/Letter_frequency#Relative_frequencies_of_letters_in_the_English_language">frequency</a> with which it is
used. With this view, a pattern becomes obvious: The most often used keys are
scattered in QWERTY and collected on the home row in Colemak (pronounced
Coal-Mac). This means that you have to move your fingers much less in Colemak.
In fact, the home row has only around ⅓ of keystrokes in QWERTY while in
Colemak it has ¾ in English. The backspace key that is also used fairly often
is also changed from an awkward pinky stretch to a prime location on the home
row: where the caps lock key used to be.</p>

<p><span class='caption-wrapper'><img class='caption' src='http://blog.erw.dk/images/posts/CmkNew_IBM-DIY_90d-erw.png' width='' height='' alt='Colemak Keyboard Figure (IBM style) by [Øystein Bech Gadmar] [DreymaR], [CC BY-NC 4.0] [cc-by-nc4], caps lock key retouched, colors adjusted.'><span class='caption-text'>Colemak Keyboard Figure (IBM style) by <a href="http://forum.colemak.com/profile.php?id=125">Øystein Bech Gadmar</a>, <a href="http://creativecommons.org/licenses/by-nc/4.0/">CC BY-NC 4.0</a>, caps lock key retouched, colors adjusted.</span></span></p>

<p>Typing on Colemak is very smooth. Besides reducing the distance your fingers
have to travel, it also makes transitions from one letter to the next pleasant.
This is for example done by reducing repeated use of the same finger. QWERTY
repeats the same finger in some frequent <a href="http://en.wikipedia.org/wiki/Bigram">bigrams</a> (sequences of two
letters) such as <em>ed</em>, <em>de</em>, <em>ce</em>, <em>my</em>, and <em>un</em>. They might seem
inconspicuous, but they disrupt the flow of typing, and the latter two also
jump two rows. To type out
<em><a href="http://www.gutenberg.org/ebooks/1661">The Adventures of Sherlock Holmes</a></em> you would type 21782
same-finger bigrams on QWERTY and 5503 on Colemak. (On both layouts you would
in addition type 10095 same <em>letter</em> bigrams (<em>ll</em>, <em>ee</em>, etc.), but those are
not easily avoided.)</p>

<p>Longer sequences also flow smoothly. This is partly because they consist of the
shorter sequences mentioned above, which are themselves pleasant, and partly
because of <em>rolls</em>. These are sequences that just &ldquo;roll&rdquo; off your fingers. For
example, the common <a href="https://en.wikipedia.org/wiki/Trigram">trigrams</a> <em>ing</em>, <em>the</em>, <em>ent</em>, and <em>tio</em> flow
in one direction over the keyboard, left-to-right or right-to-left, making them
easy to type. Rolls on the same hand are even better: T<strong>hey</strong>, c<strong>oul</strong>d,
sh<strong>oul</strong>d, l<strong>ast</strong>, fi<strong>rst</strong>, med<strong>ium</strong>, cl<strong>ien</strong>t, ar<strong>oun</strong>d, sh<strong>arp</strong>,
<strong>arg</strong>ument. These (common) sequences almost makes typing fun!</p>

<p>But in the end, Colemak is a good balance of many desirable properties: Minimal
finger movement, smooth transitions, less work for the weaker fingers, a good
balance between hand alternation and rolls, and a good balance between right
and left hand.</p>

<p>As someone who works with computers all day, these past four years have been
much more comfortable due to Colemak. Therefore I would like to say thank you
to Shai Coleman for creating Colemak, and the Colemak <a href="http://forum.colemak.com/">community</a>
for encouragement and many discussions!</p>

<p>Below, some frequently asked questions, and my answers to them.</p>

<a name="Frequently.Asked.Questions"></a>
<h2>Frequently Asked Questions</h2>

<a name="Does.it.work.on.my.computer."></a>
<h3>Does it work on my computer?</h3>

<p>Yes. It&rsquo;s built into Mac OS X, Linux (X.org), *BSD, ChromeOS, Android, iOS
(for external keyboards), etc. Basically all the cool kids. You can also get
and customize it on Windows (even without admin privileges) with <a href="http://www.autohotkey.com/">AutoHotKey</a>
or <a href="http://pkl.sourceforge.net/">Portable Keyboard Layout</a>, OS X with <a href="http://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&amp;id=ukelele">Ukelele</a>, and Linux
with X.org xkb (built in). See <a href="http://colemak.com/Download">Colemak downloads</a>.</p>

<a name="Do.I.need.a.new..physical..keyboard."></a>
<h3>Do I need a new (physical) keyboard?</h3>

<p>No. Key labels are not good for touch typing on any layout. And only frequently
used keys change in Colemak compared to QWERTY, so the rare ones even keep
their correct labels if you need a peek for those.</p>

<a name="But.wait..why.touch.type.at.all."></a>
<h3>But wait, why touch type at all?</h3>

<p><a href="http://en.wikipedia.org/wiki/Touch_typing">Touch typing</a> means that you type without looking at the
keyboard or your hands. This means you can keep your focus on your work, which
avoids the overhead of switching your attention.</p>

<p>If you do not currently touch type, you can
kill two stones with one bird
by
learning touch typing on Colemak. It&rsquo;s also more fun because you start typing
real words instead of permutations of <em>fjdksl</em>!</p>

<a name="How.much.time.does.it.take.to.learn."></a>
<h3>How much time does it take to learn?</h3>

<p>Check out <a href="http://forum.colemak.com/viewforum.php?id=6">users&#8217; experiences</a> on the forum! For me
it took a couple of weeks to reach a workable level, and a couple of months to
become proficient.</p>

<p>Since then, a new and probably more comfortable method has paved the way for
learning Colemak: the <a href="http://forum.colemak.com/viewtopic.php?id=1858">Tarmak transitional layouts</a>.
Instead of switching all keys at once and being generally confused, you change
a few keys, adapt, change a few more, adapt again. This way, you can stay
fairly productive during the whole transition period. It&rsquo;s really quite clever.</p>

<a name="What.about.other.people.using.your.computer."></a>
<h3>What about other people using your computer?</h3>

<p>If you want to share the computer with others, all major OSes allow some quick
keyboard shortcut to switch layouts. If not, consider your alternative layout
a deterrent ;-)</p>

<a name="What.about.using.other.people.s.computers."></a>
<h3>What about using other people&rsquo;s computers?</h3>

<p>While primarily using an alternative layout, some people retain their ability
to type QWERTY, and others do not. <a href="http://www.ryanheise.com/colemak/">Here</a> are some tips on
retaining proficiency in both layouts.</p>

<p>Personally I lost interest in QWERTY after a few weeks of using Colemak. Now
I hunt and peck when I use other people&rsquo;s computers and enjoy the comfortable
99% of the time on my own computers.</p>

<a name="What.about.other.alternative.layouts."></a>
<h3>What about other alternative layouts?</h3>

<p>Colemak is neither the first nor the last attempt at a better keyboard layout.
It is however one of the better ones so far. You can see a comparison of
keyboard layouts at <a href="http://mkweb.bcgsc.ca/carpalx/?popular_alternatives">carpalx</a>.</p>

<a name="Does.it.work.for.my.language."></a>
<h3>Does it work for my language?</h3>

<p>Yes, probably. Colemak is made for English, but it supports <a href="http://colemak.com/Multilingual">many languages</a>
in the sense that you can type the necessary special characters and accents. It
is also likely that the letters that are most common in English (and therefore
easy to type on Colemak), are also frequent in your own language. It might not
be a perfect match, but it&rsquo;s probably a lot better than QWERTY and its cousins
(QWERTZ, AZERTY).</p>

<p>The special characters are inserted using the AltGr key. If you type 90%
English and 10% something else, AltGr will probably do fine. If your balance is
closer to 50/50, you could make a localized version of Colemak, or find an
existing one. There are no official Colemak versions available for languages
other than English (but there are some unofficial ones by the community).</p>

<p>The official approach is to use the standard Colemak including US style
punctuation symbol locations and use some punctuation keys for the most common
extra characters in your language (the less-than/greater-than key found between
Shift and Z on most non-US keyboards is a good first choice). For example, in
<a href="http://practicalcryptography.com/cryptanalysis/letter-frequencies-various-languages/french-letter-frequencies/">French</a>, &lsquo;é&rsquo; is frequent (2.4%) and a good
candidate for a dedicated key, while &lsquo;ê&rsquo; (0.1%) is not and can be typed using
the standard Colemak AltGr layer.</p>

<p>Another approach is to start with your native keyboard layout and drop in the
Colemak letter block. I will show that below because that is my own approach.
The reason to do this is the same reasoning that is behind Colemak proper:
Avoid moving low frequency keys (such as punctuation and rare letters). They
take longer to relearn because you practice them less often.</p>

<p>As a side note, if you don&rsquo;t type so much English but still want a better
layout, you could look for something made for your own language, for example
German (de-ergo, NEO, ADNW), French (Bépo, Dvorak-fr, bvofrak), Dutch (De
Correspondent), or Portuguese (pt-Nativo).</p>

<a name="Does.it.work.for.Danish."></a>
<h3>Does it work for Danish?</h3>

<p>Yes, see the section above. The main difference between Danish and English is
the addition of Æ, Ø, and Å. At 0.87%, 0.94%, and 1.19% respectively, they are
not extremely <a href="http://practicalcryptography.com/cryptanalysis/letter-frequencies-various-languages/danish-letter-frequencies/">frequent</a>. But on the other hand,
their sum is 3.0%, and having to reach for AltGr 2-3 times per sentence is more
than I want. (However, this can be made much easier by putting AltGr on the
Caps Lock location.)</p>

<p><span class='caption-wrapper right'><img class='caption' src='http://blog.erw.dk/images/posts/colemak_dk.png' width='' height='' alt='Danish Colemak. The shaded keys have moved compared to Danish QWERTY.'><span class='caption-text'>Danish Colemak. The shaded keys have moved compared to Danish QWERTY.</span></span></p>

<p>My solution keeps Ø and Å in their regular locations, while Æ only moves one
position up &mdash; like the semicolon key in English.</p>

<p>On top of that I have made some <a href="https://bitbucket.org/erw/colemak/src/default/dk">changes</a> to facilitate programming,
such as putting the brackets {[]} on AltGr-neio, putting backslash on the
½ key. These types of modifications are personal and you will probably want
something else. If you are a programmer, you can also use the &ldquo;standard&rdquo;
solution which is to use the US English layout (whether QWERTY or Colemak).</p>

<a name="What.about..Vim...vim_category.."></a>
<h3>What about <a href="http://blog.erw.dk/blog/categories/vim/">Vim</a>?</h3>

<p>The first difference you notice is that <em>j</em> and <em>k</em> have moved away from the
home row &mdash; and rightly so, because in typing, they are very rare: 0.22% and
0.81%. There are many options. Some people use vim as-is. Either because they
don&rsquo;t feel the need for any changes, or because they use the arrow keys anyway
(in which case I would recommend learning <em>hjkl</em>).</p>

<p><span class='caption-wrapper right'><img class='caption' src='http://blog.erw.dk/images/posts/colemak_vim_erw.png' width='' height='' alt='Vim remapping for Colemak'><span class='caption-text'>Vim remapping for Colemak</span></span></p>

<p>Some people make only minimal changes to Vim (see for example the end of
<a href="http://www.ryanheise.com/colemak/">this page</a>) while others use the opportunity to do a
<a href="http://forum.colemak.com/viewtopic.php?id=50">major refurnishing</a>.
My own approach is in between but conceptually simple. Keys are shifted around
two loops: <em>k</em>-<em>n</em>-<em>j</em>-<em>e</em> and <em>i</em>-<em>l</em>. This restores the normal <em>hjkl</em>
navigation cluster and puts next match <em>n</em> back on its previous location.
Insert <em>i</em> and end <em>e</em> are now on L and J. (You can memorize it as &lsquo;linsert&rsquo;
and &lsquo;jend&rsquo; until muscle memory takes over.) You can source <a href="https://bitbucket.org/erw/colemak/src/default/colemak.vim">my mappings</a>
from your .vimrc to try it out.</p>

<a name="What.about.using.an.Ergonomic.keyboard.instead."></a>
<h3>What about using an Ergonomic keyboard instead?</h3>

<p>That is a good idea.
Especially if it has a <a href="http://deskthority.net/wiki/Staggering#Matrix_layout">columnar or matrix</a> key layout.
Then it might even be better for comfort than switching layout.
The two approaches can also be combined.
That&rsquo;s what I do, but more on that later.</p>

<p>Thanks for reading!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Sound of R]]></title>
    <link href="http://blog.erw.dk/2015/02/21/the-sound-of-r/"/>
    <updated>2015-02-21T13:27:20+01:00</updated>
    <id>http://blog.erw.dk/2015/02/21/the-sound-of-r</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://upload.wikimedia.org/wikipedia/en/thumb/a/a0/Voiced_uvular_fricative_%28vector%29.svg/300px-Voiced_uvular_fricative_%28vector%29.svg.png" title="R" alt="R"></p>

<p>R is a common letter in many languages, but it represents vastly different
sounds. Sometimes even within the same language.
As <a href="https://en.wikipedia.org/wiki/Rhotic_consonant">Wikipedia says</a>:
<em>Being &ldquo;R-like&rdquo; is an elusive and ambiguous concept phonetically</em>.
In fact, we might not even consider the R-sound used in, say, Spain, related to
the R-sound used in France/Germany/Denmark, if they were not spelled the same.
However, it was the will of history that they are, and in this post, I will
present the three main families of R-sounds in European languages: English,
Spanish, and French.</p>

<p>I am trying to keep it jargon free; hence the names above. They are
a simplification, and in fact many languages use the three types. For example,
the &ldquo;Spanish&rdquo; type is also Italian, Finnish, Icelandic, Lithuanian, Polish,
Czech, etc. Some languages, such as <a href="http://youtu.be/iIWmTglqUzY">Dutch</a> and Portuguese also use
more than one type, even within a single dialect. In this post I will cover the
three &ldquo;mainstream&rdquo; R families plus a lot of other interesting R-facts,
including that R is sometimes a vowel!</p>

<p>(R is incidentally also a very nice <a href="https://en.wikipedia.org/wiki/R_%28programming_language%29">statistics program</a>, but that is
not the topic of this post!)</p>

<!-- more -->


<a name="English"></a>
<h2>English</h2>

<p>Since you are reading this in English, I think you are familiar with this type
of R:</p>

<p><audio controls>
<source src="https://upload.wikimedia.org/wikipedia/commons/1/1f/Alveolar_approximant.ogg" type='audio/ogg; codecs=vorbis' />
</audio>&nbsp;&nbsp;
<span style="vertical-align: top;">
<small>
<a href="https://en.wikipedia.org/wiki/File:Alveolar_approximant.ogg">Alveolar approximant</a> by <a href="https://commons.wikimedia.org/wiki/User:Peter_Isotalo">Peter Isotalo</a>,
<a href="https://creativecommons.org/licenses/by-sa/3.0/deed.en">CC BY-SA 3.0</a>
</small>
</span></p>

<p>Consonants do not usually stand alone, so what you hear is the R mixed with
vowels: [ra ara].</p>

<p>There is some variation in where the English type R is used.
In <a href="https://en.wikipedia.org/wiki/Rhotic_and_non-rhotic_accents">non-rhotic</a> dialects, Rs that are not immediately followed by
a vowel disappear. A famous example is the sentence &ldquo;Park the car in Harvard
Yard&rdquo;. In a non-rhotic dialect, in Boston for example, it would be pronounced
&ldquo;Pahk the car in Hahvahd Yahd&rdquo;.
Dialects with <a href="https://en.wikipedia.org/wiki/Linking_and_intrusive_R#Intrusive_R">intrusive R</a> on the other hand
insert them where they didn&rsquo;t appear originally: &ldquo;I saw a film&rdquo; becomes &ldquo;I sawr
a film&rdquo; (<a href="https://www.youtube.com/watch?v=P-Q9D4dcYng#t=72">oh boy</a>).</p>

<a name="Spanish"></a>
<h2>Spanish</h2>

<p>The &ldquo;Spanish&rdquo; R covers two types, depending on whether you tap the tongue
<em>once</em> <a href="https://en.wikipedia.org/wiki/Alveolar_ridge">behind your upper front teeth</a> or roll it multiple
times:</p>

<p><audio controls>
<source src="https://upload.wikimedia.org/wikipedia/commons/a/a0/Alveolar_tap.ogg" type='audio/ogg; codecs=vorbis' />
</audio>&nbsp;&nbsp;
<span style="vertical-align: top;">
<small>
<a href="https://en.wikipedia.org/wiki/File:Alveolar_tap.ogg">Alveolar tap</a> by <a href="https://commons.wikimedia.org/wiki/User:Peter_Isotalo">Peter Isotalo</a>,
<a href="https://creativecommons.org/licenses/by-sa/3.0/deed.en">CC BY-SA 3.0</a>
</small>
</span></p>

<p><audio controls>
<source src="https://upload.wikimedia.org/wikipedia/commons/c/ce/Alveolar_trill.ogg" type='audio/ogg; codecs=vorbis' />
</audio>&nbsp;&nbsp;
<span style="vertical-align: top;">
<small>
<a href="https://en.wikipedia.org/wiki/File:Alveolar_trill.ogg">Alveolar trill</a> by <a href="https://commons.wikimedia.org/wiki/User:Peter_Isotalo">Peter Isotalo</a>,
<a href="https://creativecommons.org/licenses/by-sa/3.0/deed.en">CC BY-SA 3.0</a>
</small>
</span></p>

<p>Some languages use only one of these two. In (standard) Spanish, they are both
used: For single R (as in &ldquo;pero&rdquo;, meaning &ldquo;but&rdquo;) and double R (&ldquo;perro&rdquo;, &ldquo;dog&rdquo;),
respectively. (However, I once met a <em>Carmen</em> who told me she liked her name
pronounced with a roll consisting of three taps.)</p>

<p>This type of R is also where &ldquo;R-ness&rdquo; becomes strange: The single tap has
a D-like quality to it. For example, the <em>tt</em> in &ldquo;better&rdquo; in English is also
made by tapping the tongue on the gum ridge behind the front teeth!</p>

<p><audio controls>
<source src="https://upload.wikimedia.org/wikipedia/commons/4/45/En-us-better.ogg" type='audio/ogg; codecs=vorbis' />
</audio>&nbsp;&nbsp;
<span style="vertical-align: top;">
<small>
&ldquo;<a href="https://en.wikipedia.org/wiki/File:En-us-better.ogg">Better</a>&rdquo; by <a href="https://commons.wikimedia.org/wiki/User:Dvortygirl">Dvortygirl</a>,
<a href="https://creativecommons.org/licenses/by-sa/3.0/deed.en">CC BY-SA 3.0</a>
</small>
</span></p>

<a name="French"></a>
<h2>French</h2>

<p>French R, German R, Danish R. Also known as
<a href="https://en.wikipedia.org/wiki/Guttural_R">guttural (throaty) R</a>.
Like the Spanish R, it can also be done with or without a trill:</p>

<p><audio controls>
<source src="https://upload.wikimedia.org/wikipedia/commons/a/af/Voiced_uvular_fricative.ogg" type='audio/ogg; codecs=vorbis' />
</audio>&nbsp;&nbsp;
<span style="vertical-align: top;">
<small>
<a href="https://en.wikipedia.org/wiki/File:Voiced_uvular_fricative.ogg">Voiced uvular fricative</a> by <a href="https://commons.wikimedia.org/wiki/User:Peter_Isotalo">Peter Isotalo</a>,
<a href="https://creativecommons.org/licenses/by-sa/3.0/deed.en">CC BY-SA 3.0</a>
</small>
</span></p>

<p><audio controls>
<source src="https://upload.wikimedia.org/wikipedia/commons/c/cb/Uvular_trill.ogg" type='audio/ogg; codecs=vorbis' />
</audio>&nbsp;&nbsp;
<span style="vertical-align: top;">
<small>
<a href="https://en.wikipedia.org/wiki/File:Uvular_trill.ogg">Uvular trill</a> by <a href="https://commons.wikimedia.org/wiki/User:Peter_Isotalo">Peter Isotalo</a>,
<a href="https://creativecommons.org/licenses/by-sa/3.0/deed.en">CC BY-SA 3.0</a>
</small>
</span></p>

<p>These sounds are produced while touching the back of the tongue to the <a href="https://en.wikipedia.org/wiki/Palatine_uvula">uvula</a>
&mdash; the dangly thing at the back of the throat. (Danes are in fact lazy and
only <em><a href="https://en.wikipedia.org/wiki/Approximant_consonant">approach</a></em> the back of the tongue to the uvula, but the
sound is almost the same.)</p>

<p>In the southern parts of Norway and Sweden, close to Denmark, this type of R is
also used.</p>

<a name="Portuguese"></a>
<h2>Portuguese</h2>

<p>I have not included Portuguese as a type of R, because this beautiful language
in fact uses a large array of sounds to pronounce the letter R, depending on
dialect and context. As <a href="https://en.wikipedia.org/wiki/Portuguese_language#Consonants">Wikipedia says</a>:</p>

<blockquote><p>The actual uvular pronunciation [χ ʁ ʀ] is common in Portugal, although the
older trill [r] is also heard. In Brazil, the total inventory of /ʁ/
allophones is rather long, or up to [r ç x ɣ χ ʁ ʀ ħ h ɦ]</p></blockquote>

<p>The pronunciation of an R at the beginning of a word in Brazil can be
especially counter-intuitive (at least if you&rsquo;re not from Brazil!). As
I learned from my Portuguese teacher (from <a href="https://en.wikipedia.org/wiki/Bras%C3%ADlia">Brasília</a>), the word
<em><a href="http://en.wiktionary.org/wiki/real#Portuguese">real</a></em> (meaning both real and royal, and being the Brazilian
currency), is pronounced <em><a href="http://www.forvo.com/word/real/#pt">heau</a></em>(!) An initial R is a breathy
H-sound, and a final L is a U-like sound.</p>

<a name="R.as.Vowel"></a>
<h2>R as Vowel</h2>

<p>In the section on the English R, I mentioned non-rhotic dialects (typical of
England) where Rs that are not immediately followed by a vowel disappear. But
it might be more correct to say that they are vowels. Sometimes they prolong
existing vowels, as in &ldquo;park the car&rdquo;, where the R prolongs the existing
A-sound: &ldquo;paak the caa&rdquo;. Other times, you can hear the R as a separate A-like
sound: beer [bia], your [yua/yoa], poor [pua/poa]. It also merges with E:
reader [reeda], bother [botha]. Technically, the sound is a
<em><a href="https://en.wikipedia.org/wiki/Schwa">schwa</a></em>, a &ldquo;lazy&rdquo;, neutral vowel made while relaxing the mouth.
I guess whoever invented the word &ldquo;gangsta&rdquo; also spoke a non-rhotic dialect.</p>

<p>I think this phenomenon is especially interesting because everybody knows that
R is a consonant, but in practice non-rhotic speakers pronounce something like
half of all Rs as a vowel!</p>

<p>The phenomenon is also part of Danish. For example, in &ldquo;stor&rdquo; [stoa], meaning
&ldquo;big&rdquo;, or &ldquo;biler&rdquo; [bila], meaning &ldquo;cars&rdquo;. The length of this vowel even
distinguishes meanings: svar [svaa], svare [svaaa], svarer [svaaaa], svarere
[svaaaaa]. These four words mean &ldquo;(an) answer&rdquo;, &ldquo;(to) answer&rdquo;, &ldquo;(an) answerer&rdquo;,
and &ldquo;(some) answerers&rdquo;. Even natives have trouble distinguishing these&hellip;</p>

<a name="Lojban"></a>
<h2>Lojban</h2>

<p>I will round off with the constructed language <a href="http://www.lojban.org/tiki/Lojban">Lojban</a> because it has
an interesting approach to the letter R.</p>

<p>You may have heard of the constructed language Esperanto. Unlike Lojban, the
older, and relatively successful Esperanto is Eurocentric (and uses the Spanish
type R). Lojban is made to make sense in <a href="http://en.wikipedia.org/wiki/Worldlang">the whole world</a>. Its
vocabulary is based on the most spoken languages worldwide: Mandarin, English,
Hindi, Spanish, Russian, and Arabic. Its inventory of sounds is also sparse,
which means that (small) variations in pronunciation of letters between
cultures do not disturb the meaning. Especially for R, any of the rhotic
(R-like) consonant sounds are allowed, so you can just choose the one that is
already in your native language, or the one that is the easiest to learn!</p>

<p>Its grammar is also fascinating. For example, it can use any
subject-verb-object order: SVO, SOV, OVS, OSV, VSO, VOS. It also has a complete
<a href="http://en.wikipedia.org/wiki/Backus%E2%80%93Naur_Form">BNF</a>! (For those who know what that is.) But I will save that for some
other time!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Samba!]]></title>
    <link href="http://blog.erw.dk/2015/01/29/samba/"/>
    <updated>2015-01-29T10:42:32+01:00</updated>
    <id>http://blog.erw.dk/2015/01/29/samba</id>
    <content type="html"><![CDATA[<p>After spending the fall of 2014 doing research in the Netherlands, I have moved
home to Aalborg, Denmark and returned to the samba group <a href="https://www.facebook.com/SambaskolenPocoLoco">Poco Loco</a>.
The group has dancers and percussionists; I&rsquo;m one of the latter. Starting again
after my half-year break reminded me of how it was when I first started playing
samba. While you enjoy the video of the group here, I&rsquo;ll geek out on the
drumming below.</p>

<div class="video-container">
<iframe src="//www.youtube.com/embed/ogQt9G1zEN8?feature=player_detailpage" frameborder="0" allowfullscreen></iframe>
</div>




<!-- more -->


<p>In my gymnasium (high school) years, I played the drum kit, mostly rock music.
On the drum kit, you play with both hands and both feet simultaneously, so
coming from this background, I thought playing a single drum at a time should
be fairly easy. It turns out it&rsquo;s not!</p>

<p><span class='caption-wrapper right'><img class='caption' src='https://upload.wikimedia.org/wikipedia/commons/3/35/Tamborim.JPG' width='320' height='240' alt='[Tamborim](https://commons.wikimedia.org/wiki/File:Tamborim.JPG#mediaviewer/File:Tamborim.JPG) by [Alno](//commons.wikimedia.org/wiki/User:Alno) / [CC BY-SA 3.0](http://creativecommons.org/licenses/by-sa/3.0/)'><span class='caption-text'><a href="https://commons.wikimedia.org/wiki/File:Tamborim.JPG#mediaviewer/File:Tamborim.JPG">Tamborim</a> by <a href="//commons.wikimedia.org/wiki/User:Alno">Alno</a> / <a href="http://creativecommons.org/licenses/by-sa/3.0/">CC BY-SA 3.0</a></span></span></p>

<p>For example, there&rsquo;s the tiny <em>tamborim</em> which, despite its modest size (6&#8221;
&approx; 15 cm), contributes a lot to the character of the sound of a samba
<em>bateria</em>. Its basic pattern plays every 16th note, indefinitely, with one
hand. That requires good technique, first to be able to play at high speed at
all, then to keep going. (I hope I&rsquo;ll be able to do it some day!)</p>

<p>The <em>caixa</em> (<a href="https://en.wikipedia.org/wiki/Snare_drum">snare drum</a>) also plays every 16th note in the basic
pattern. Unlike with the tamborim, you can alternate the hands. But like the
tamborim, the rhythm is played with &ldquo;samba swing&rdquo; which gives an eager,
energetic feeling. It takes a lot of time readjust when your musical background
is rock-based. (You can hear the difference <a href="https://www.youtube.com/watch?v=FhiID-40EkY">in this video</a>, where
he switches between exaggerated, medium, and no swing.)</p>

<p>The <em>repinique</em> is a drum that can make different sounds depending on how it&rsquo;s
struck. Below is a video of a guy showing how it&rsquo;s played. The drum is used
by the leader to cue the breaks and perform calls that the rest of the bateria
answers. So it has a very important role. But playing it involves slapping your
hand into its metal rim 100-150 times per minute. And it sports tuning rods
that are always available for said hand to impale itself on. As one of my
bandmates said: You are not initiated until you have bled on your drum!</p>

<div class="video-container">
<iframe src="//www.youtube.com/embed/xwxyskWxoWU?feature=player_detailpage" frameborder="0" allowfullscreen></iframe>
</div>




<!--
I usually play the *surdo*

The rhythms must be played with "swing" to get the right, energetic feeling. 

surdos, chocalho
This is the reason I joined the group in the first place
-->


<p>Samba is hard, but it&rsquo;s great. Both when we practice and when we perform on the
street or on a stage. The driving, unending rhythm and the feeling of unity in
a group of people or a whole carnival are just awe-inspiring.</p>

<p>The atmosphere is also happy and relaxed. Mistakes are made, but you just play
on. It&rsquo;s more important to keep going than to play perfectly (there&rsquo;s an
important life lesson in that!)</p>

<p>I was also surprised when I returned from my half year break. I could no longer
consciously remember the many breaks and call/response sequences. But when the
leader played the calls, my hands automatically responded. It&rsquo;s like riding
a bike &ndash; you can do it, but you can&rsquo;t explain how.</p>

<p>Fun facts:</p>

<ul>
<li><p>Samba swing is in a way the opposite of jazz swing. Jazz swing/shuffle is
&ldquo;lazy&rdquo; and delays off-beat notes. Samba swing is &ldquo;eager&rdquo; and plays some of
the notes between the main beats too early.</p></li>
<li><p>You cannot keep time with your feet because you will be walking in a parade
at speeds that are likely independent of the music.</p></li>
<li><p>I still geek out and write down <a href="http://en.wikipedia.org/wiki/Drum_tablature">drum tabs</a> to learn and understand
new sequences, but after that the automated learning quickly takes over. Most
people in our group just learn by repetition, without writing it down.</p></li>
<li><p>Earlier in my life, the primary meaning of &ldquo;samba&rdquo; was a piece of
<a href="https://en.wikipedia.org/wiki/Samba_%28software%29">networking software</a>.</p></li>
<li><p>I have no idea why our group is called Poco Loco (a bit crazy) in Spanish,
when samba is Brazilian. I guess even the name is a bit crazy!</p></li>
</ul>


<p>If you live near Aalborg, and find this all interesting, we could sure use
a few more drummers (also dancers!). All you need is the interest (and at least
a hint of a sense of rhythm). See the <a href="https://www.facebook.com/SambaskolenPocoLoco">facebook page</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[User Experiences on a Train Trip]]></title>
    <link href="http://blog.erw.dk/2014/11/30/user-experiences-on-a-train-trip/"/>
    <updated>2014-11-30T09:36:40+01:00</updated>
    <id>http://blog.erw.dk/2014/11/30/user-experiences-on-a-train-trip</id>
    <content type="html"><![CDATA[<p>This week I travelled from Enschede in the Netherlands to Saarbrücken in
Germany for a research meeting. On the way I made some observations of
usability and user experience in the trains and on the train stations.
First we&rsquo;ll see some examples of bad design, then some good ones!</p>

<!-- more -->


<p><img class="right" src="http://blog.erw.dk/images/posts/hengelo_wachtruimte.jpg" title="TODO" alt="TODO"></p>

<p>First, a usability classic: Door handles. The waiting rooms at the Hengelo
train station had door handles with both horizontal and vertical bars on both
sides of the door. With this abundance of handles, I somehow assumed the door
would open both in and out. I was wrong, and there was no indication of which
way it really openend. Most people will probably just try something random and
be right about 50% of the time.</p>

<p>This might seem like complaining over an insignificant problem, but the point
is simply to demonstrate principles of building products that people like,
whether it&rsquo;s a door or an iPhone. One part of doing this is to make simple
operations (such as opening a door) self-explanatory by design, and not make
the user feel stupid &mdash; such as when you open a door the wrong way.</p>

<p>Next up was my ticket, which was a print-at-home e-ticket. My Dutch is not so
good, but the ticket had a nice illustrated instruction of how I was supposed
to scan the ticket at the station:</p>

<p><img class="center" src="http://blog.erw.dk/images/posts/ns_e-ticket.jpg" title="TODO" alt="TODO"></p>

<p>Only there was no scanner in sight on the station. I had plenty of time, so
I went to the ticket office to ask what to do. There I learned that this
station had no scanners, so I should just board the train without scanning. And
this is probably what many people would do. But I didn&rsquo;t want
a misunderstanding to cost me a fine on the train, so I asked. And I was not
the first one to worry about it because they had put a piece of paper on the
ticket stall window saying the same thing: At this station it is not necessary
to scan the e-tickets. I recommended them to put that sign on the platforms
where people actually look for the scanners and therefore need the information.</p>

<p>On the train they had a nice info screen. But here I got momentarily confused
as well. This was a bit of Dutch I could understand: &ldquo;Aankomsttijd eindpunt&rdquo;:
Arrival time at the final destination.</p>

<p><img class="center" src="http://blog.erw.dk/images/posts/syntus_train.jpg" title="TODO" alt="TODO"></p>

<p>The only problem was that this final arrival time, 7:17, was <em>now</em>. I had
entered a train that was already at its destination and not going further. And
thereby possibly missed the correct train. Panic! Well, I soon found my
misunderstanding: 7:17 was indeed the current time because it was a clock, and
the real final arrival time was 7:53.</p>

<p>Besides, why would there be more stops on the list if we were already at the
final station? But the point here is not that logical thinking can lead me to
the correct interpretation of the information (which is indeed what happened).
The point is that before I had read enough from the screen to draw the right
conclusion, I had already been startled.
The problem comes from our perception that things that are close together
belong together. After reading &ldquo;Aankomsttijd eindpunt&rdquo;, my eyes were simply
drawn to left because the clock was both closer and bigger than the correct
arrival time.</p>

<p><img class="right" src="http://blog.erw.dk/images/posts/ns_speaking_zone.jpg" title="TODO" alt="TODO"></p>

<p>Only 20 minutes passed and I already misunderstood three things. How stupid
I must be! Well, it&rsquo;s easy to blame yourself for these things, when in fact the
design is to blame. Think about that next time you feel stupid because of your
microwave oven.</p>

<p>After I switched trains, I found something nice. Instead of just marking the
silent zone of the train as such, the normal zone was also marked as a speaking
zone. It&rsquo;s nice to not only have negative signs with bans, but also positive
signs. Who knows, it might even inspire someone to talk to a stranger!</p>

<p>Next up was Arnhem train station. Newly renovated and a good example that
a pleasant environment can give you a better experience than a functionally
equivalent but ugly environment. Arnhem station was both spacious and elegant
(and functional):</p>

<p><img class="center" src="http://blog.erw.dk/images/posts/arnhem.jpg" title="TODO" alt="TODO"></p>

<p>Another aspect of train usability is door opening buttons.
On the return trip I found two types.
The left is from the inside of a Dutch train; the right is from the outside of
a German ICE train:</p>

<p><img class="center" src="http://blog.erw.dk/images/posts/train_door_buttons.jpg" title="TODO" alt="TODO"></p>

<p>Train doors cannot be opened by passengers while the train is in motion, so the
buttons are only active at stations. The left set of buttons leaves the user to
guess when they become enabled, while the right set lights up when active, thus
displaying their state to the user, including which button is relevant to press
(&lsquo;close&rsquo; when the door is open and vice versa).</p>

<p>Finally, tables. In <a href="http://blog.erw.dk/2014/11/21/the-design-of-everyday-things/">my previous post</a> I explain how the of table locks
in the Danish IC3 trains suck. The Dutch and German ones are better. Dutch on
the left, German ICE on the right:</p>

<p><img class="center" src="http://blog.erw.dk/images/posts/tray_tables.jpg" title="TODO" alt="TODO"></p>

<p>This time I&rsquo;ll give the first price to the Dutch train. The table has no lock;
friction holds the table in place. The edge can be grabbed by either hand, and
it is self-explanatory. It can also be folded back up with one hand. The ICE
train table is also easy to <em>understand</em> how to use, but physically sliding the
lock is slightly awkward. In addition it requires two hands to close; one
holding the table, and one operating the lock. (Alternatively, you can slam it
shut and make a loud noise!)</p>

<p>Thanks for reading.</p>

<p><em>The <span xmlns:dct="http://purl.org/dc/terms/" href="http://purl.org/dc/dcmitype/StillImage" rel="dct:type">images on this post</span> are by <span xmlns:cc="http://creativecommons.org/ns#" property="cc:attributionName">Erik Ramsgaard Wognsen</span> and you may reuse them under the <a rel="license" href="http://creativecommons.org/licenses/by/4.0/">Creative Commons Attribution 4.0 International License</a>. Contact me for higher resolutions.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Language of vi, Improved]]></title>
    <link href="http://blog.erw.dk/2014/11/25/the-language-of-vi-improved/"/>
    <updated>2014-11-25T02:50:20+01:00</updated>
    <id>http://blog.erw.dk/2014/11/25/the-language-of-vi-improved</id>
    <content type="html"><![CDATA[<p>In <a href="http://blog.erw.dk/2014/10/31/the-essence-of-vi/">a previous post</a> I described the &ldquo;language&rdquo; metaphor of the text
editor <a href="http://en.wikipedia.org/wiki/Vi">vi</a>. To recap,</p>

<ul>
<li>Verbs are commands such as change <code>c</code>, delete <code>d</code>, yank <code>y</code>, and put <code>p</code></li>
<li>Nouns (text objects): a paragraph <code>ap</code>, a string <code>a"</code>, etc.</li>
<li>Prepositional phrases (motions):
&ldquo;to the next word&rdquo; <code>w</code>,
&ldquo;to the next regex&rdquo; <code>/</code></li>
<li>Numerals (counts) as seen in
&ldquo;indent ten lines&rdquo; <code>10&gt;&gt;</code> and
&ldquo;to the 27th line&rdquo; <code>27gg</code>.</li>
</ul>


<p>This time around, we&rsquo;ll see how <a href="http://www.vim.org/about.php">Vim</a> (vi improved) adds a new word order
to make you speak more clearly, and <em>meta-verbs</em> to blow your mind!</p>

<!-- more -->


<a name="Speak.Before.You.Think"></a>
<h2>Speak Before You Think</h2>

<p>Near the end of my previous post we got to the numerals, or counts as they&rsquo;re
officially called. Counts are useful, especially when large numbers are
involved, but sometimes it pays off to use Vim without thinking too much ahead.
Just start speaking:</p>

<blockquote><p>Delete &hellip; a bit more &hellip; a bit more &hellip; bit more &hellip; ok, stop.</p></blockquote>

<p>While this is the way many people delete text on their computer, Vim makes it
a lot more efficient than the typical awkward bursts of holding down the delete
key until you delete enough (and probably too much). For example, <code>dw....</code>
deletes one word, then the next, and so on, five in total. (Remember,<code>dw</code>
deletes one word, and the dot <code>.</code> command repeats this action.) This can be
faster than the equivalent <code>d5w</code> because you don&rsquo;t need to count the words
before you start deleting . The running feedback you get by seeing the words
disappear one by one is very helpful and avoids the mistakes that could have
happened due to miscounting. It is especially useful for objects that vary
considerably in size (sentences, paragraphs), because they are harder to count
quickly.</p>

<p>But this approach doesn&rsquo;t work for common operations such as change <code>c</code> or yank
<code>y</code>. When you yank (copy), you most likely want all the text in the clipboard
at the same time; not one word replacing the next until you are left with only
the last word in the clipboard. Probably for the same reason, the repeat <code>.</code>
command doesn&rsquo;t consider yanking a repeatable action. (By the way, I say &lsquo;the
clipboard&rsquo; because it is a familiar term to many, but in Vim, they&rsquo;re called
registers, and there&rsquo;s a whole lot more than one of them!) Instead of repeat,
we can use <em>visual mode</em>, which gives both pleasant feedback and works with all
actions.</p>

<a name="L....or.Speak.Like.Yoda"></a>
<h2>&hellip; or Speak Like Yoda</h2>

<p><span class='caption-wrapper right'><img class='caption' src='http://upload.wikimedia.org/wikipedia/commons/4/49/Teletype-Fernschreiber_T100_Siemens.jpg' width='382' height='346' alt='[Fernschreiber Modell T100] [fernschreiber_link] by [Nightflyer] [fernschreiber_author] / [CC BY-SA 3.0] [fernschreiber_cc]'><span class='caption-text'><a href="http://commons.wikimedia.org/wiki/File:Teletype-Fernschreiber_T100_Siemens.jpg#mediaviewer/File:Teletype-Fernschreiber_T100_Siemens.jpg">Fernschreiber Modell T100</a> by <a href="http://de.wikipedia.org/wiki/User:Nightflyer">Nightflyer</a> / <a href="http://creativecommons.org/licenses/by-sa/3.0/">CC BY-SA 3.0</a></span></span></p>

<p>To explain visual mode, we will first pay the 1970s
a brief visit.  In vi, &ldquo;visual mode&rdquo; was a mode that was &ldquo;more visual&rdquo; than the
<a href="http://en.wikipedia.org/wiki/Teleprinter">Teletype</a> oriented editors vi
superseded and subsumed
(<a href="http://en.wikipedia.org/wiki/Ed_%28text_editor%29">ed</a> and
<a href="http://en.wikipedia.org/wiki/Ex_%28text_editor%29">ex</a>, respectively).  It
meant simply that you could see the file <em>while you edited it</em>.  However, this
form of visual feedback was soon considered normal.  Case in point, vi&rsquo;s visual
mode is Vim&rsquo;s normal mode.</p>

<p>The way to be more visual than Vim&rsquo;s normal mode is to highlight the text that
will be changed before the change is executed. This is similar to selecting
text in mainstream editors with the mouse or by using the arrow keys with the
shift key held down. In these, typing while text is selected replaces the
selected text with the typed text. Vim&rsquo;s visual mode however retains the
keyboard&rsquo;s &ldquo;gamepad role&rdquo; (see <a href="http://blog.erw.dk/2014/10/31/the-essence-of-vi/">my previous post</a>). (Vim also has
a &ldquo;mainstream&rdquo; <em>select mode</em> but it is mainly used to imitate
<strike>lesser</strike> other editors.)</p>

<p>You enter visual mode using <code>v</code>, then use text objects and motions to highlight
the text you want to affect. This reverses the word order in the vi language,
effectively making you command Vim like Yoda:  &ldquo;These lines delete (you must!)&rdquo;
Compare:</p>

<ul>
<li><code>das</code>: &ldquo;Delete a sentence.&rdquo;</li>
<li><code>vasd</code>: &ldquo;A sentence delete.&rdquo;</li>
<li><code>dasdw</code>: &ldquo;Delete a sentence. Delete the next word.&rdquo;</li>
<li><code>vased</code>: &ldquo;A sentence and the next word delete.&rdquo;</li>
</ul>


<p>So, visual mode is nice because it gives visual feedback on the area you are
going to operate on before you commit to it and type the operator. But it
doesn&rsquo;t stop there.</p>

<a name="Visual.Basics"></a>
<h2>Visual Basics</h2>

<p>What would you do if you had a lot of gamepad real estate to go along with
visual mode?</p>

<p>First of all, visual mode actually comes in three flavors: Character <code>v</code>, line
<code>V</code>, and block <code>&lt;c-v&gt;</code>. Here I switch around between them a bit:</p>

<p><video controls>
<source src='http://blog.erw.dk/videos/posts/vimvisual.webm' type='video/webm; codecs=vp8' />
</video></p>

<p>(The numbers in the margin show the line number for the line the
cursor is on, and the distance to the other lines. This <a href="http://vimdoc.sourceforge.net/htmldoc/options.html#%27relativenumber%27">feature</a> makes is easy to use counts with line-based operators.)</p>

<p>Visual character mode is the one you will find most familiar: The selection
starts somewhere, continues along the direction of the text, wraps at the ends
of lines, and ends somewhere. In visual <em>line</em> mode, every whole line from the
one the selection starts in to the one it ends in, is selected. This makes it
easy to select whole lines without moving the cursor to the start and end of
a line. Especially useful in programming, where line is often synonymous with
<em>statement</em>. Finally, visual block mode selects a rectangle of text. Applying
operators to blocks is very powerful and enables things that would take a long
time without block mode.</p>

<p><video class='right' controls>
<source src='http://blog.erw.dk/videos/posts/vimblock.webm' type='video/webm; codecs=vp8' />
</video></p>

<p>Block mode can also be used to insert text at several lines simultaneously.
From block mode, insert <code>I</code> and append <code>A</code> start insert mode, and when the
insertion is done, that text is then inserted in every line along the left or
right edge of the block, respectively.
Also, the <code>$</code> motion can be used to extend the selection to the ends of
lines. If the lines have different lengths, the result is a jagged block.
Appending <code>A</code> to this inserts text at the end of each line, wherever the end of
that line is. In the video I demonstrate both <code>I</code> and <code>A</code>. Here&rsquo;s a breakdown:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;c-v&gt;</span>jj$Ifoo(<span class="nt">&lt;esc&gt;</span>gvA)<span class="nt">&lt;esc&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;c-v&gt;</span>                         Ctrl-v to start visual block mode
</span><span class='line'>     jj$                      Move cursor two down and to the end of line
</span><span class='line'>        I                     Start block insert mode
</span><span class='line'>         foo(                 Write &quot;foo(&quot;
</span><span class='line'>             <span class="nt">&lt;esc&gt;</span>            Escape to normal mode (completes the other lines)
</span><span class='line'>                  gv          Start visual mode with previous selection
</span><span class='line'>                    A         Start appending in block insert mode
</span><span class='line'>                     )<span class="nt">&lt;esc&gt;</span>   Write &quot;)&quot; and escape to normal mode
</span></code></pre></td></tr></table></div></figure>


<p>All this might look scary, but that&rsquo;s of course part of what makes it so cool!</p>

<p>In the end of the video I do the same thing in one step using Tim Pope&rsquo;s
<a href="https://github.com/tpope/vim-surround">surround.vim</a> plugin. With the same selection active, I use
<code>Sf</code> to &ldquo;surround with function-call&rdquo;, type &ldquo;foo&rdquo; and enter.</p>

<a name="Neat.Tricks"></a>
<h3>Neat Tricks</h3>

<p>Have you tried selecting text in a mainstream editor and finding out you
started the selection in the wrong place? So you do the selection again, and do
it right this time. Well, Vim is all about efficiency: In visual mode, <code>o</code>
moves the cursor to the other end of the selection, so you can adjust it
without starting over. As amazing as it is simple! A soft, smiling kitten is
born every time you use this feature.</p>

<p>Also, with visual mode, you can crawl up the DOM tree: <code>at</code> extends the
selection to the enclosing tag-block (Vim-speak for an HTML/XML element).
Applied repeatedly, a bigger and bigger block of markup is selected,
corresponding to nodes further up the DOM tree.</p>

<p>Both visual mode and repeat <code>.</code> can be used in the &ldquo;speak before you think&rdquo;
manner, but visual mode works with all operators. It also has another advantage
over repeat: The operation is &ldquo;committed&rdquo; in one step, so it can be <em>undone</em> in
one step. This brings us to &hellip;</p>

<a name="Meta-Verbs"></a>
<h2>Meta-Verbs</h2>

<p><em>Undo</em> is a verb. It&rsquo;s a verb for a command that reverts the latest change, no
surprises there. But what happens when you undo two times in a row?</p>

<p>In vi, undo is a change like any other. Thus, if the latest change is an undo,
undo will revert that undo action. In other words, typing <code>uu</code> is a no-op! Vim,
being &ldquo;vi improved&rdquo;, can <a href="http://vimdoc.sourceforge.net/htmldoc/undo.html#undo-two-ways">emulate vi</a> or use its own improved undo,
which could be called a <em>meta-verb</em>: Verbs change text, but meta-verbs change
changes. So undo <code>u</code> and redo <code>&lt;c-r&gt;</code> go back and forth in the change history,
as is common in most modern programs.  But there&rsquo;s more:</p>

<p>Let&rsquo;s say you are writing a blog post.  Well into the process you remember an
earlier phrasing that you changed, but now you want it back.  You take numerous
steps back in history (perhaps employing a count: <code>25u</code>) until you find it. You
copy it, and you&rsquo;re ready to continue.  But before you remember that you should
redo to return to the newest version of the document, you make a new change.
If you used a simpler editor that version would now be lost forever.</p>

<p>Vim knows that undo/redo is not a linear history, it is a tree. Normal,
sequential changes extend a single branch of the tree. But when you go back and
make a new change as in the example above, that change sprouts another
branch. Vim <a href="http://vimdoc.sourceforge.net/htmldoc/usr_32.html">stores this tree</a> and let&rsquo;s you recover your work.</p>

<p><video class='right' controls>
<source src='http://blog.erw.dk/videos/posts/vimundotree.webm' type='video/webm; codecs=vp8' />
</video></p>

<p>In this video, I demonstrate the undo tree with all changes being adding small
bits of text, and the layout of the text representing the branches of the tree.
Undo <code>u</code> and redo <code>&lt;c-r&gt;</code> always go up and down the current branch (in this
video literally up and down). The commands <code>g-</code> and <code>g+</code> go through older and
newer <em>changes</em> to the text, which can be spread around the tree. I go
backwards with <code>g-</code> (watch for the &lsquo;g&rsquo; in the lower right corner) through the
events of entering &ldquo;six&rdquo; and &ldquo;five&rdquo; to the state after entering &ldquo;four&rdquo;, which
is in the original branch, before undoing &ldquo;three&rdquo; and &ldquo;four&rdquo;. Using <code>g+</code> brings
me forward again to the changes in the new branch.</p>

<p>Because all changes are ordered chronologically (no matter the undos and redos
done between them and the sprouting of new branches), they can be accessed
in a linear history with <code>g-</code> and <code>g+</code>. You can even travel in time explicitly:
<code>:earlier 3m</code> (minutes), <code>:later 2h</code> (hours). But in practice all you might
need is a few <code>g-</code>es once in a blue moon.</p>

<p>On top of that we have <a href="http://vimdoc.sourceforge.net/htmldoc/undo.html#undo-persistence">persistent undo</a> between sessions, which
I think makes Vim&rsquo;s undo the most powerful undo functionality I have seen in
a program. If you know of any contenders, please leave a comment!</p>

<p>Vim itself never actually shows you the tree directly, but <a href="http://stevelosh.com/">Steve Losh</a>&rsquo;s
graphical undo a.k.a. <a href="http://sjl.bitbucket.org/gundo.vim/">Gundo</a> plugin looks nice for that purpose
(<a href="http://www.screenr.com/M9l">screencast here</a>).</p>

<p>Now you have seen two powerful features that are in Vim but not vi: visual mode
and the undo system. Here&rsquo;s one more before we end:</p>

<a name="Record.and.Replay.Changes"></a>
<h3>Record and Replay Changes</h3>

<p>Another meta-verb is <em>record</em> <code>q</code> &mdash; it doesn&rsquo;t change the text by itself, but
it records the use of other verbs. The recording can then be played back by
(regular verb) <em>execute</em> <code>@</code> to use the same changes in a new context.</p>

<p>The xkcd forums user EvanED once <a href="http://forums.xkcd.com/viewtopic.php?f=40&amp;t=15855#p577619">demonstrated</a> how he used emacs to
efficiently</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="c1">// turn this ...</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">stateDoOperation1</span><span class="p">(</span><span class="n">state</span><span class="o">*</span> <span class="n">state</span><span class="p">,</span> <span class="kt">int</span> <span class="n">param1</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">stateDoOperation2</span><span class="p">(</span><span class="n">state</span><span class="o">*</span> <span class="n">state</span><span class="p">,</span> <span class="kt">int</span> <span class="n">param1</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">stateDoOperation3</span><span class="p">(</span><span class="n">state</span><span class="o">*</span> <span class="n">state</span><span class="p">,</span> <span class="kt">int</span> <span class="n">param1</span><span class="p">,</span> <span class="kt">double</span> <span class="n">param2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ... into this:</span>
</span><span class='line'><span class="n">doOperation1</span><span class="p">(</span><span class="kt">int</span> <span class="n">param1</span><span class="p">);</span>
</span><span class='line'><span class="n">doOperation2</span><span class="p">(</span><span class="kt">int</span> <span class="n">param1</span><span class="p">);</span>
</span><span class='line'><span class="n">doOperation3</span><span class="p">(</span><span class="kt">int</span> <span class="n">param1</span><span class="p">,</span> <span class="kt">double</span> <span class="n">param2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>I <a href="http://en.wikipedia.org/wiki/Editor_war">defended the honor</a> of Vim with this salvo:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>qqdfe~fsdf,x<span class="nt">&lt;enter&gt;</span>q2@q
</span><span class='line'>
</span><span class='line'>qq                        start recording to register &#39;q&#39;
</span><span class='line'>  dfe                     delete to next &#39;e&#39; (the end of &quot;state&quot;)
</span><span class='line'>     ~                    invert case of letter under cursor (the &#39;D&#39; in &quot;Do&quot;)
</span><span class='line'>      fs                  move cursor to next &#39;s&#39; (the beginning of &quot;state&quot;)
</span><span class='line'>        df,               delete to next &#39;,&#39;
</span><span class='line'>           x              delete (the space after the &#39;,&#39;)
</span><span class='line'>            <span class="nt">&lt;enter&gt;</span>       move to beginning of next line
</span><span class='line'>                   q      stop recording
</span><span class='line'>                    2@q   replay &#39;q&#39; two times
</span></code></pre></td></tr></table></div></figure>


<p>Here I will do the same using visual mode so you can better see what&rsquo;s going
on:</p>

<p><video controls>
<source src='http://blog.erw.dk/videos/posts/vimmacro.webm' type='video/webm; codecs=vp8' />
</video></p>

<p>He and I parted ways amicably! As he said</p>

<blockquote><p>vi does seem faster in the hands of someone who&rsquo;s skilled. But it also seems
that emacs is faster in the hands of someone who isn&rsquo;t particularly skilled</p></blockquote>

<p>And that&rsquo;s probably true!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Design of Everyday Things]]></title>
    <link href="http://blog.erw.dk/2014/11/21/the-design-of-everyday-things/"/>
    <updated>2014-11-21T04:15:21+01:00</updated>
    <id>http://blog.erw.dk/2014/11/21/the-design-of-everyday-things</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://blog.erw.dk/images/posts/IC3_tray_table.jpg" width="300" title="A tray table in a Danish IC3 train" alt="A tray table in a Danish IC3 train"></p>

<p>The woman in the seat next to me on the train had trouble folding down her tray table.
I showed her how to do it, and she said &ldquo;Oh, I&rsquo;ve never been good at that sort of thing.&rdquo;
I said &ldquo;It&rsquo;s not you, it&rsquo;s just bad design.&rdquo;
She didn&rsquo;t follow.
&ldquo;See, it <em>looks like</em> you&rsquo;re supposed to turn the knob, but in fact you have to slide it. You just tried to turn it like the design told you to do, but the design was wrong.&rdquo;</p>

<p>She never seemed to accept my interpretation of the situation.
But the fact is that design subconsciously guides us and affects our behavior, for better and for worse.
I hope to do a better job here of convincing you than I did with the woman in the train!</p>

<!-- more -->


<p>The concept of <em>affordance</em> is about what things <em>are for</em>.
For example, a hammer <em>affords</em> hitting.
James J. Gibson introduced the concept as the <em>possibilities for action</em> that are possible between an object and a user.
<a href="http://en.wikipedia.org/wiki/Don_Norman">Don Norman</a> later popularized the idea with a focus on what actions seem obvious (hitting with a hammer), rather that which ones are theoretically possible (say, stirring a pot with it).
He did this in his famous &mdash; and recommendable &mdash; 1988 book <a href="http://en.wikipedia.org/wiki/The_Design_of_Everyday_Things">The Design of Everyday Things</a>, from which I lifted the title as well as this quote:</p>

<blockquote><p>Affordances provide strong clues to the operations of things. Plates are for
pushing. Knobs are for turning. Slots are for inserting things into. Balls
are for throwing or bouncing. When affordances are taken advantage of, the
user knows what to do just by looking: no picture, label, or instruction
is required.</p></blockquote>

<p>When affordances and operations match, then the things we interact with work intuitively:
We flip the switch, and the light comes on.
When things <em>just work</em>, we might not even notice that affordance and operation are two separate things.
How could it be otherwise?
Well, for example, sometimes we pull a door handle, but the door doesn&rsquo;t open.
The handle affords pulling, but the door opens the other way.
It&rsquo;s when affordances and operations don&rsquo;t match that we get confused.</p>

<p><img class="right" src="http://blog.erw.dk/images/posts/tray_table_locks.png" title="Drawing of the IC3 tray lock design and a better alternative" alt="Drawing of the IC3 tray lock design and a better alternative"></p>

<p>The tray table lock in the train had a mismatch between affordance and operation.
The round hole surrounding the small plastic handle made the whole thing look like things we normally <em>turn</em>, like the knob on a stove, or a volume knob.
But it was actually meant to slide up to release the lock and let the table unfold.
Since the small handle is not as wide as the inner diameter of the circle, it is also possible to push the handle up/down.
Most users figure this out after a while.
But a rectangular shape would likely have given this association from the beginning, without the detour of trying to turn it.</p>

<p>As an example of well-matched affordance, here&rsquo;s a nice feature on my Braun shaver:
Grooves in the plastic make it look compressible, like an accordion.
The plastic isn&rsquo;t in fact compressible, but the supporting springs underneath are.
But independently of the mechanical implementation, the design speaks it&rsquo;s clear language: I&rsquo;m flexible.</p>

<p><img src="http://blog.erw.dk/images/posts/shaver.jpg" title="My groovy Braun shaver" alt="My groovy Braun shaver"></p>

<p>James J. Gibson has some <a href="http://www.trincoll.edu/depts/ecopsyc/perils/folder5/prelim.html">more examples of affordances</a>.</p>

<a name="Why.Usability.Matters"></a>
<h2>Why Usability Matters</h2>

<p>Affordance is related to <a href="http://www.nngroup.com/articles/usability-101-introduction-to-usability/">usability</a>, or, how easy and efficient things are to use.
Good use of affordance makes it easy to learn how to use something and less likely to make mistakes.
Mismatched or hidden affordances do the opposite.
We always make mistakes, but if the design is bad, we make lots more.</p>

<p>Tray tables and shavers are pretty harmless, but human perception works the same way in serious situations.
Another example of mismatched affordances comes from the 2000 United States presidential election.
The unlucky design of a ballot meant that <a href="http://en.wikipedia.org/wiki/United_States_presidential_election_in_Florida,_2000#Palm_Beach_County.27s_butterfly_ballots">Al Gore lost some votes</a> he could really have used.
Danish ballots also used to have an affordance problem, although it did not favor one candidate over another.
The problem was lack of affordance:
Ticking a box is just not very satisfying <a href="http://commons.wikimedia.org/wiki/File:Stemmesedler_2005.JPG#mediaviewer/File:Stemmesedler_2005.JPG">when there&rsquo;s no box</a>.
In addition, inattentive voters might have marked their vote with a ring around a name, thus invalidating their vote because only a cross is allowed.</p>

<p><span class='caption-wrapper left'><img class='caption' src='http://blog.erw.dk/images/posts/cockpit.jpg' width='320' height='240' alt='[Picture](http://pixabay.com/en/cockpit-kontrolpanel-466157/) by [gepardowa](http://pixabay.com/en/users/gepardowa-320124/) is licenced under [CC0](http://creativecommons.org/publicdomain/zero/1.0/)'><span class='caption-text'><a href="http://pixabay.com/en/cockpit-kontrolpanel-466157/">Picture</a> by <a href="http://pixabay.com/en/users/gepardowa-320124/">gepardowa</a> is licenced under <a href="http://creativecommons.org/publicdomain/zero/1.0/">CC0</a></span></span></p>

<p>You may wonder if this isn&rsquo;t just a question of paying attention.
Or put more bluntly: A question of not being <a href="http://www.nngroup.com/articles/are-users-stupid/">stupid</a>.
To some extent, yes.
While doing something important, such as voting or controlling a nuclear power plant, it would indeed be sensible to double-check and confirm you did the right thing.
But that doesn&rsquo;t legitimize making a confusing design in the first place.
A confusing design can be a waste of time in daily life.
This is in itself annoying, but sometimes time is more critical.
For example, while controlling an airplane or that nuclear power plant, there can be stressful situations with short time to do the right thing, and no time for double-checking.
Even though pilots and operators are trained, it doesn&rsquo;t mean that they are infallible.
Humans will always make mistakes, so the tools we use should not increase the risk of errors.</p>

<p>When human life is not at stake, money is.
Usability is also part of designing an attractive product that users want to buy.
I say &ldquo;part of&rdquo; because, as Don Norman details in his later book <a href="http://en.wikipedia.org/wiki/Emotional_Design">Emotional Design</a>, usability relates to our brains&#8217; behavioral thinking, but there are two more &ldquo;brain levels&rdquo; to satisfy to make a truly successful product.
Once the product itself is good enough, its website must also have good usability and be a good overall user experience.
Jakob Nielsen, a colleague of Don Norman, is known to say that &ldquo;a bad website is like a grumpy salesperson&rdquo;.
Web usability and user experience design are fields of their own, but they are based on human cognition, just like <em>the design of everyday things</em>.</p>

<p>Once you are aware of the concept of affordance, you might start looking for it in your surroundings.
I suspect Danish people reading this might remember a more obvious usability problem in the Danish IC3 trains, besides the tray table:
The doors between compartments are sliding doors, with no handles or buttons.
This is not uncommon; automatic sliding doors typically open when we approach them.
But these don&rsquo;t do that either.
So, what do you do with products that are not self-explanatory?
Of course you <strike>fix them</strike> provide instructions!</p>

<a name="Don.t.Make.Me.Think"></a>
<h2>Don&rsquo;t Make Me Think</h2>

<p>(I noticed that Don&rsquo;t Make Me Think is also <a href="http://www.sensible.com/dmmt.html">a book about web usability</a>. I have not read it, but I fully agree with the message of its title! And it doesn&rsquo;t apply only to web usability.)</p>

<p><span class='caption-wrapper left'><img class='caption' src='http://blog.erw.dk/images/posts/pushpull.jpg' width='450' height='338' alt='[Push Pull](https://www.flickr.com/photos/russmorris/481397004/) by [Russ Morris](https://www.flickr.com/photos/russmorris/) is licensed under [CC BY-NC-ND 2.0](https://creativecommons.org/licenses/by-nc-nd/2.0/)'><span class='caption-text'><a href="https://www.flickr.com/photos/russmorris/481397004/">Push Pull</a> by <a href="https://www.flickr.com/photos/russmorris/">Russ Morris</a> is licensed under <a href="https://creativecommons.org/licenses/by-nc-nd/2.0/">CC BY-NC-ND 2.0</a></span></span></p>

<p>A classic example of usage instructions is push/pull signs on doors.
Using affordance properly, it is wholly possible to design a door where the shape and position of the handles and the design of the frame subconsciously guide us to push when and where we should push, and pull when and where we should pull.
One way is to use a handle that is easy to pull on one side, and on the other side a handle that is easier to push &mdash; possibly a plate or bar that can only be pushed.
But while it is possible, that doesn&rsquo;t mean it is always done in practice.
Maybe nobody knew.
Or maybe it was just cheaper to put the same handle on both sides.
But probably the first.
So when it is discovered that the door works poorly and people want to improve it, they add the instructions.
However, Norman writes:</p>

<blockquote><p>Complex things may require explanation, but simple things should not. When
simple things need pictures, labels, or instructions, the design has failed.</p></blockquote>

<p>But why are instructions so bad?
Or at least potentially unnecessary instructions such as push/pull signs?
One problem is that when a task requires us to read and think more than what is necessary, it distracts us from thinking about more important or urgent matters.
This is especially important in those stressed situations, I have already mentioned.
But reading is also harder than picking up clues from physical shapes.
Our brains have evolved and adapted to a tangible environment, and reading is relatively new, and not as &ldquo;efficiently implemented&rdquo;.</p>

<p>But it turns out all instructions are not equally bad.
Here&rsquo;s a door I came across in the Gromada Airport Hotel in Warsaw:</p>

<p><img src="http://blog.erw.dk/images/posts/gromada.jpg" title="Hotel Gromada push&#47;pull doors signs" alt="Hotel Gromada push&#47;pull doors signs"></p>

<p>I think the 3D effect of the arrows can actually help speak directly to our spatial intelligence, bypassing the need for reading and language processing.
(Of course it helps that I don&rsquo;t read Polish!)
I think if the text was removed, the arrows might work as well as well placed door handles, if not as elegantly.
But I&rsquo;m probably too conscious about these subconscious things to be a good judge.
It would be up to user testing to tell.</p>

<p>While instructions are typically employed to meet the lack of affordance, they can also be used when there&rsquo;s <em>unwanted</em> affordance:</p>

<p><img src="http://blog.erw.dk/images/posts/dont_push.jpg" title="A don&#39;t push sign on a revolving door" alt="A don&#39;t push sign on a revolving door"></p>

<p>(This particular revolving door at the NH Utrecht hotel was however spinning so fast I had a hard time seeing why anyone would feel the need to push it.
I think it shows in my blurry picture.)</p>

<p>Of course, most rule signs follow from some action being afforded by the environment, but deemed unwanted.
Some rules are perhaps better enforced by removing the affordance.
For example, a <a href="http://www.citylab.com/design/2014/10/why-12-foot-traffic-lanes-are-disastrous-for-safety-and-must-be-replaced-now/381117/">narrow</a> or curvy road does not afford driving at high speed.
(Neither do roads with speed bumps, because the bumps afford unpleasant bouncing and perhaps damaging the car.)</p>

<p><img class="right" src="http://blog.erw.dk/images/posts/microfridge.jpg" width="350" title="A usable microwave oven" alt="A usable microwave oven"></p>

<p>We already established that it&rsquo;s better to guide the user with affordance than with instructions, but some things may be too complex to rely solely on affordance.
In those cases we might be asked to read instruction manuals instead of a single pictogram or sentence.
However, that doesn&rsquo;t remove the problems with instruction: They stand between us and what we want to do.</p>

<p>So the less the text, the better.
Case in point, here is a microwave oven that I think most people could use without a manual.
(It&rsquo;s just a pity that the brand name MicroFridge could suggest the device is a fridge!
Alas, it probably doesn&rsquo;t matter anyway, because&hellip;)</p>

<p>The biggest problem with instructions is that, most of the time, <em>people don&rsquo;t read instructions</em>!</p>

<p>This is why affordance was important in the first place, along with many other concepts related to usability such as <a href="http://www.nngroup.com/articles/mental-models/">mental models</a> and feedback to the user about the state of the system.</p>

<p><img class="left" src="http://blog.erw.dk/images/posts/hisf.jpg" title="An empathetic elevator sign" alt="An empathetic elevator sign"></p>

<p>Finally, an example that you can even have bad usability and still make your users (at least the ones who read!) walk away with a smile.
I found it next to the elevator in the HI-San Francisco Downtown hostel.
(The quality of the signage in that place <em>almost</em> made up for the quality of the breakfast!)</p>

<p>In conclusion, products that are compatible with our brains&#8217; autopilots work really well.
Part of achieving that is matching affordance to the functionality of the product.
This attention to detail is the difference between something that simply functions and something that really <em>works</em>.</p>

<p>I have presupposed that the products do function correctly.
This is of course far from always the case, especially in complex systems.
In fact, the field I do my PhD in, <a href="http://en.wikipedia.org/wiki/Formal_methods">formal methods</a>, is exactly about proving that complex computer controlled systems function as they are supposed to.
This in itself can require an enormous effort, but as we have seen in this post, correct functioning should be matched by good usability.</p>

<p><em>Except where it says otherwise, the
<span xmlns:dct="http://purl.org/dc/terms/" href="http://purl.org/dc/dcmitype/StillImage" rel="dct:type">images on this post</span> are by me, <span xmlns:cc="http://creativecommons.org/ns#" property="cc:attributionName">Erik Ramsgaard Wognsen</span>, and you may reuse them under the <a rel="license" href="http://creativecommons.org/licenses/by/4.0/">Creative Commons Attribution 4.0 International License</a>.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Essence of vi]]></title>
    <link href="http://blog.erw.dk/2014/10/31/the-essence-of-vi/"/>
    <updated>2014-10-31T09:49:46+01:00</updated>
    <id>http://blog.erw.dk/2014/10/31/the-essence-of-vi</id>
    <content type="html"><![CDATA[<p><a href="http://www.vim.org/about.php">Vim</a> is a popular and widely distributed text editor improving on the
legendary <a href="http://en.wikipedia.org/wiki/Vi">vi</a> from the late 1970s.  If you are reading this on Mac or
Linux, chances are that Vim is already installed on your computer, included
with your OS.  If you tried Vim and found it too strange to use, or if you use
it but still harbor the idea that it was made by (or for!) aliens, you&rsquo;ve come
to the right place!</p>

<p>Vim is a very powerful tool, but often misunderstood.  There are plenty of
tutorials that go through the basics, but they usually fail to paint the big
picture.  <em>Why</em> the weird keyboard shortcuts, and the modes?  Why is it
worthwhile to learn?  In this post I will try to answer these questions.  And
I am pleased to say that the answer doesn&rsquo;t start with <em>h</em>, <em>j</em>, <em>k</em>, <em>l</em>, or
<em>i</em>.</p>

<p>Instead of the traditional bottom-up tutorial, this will be a top-down
introduction, that uncovers to the <em>essence of vi</em> and the almost poetic
language you use to speak to Vim and vi.  It is my hope that reading it will
make your time with Vim both more useful and more enjoyable.  I have myself
enjoyed Vim since 2007, and I also <a href="https://code.google.com/p/vim/source/browse/runtime/syntax/asm.vim">contribute a tiny bit</a> to it.</p>

<!-- more -->




<div id="toc">
<ul>
 <li>
 <ul>
  <li><a href="#Don.t.Worry.About.Modes">Don&#8217;t Worry About Modes</a></li>
  <li><a href="#Play.with.the.Gamepad">Play with the Gamepad</a></li>
  <li><a href="#The.Language.of.vi">The Language of vi</a>
  <ul>
   <li><a href="#Verbs">Verbs</a></li>
   <li><a href="#Nouns.Objects">Nouns/Objects</a></li>
   <li><a href="#Prepositional.Phrases.Motions">Prepositional Phrases/Motions</a></li>
   <li><a href="#Numerals">Numerals</a></li>
  </ul>
  </li>
  <li><a href="#Expand.your.Vocabulary">Expand your Vocabulary</a></li>
  <li><a href="#Real.Keyboard.Shortcuts">Real Keyboard Shortcuts</a></li>
  <li><a href="#What.about.Usability.">What about Usability?</a></li>
  <li><a href="#Conclusion">Conclusion</a></li>
 </ul>
 </li>
</ul>


</div>


<a name="Don.t.Worry.About.Modes"></a>
<h2>Don&rsquo;t Worry About Modes</h2>

<p>In Adobe Photoshop, pressing <code>L</code> selects the lasso tool, and <code>M</code> the marquee
tool.  Photoshop has many tools and functions, and there are many letters on
the keyboard &mdash; good.  But for most writing applications and text editors, the
letter keys are used for typing.  In these programs (and Photoshop), keyboard
shortcuts use modifiers, for example <code>ctrl-s</code> to save changes.  This means that
prime keyboard real estate is not used to its fullest.  50+ easy-to-press
shortcuts &mdash; upper and lower case letters &mdash; are only used for a single
purpose.</p>

<p>A different approach to text editing is <em>modal editing</em>.  Here the &ldquo;typing
mode&rdquo; is just one of several modes of using the editor (and thus the keyboard).
It is distinct from the mode(s) wherein you move the cursor, copy, paste, etc.
Notably, it often makes sense that the typing mode, or insert mode as it is
commonly called, is <em>not the default mode</em>.  The reason is that it is far more
common to edit, write, and program incrementally, than it is to write a piece
from start to finish.  You navigate around the text to read, think, make small
adjustments, and enter a few words, sentences, or statements at a time.</p>

<p>Vim has many modes, with <em>normal</em> (&ldquo;command&rdquo;) mode and <em>insert</em> mode being the
two main modes.  Now, I could enumerate all the modes, their roles, and how to
switch between them, but I&rsquo;m not going to.  Because when you use Vim naturally,
you don&rsquo;t think about modes, you think about <em>actions</em>.  And the actions lead
you naturally to the mode changes.  Think about finding content on a web page
in your browser: You press <code>ctrl-f</code> which opens a text field.  Here you write
you search string, press <code>&lt;enter&gt;</code> a few times, then <code>&lt;esc&gt;</code> when you&rsquo;re done.
You just used FIND MODE!  (It was super effective!)</p>

<p>Modal editing simply gives you more buttons for actions.  As
<a href="http://www.viemu.com/a-why-vi-vim.html">Jon Beltran de Heredia wrote</a>:</p>

<blockquote><p>with vi, your keyboard becomes a huge specialized text-editing gamepad with
almost a hundred buttons.</p></blockquote>

<a name="Play.with.the.Gamepad"></a>
<h2>Play with the Gamepad</h2>

<p>It can be hard to separate what you usually do with a text editor from what you
want to do with <em>the text</em>.  Learning Vim, you might ask &ldquo;How do I select all
text?&rdquo; After all, in most editors, this is a simple <code>&lt;c-a&gt;</code> (this is another
way of writing <code>ctrl-a</code>).  I could tell you how to do it in Vim (one way is
<code>ggVG</code>), but it is not in the spirit of vi.  In fact, it&rsquo;s not even possible in
vi.  And <em>to master Vim, you must understand vi</em>.  (In a later post I will
cover some &ldquo;philosophical&rdquo; differences between Vim and vi. <em>Update 2014-11-25:
<a href="http://blog.erw.dk/2014/11/25/the-language-of-vi-improved/">Here it is!</a></em>) Instead, realize that
selecting text is a means, but to what end?  <em>Why</em> you want to select all?</p>

<p>Do you want to copy everything?  Then copy, don&rsquo;t select.  It&rsquo;s &ldquo;<code>ggyG</code>&rdquo;. Type
it one letter at a time, and pay attention to case.  What does it mean?  The
<code>gg</code> part moves the cursor to the first line, <code>y</code> then <em>yanks</em> (copies) every
line until (and including) <code>G</code>, the last line.  vi is older than the
standardized cut, copy, and paste, hence the name &ldquo;yank&rdquo;.</p>

<p>Now, if you would think <code>ggyG</code> is no faster than <code>&lt;c-a&gt;&lt;c-c&gt;</code> (select all,
copy) in a regular editor, you&rsquo;d be right.  But say you wanted to copy just
a paragraph?  Type <code>yap</code> to &ldquo;yank a paragraph&rdquo;, with the cursor anywhere in
that paragraph.  Or copy an HTML/XML element? Go ahead and &ldquo;yank a tag-block&rdquo;,
<code>yat</code>.  Then <em>put</em> (paste) three copies of it: <code>3P</code>.  And change the content
(of whichever one you put the cursor on): <code>cit</code> (&ldquo;change inner tag-block&rdquo;).</p>

<p>This last command is slightly different from the others.  It deletes the
content of the element, then drops you to insert mode with the cursor inside
the element, i.e. <code>&lt;foo bar="baz"&gt;</code>between the tags<code>&lt;/foo&gt;</code>.  Then you type
your new content, followed by <code>&lt;esc&gt;</code>, which returns you to normal mode,
simultaneously completing the action.  It might go like this, from start to
finish:  <code>citMy new content&lt;esc&gt;</code>.</p>

<p>Then move to another element and type <code>.</code> to repeat the action!</p>

<p>In
<a href="http://jeetworks.org/grokking-the-zen-of-the-vim-wu-wei/">the words of Jeet Sukumaran</a>:</p>

<blockquote><p>It seemed that, without my hands leaving the keyboard, just a few strokes
here and a few taps there, I was capable of dancing all over the document,
and perform everything from extremely precise [targeted] micro-surgery to
massive document-wide renovations.</p></blockquote>

<a name="The.Language.of.vi"></a>
<h2>The Language of vi</h2>

<p>Mode changes take time to get accustomed to.  They are very visible and
&ldquo;demanding&rdquo; the first many times you use a modal editor.  Hence, they get a lot
of attention.  But too often they steal the attention from the more important
concept of actions.</p>

<p><a href="http://stackoverflow.com/questions/1218390/what-is-your-most-productive-shortcut-with-vim/1220118#1220118">People</a>
<a href="http://yanpritzker.com/2011/12/16/learn-to-speak-vim-verbs-nouns-and-modifiers/">have</a>
<a href="http://stevelosh.com/blog/2010/09/coming-home-to-vim/#a-language-of-text-editing">described</a>
Vim/vi as having a language of editing.  Perhaps you already got the feeling
from the mnemonics above such as &ldquo;yank a paragraph&rdquo;.  The language of vi is how
you instruct the editor to perform actions.  One action is one sentence, and
a sentence consists of verbs, nouns, etc.  Here I will pursue the idea with
a bit more systematically than the aforementioned sources.</p>

<p>There are four possible sentences types/word orders:</p>

<ul>
<li>Verb</li>
<li>Verb Object</li>
<li>Verb [Prepositional Phrase]</li>
<li>[Prepositional Phrase]</li>
</ul>


<p>We shall explore the components of these sentences below, along with what it
means for a
<a href="http://en.wikipedia.org/wiki/Adpositional_phrase#Prepositional_phrases">prepositional phrase</a>
(e.g., &ldquo;to &hellip;&rdquo;, &ldquo;until &hellip;&rdquo;) to stand alone.  The subject is always the
implied &ldquo;you&rdquo; in the imperative.  We are commanding the editor, after all!</p>

<a name="Verbs"></a>
<h3>Verbs</h3>

<p>We have already seen verbs like yank <code>y</code>, change <code>c</code>, put <code>P</code>, and repeat <code>.</code>.
Verbs fall into two categories:  The first type has its &ldquo;area of effect&rdquo;
implied and the change will occur immediately:</p>

<ul>
<li><em>put</em> previously yanked or deleted text <code>P</code></li>
<li><em>repeat</em> last action in a new context <code>.</code></li>
<li><em>delete</em> a single character backwards <code>X</code></li>
<li><em>swap</em> case of a single character <code>~</code></li>
<li><em>insert</em> text <code>i</code></li>
<li><em>replace</em> text <code>R</code></li>
</ul>


<p>The second type is the
<a href="http://vimdoc.sourceforge.net/htmldoc/motion.html#operator"><em>operator</em></a> which
includes commands such as</p>

<ul>
<li>yank <code>y</code></li>
<li>change <code>c</code></li>
<li>delete <code>d</code></li>
<li>increase/decrease indentation <code>&gt;</code> <code>&lt;</code></li>
<li>make UPPER/lower/opposite case <code>gU</code> <code>gu</code> <code>g~</code></li>
</ul>


<p>The difference between &ldquo;immediate changes&rdquo; and operators is that when you type an
operator, the editor awaits the object or region that the operator should
affect.  This role is played by nouns and prepositional phrases.</p>

<p>There are many more verbs, and you indeed need more to use vi (and therefore
Vim) efficiently, but this selection will do fine in explaining the language
metaphor.  It&rsquo;s expected and normal that you find the commands hard to remember
at first.  But if you are curious and/or adamant enough to learn them, they
grow into muscle memory, and you reap the full benefits of the compactness and
efficiency.
<a href="http://pascalprecht.github.io/2014/03/18/why-i-use-vim/">Paraphrasing Pascal Precht</a>:</p>

<blockquote><p>Vim&rsquo;s learning curve is not a curve at all. It&rsquo;s a wall. But once you climb
that wall, you can lean back and slide down on the other side.  Once I was
able to do some basic operations in Vi, I made almost as twice as much
progress at work in about half the time.</p></blockquote>

<p>(If you want some tips on how to edit text better (not just in Vim) and do more
in the same amount of time, Bram Moolenaar, the creator of Vim, has
<a href="https://www.youtube.com/watch?v=p6K4iIMlouI">7 Habits For Effective Text Editing</a>.)</p>

<p>Verbs from both categories (immediate and operators) can involve a mode change.
The insert <code>i</code> and change <code>c</code> commands both switch to insert mode where you can
enter the new text.  The replace <code>R</code> command uses <em>replace mode</em>, which is
similar to insert mode, except you replace (overwrite) text as you type.  (This
is maybe another mode you already knew &ndash; in Microsoft Word and other
<a href="http://en.wikipedia.org/wiki/Word_processor">word processors</a>, it&rsquo;s toggled by the <code>&lt;insert&gt;</code> key.) Operators (as
opposed to immediate changes) in fact always incur mode a change: After typing
the operator, the editor will be in <em>operator pending mode</em>, awaiting the
choice of the text to operate on.  We will see how to choose that text in the
next two sections.</p>

<a name="Nouns.Objects"></a>
<h3>Nouns/Objects</h3>

<p>We have seen nouns such as a paragraph <code>ap</code> and a tag block <code>at</code>.  There are
others such as a word <code>aw</code>, a sentence <code>as</code>, and various blocks (delimited by
 <span class="nobreak"><code>{}</code>,</span>
 <span class="nobreak"><code>()</code>,</span>
 <span class="nobreak"><code>&lt;&gt;</code>,</span>
 <span class="nobreak"><code>[]</code>,</span>
 <span class="nobreak"><code>""</code>,</span>
 <span class="nobreak"><code>''</code>,</span>
 <span class="nobreak">and <code>``</code></span>).
Nouns, or <a href="http://vimdoc.sourceforge.net/htmldoc/motion.html#text-objects">text objects</a> as they are called in Vim, must be prefixed
with an <code>a</code> or <code>i</code>.  Above I showed them with <code>a</code> to help as a mnemonic (&ldquo;a
paragraph&rdquo; ~ <code>ap</code>).  The &ldquo;article&rdquo; serves two purposes: First, it distinguishes
the nouns from <em>prepositional phrases</em> that are bound to the same letter (&ldquo;a
word&rdquo; <code>aw</code>, for example, is not the same as <code>w</code> which means &ldquo;<em>to/until the
next</em> word&rdquo;, as we shall see in the next section).  Second, it marks whether
the whole object (<code>a</code>) or only its &ldquo;insides&rdquo; (<code>i</code>) are meant.  For example, we
have seen <code>yat</code> yank a whole tag block, while <code>cit</code> changes its contents (i.e.,
not the enclosing tags).  For objects that do not have an obvious crunchy shell
surrounding a soft, chewy center, the <code>a</code> version includes the trailing
whitespace while <code>i</code> doesn&rsquo;t.  Thus, <code>a</code> is useful for transplanting words and
sentences without having to clean up the whitespace afterwards.</p>

<p>Text objects are &ldquo;intelligent&rdquo;.  First, they are insensitive to the cursor
position within the text object: The whole object (or its inside) is used as
long as the cursor is somewhere inside it.  Second, they can depend on context:
The meaning of &ldquo;a word&rdquo; depends on the file type.  In C-style programming
languages, dashes are not part of a word, but in Lisps, they are.  For prose
writing, I have set Vim up to see apostrophes as parts of words such that
&ldquo;can&rsquo;t&rdquo; is seen as a single word (which would not be so useful in programming).
Paragraph boundaries can similarly be specified.  Strings are aware of escaped
quote characters.  For example, <code>"This is one \"string\""</code>.</p>

<p>I didn&rsquo;t mention &ldquo;line&rdquo; as a noun.  This is not because operating on lines is
uncommon, in fact it&rsquo;s the opposite.  Repeating an operator symbol makes the
operator work on the current line:
 <span class="nobreak"><code>yy</code>,</span>
 <span class="nobreak"><code>cc</code>,</span>
 <span class="nobreak"><code>dd</code>,</span>
 <span class="nobreak"><code>&gt;&gt;</code>,</span>
 <span class="nobreak"><code>&lt;&lt;</code>,</span>
 <span class="nobreak"><code>gUU</code>,</span>
 <span class="nobreak"><code>guu</code>,</span>
 <span class="nobreak"><code>g~~</code>,</span>
&hellip;</p>

<a name="Prepositional.Phrases.Motions"></a>
<h3>Prepositional Phrases/Motions</h3>

<p>There are also
<a href="http://en.wikipedia.org/wiki/Adpositional_phrase#Prepositional_phrases">prepositional phrases</a>,
which is the grammatical term I use for what Vim calls
<a href="http://vimdoc.sourceforge.net/htmldoc/motion.html#cursor-motions">cursor motions</a>.
We have already seen &ldquo;to the first line&rdquo; and &ldquo;to the last line&rdquo;, <code>gg</code> and <code>G</code>,
respectively.  The sequence <code>ggyG</code> we saw earlier reads as two sentences:
&ldquo;(First,) (go) to the first line of the buffer.  (Then) yank until the last
line.&rdquo;  This demonstrates an important point:
There is no need for punctuation in the &ldquo;vi language&rdquo; (at least figuratively
speaking!) because the word order is enough: A prepositional phrase without
a verb is taken to be a cursor movement command.  A prepositional phrase
following an operator verb means that the operator should act on the text
<em>from</em> the current cursor position and <em>to</em> wherever the motion leads.
(Here you can see that this is really a top-down introduction to Vim.
A tutorial would probably have told you first thing how to move the cursor!)</p>

<p>First, let&rsquo;s see some word motions:</p>

<ul>
<li>&ldquo;to the next beginning-of-a-word&rdquo; <code>w</code></li>
<li>&ldquo;(backwards) to the previous beginning-of-a-word&rdquo; <code>b</code></li>
<li>&ldquo;to the next/previous end-of-a-word&rdquo; <code>e</code> and <code>ge</code></li>
</ul>


<p>Unlike text objects such as &ldquo;a word&rdquo; <code>aw</code>, motions use your exact cursor
position as the point of origin.  Therefore, <code>b</code> and <code>e</code> will find the
beginning/end of the word the cursor is inside, unless you are already on the
beginning/end.  If you <em>are</em> on the beginning or end, they will move to the
previous or next word, respectively.  Notice that I say <em>on</em>.  In Vim/vi, the
cursor moves <em>on</em> characters, not between them as in many other editors.</p>

<p>If you move back and forth in a sentence using <code>b</code> and <code>w</code> you can exploit the
fact that the cursor is always on the first character of a word.  For example,
<code>dw</code> deletes a word without the need for <code>daw</code>.  The motions <code>(</code> and <code>)</code> work
like <code>b</code> and <code>w</code> but for sentences.  The motions <code>{</code> and <code>}</code> go to the
previous/next paragraph boundary.</p>

<p>Another powerful type of motion is the &ldquo;till&rdquo;/&ldquo;find&rdquo; motion. Till <code>t</code> moves to
the next character you specify.  For example, <code>t"</code> moves to right before the
next <code>"</code> in the line.  Find <code>f</code> is similar, except it moves onto the specified
character.  The motion <code>;</code> repeats the last <code>t</code> or <code>f</code> motion.  All three
motions have equivalents going to the left instead of right: <code>T</code>, <code>F</code> and <code>,</code>.</p>

<p>The till/find motions are for quick and simple jumps within the same line.
<a href="http://en.wikipedia.org/wiki/Regular_expression">Regex</a> search finds anything, anywhere in the file.  The commands <code>/</code>
and <code>?</code> open up a search field for forward and backward regex search,
respectively.  It even highlights the first match while you type to give you
live feedback on your search pattern.  After confirming the entered pattern
with <code>&lt;enter&gt;</code>, keys <code>n</code> and <code>N</code> jump in the same/opposite direction of the
current regex search.</p>

<p>Coming from other text editors, it&rsquo;s easy to think that <code>/</code> is &ldquo;just&rdquo; how you
search for text.  And it is.  But the four commands <span class="nobreak"><code>/</code>
<code>?</code> <code>n</code> <code>N</code></span> are all motions, and like any motion they can be used alone
or with an operator.  The design of vi is <a href="http://en.wikipedia.org/wiki/Orthogonality#Computer_science">orthogonal</a>:  You can learn
it piece by piece, and combine the new motion you just learned with the verbs
you already knew and vice versa.  This is extremely powerful and part of what
makes vi/Vim so special.  The idea may be almost 40 years old, but
<a href="https://medium.com/@mkozlows/why-atom-cant-replace-vim-433852f4b4d1">it&rsquo;s still relevant today and in the future</a>!</p>

<p>You may have noticed I didn&rsquo;t mention the most basic motions you already know
from your arrow keys.  Many Vim introductions (including the official
&ldquo;vimtutor&rdquo;) mention very early on that <span class="nobreak"><code>h</code> <code>j</code> <code>k</code> <code>l</code>
</span> work as <span class="nobreak">&#8592; &#8595; &#8593; &#8594;</span>,
respectively.  And people wonder why they can&rsquo;t just use the normal arrow keys.
But either kind of arrow keys are beside the point!  There&rsquo;s almost always
a smarter way &mdash; a more precise motion &mdash; to go somewhere than to hold down
arrow keys.  <a href="http://jeetworks.org/vim-making-those-arrow-keys-work-for-you-or-why-the-anti-arrow-key-propoganda-is-wrong/">Jeet Sukumaran tells it</a> again:</p>

<blockquote><p>being forced to use the rich suite of powerful normal mode movement commands
to get to exactly where I needed to be [&hellip;] was like
suddenly beginning to use the fifth and other gears while driving on an open
highway, whereas before I had been grinding along for mile after laborious
mile on first.</p></blockquote>

<p>Here are some more motions just to illustrate:</p>

<ul>
<li>&ldquo;to the matching parenthesis/brace/comment marker/HTML tag/if/else-stmt/etc. <code>%</code></li>
<li>&ldquo;to the next/previous misspelled word&rdquo; <code>]s</code> <code>[s</code></li>
<li>&ldquo;to the next/previous start/end of a method (Java/C# style) <code>]m</code> <code>]M</code> <code>[m</code> <code>[M</code></li>
</ul>


<a name="Numerals"></a>
<h3>Numerals</h3>

<p>So far we have covered verbs, nouns, and prepositional phrases. Let&rsquo;s look at
numerals, of which vi uses three types:</p>

<ul>
<li>Cardinal numbers, e.g., 1, 2, 7</li>
<li>Adverbial numbers, e.g., once, twice, sevenfold</li>
<li>Ordinal numbers, e.g. 1st, 2nd, 7th</li>
</ul>


<p>The grammatical distinction is mine; in vi they&rsquo;re all known as <em>counts</em>.  But
it helps to show the different roles counts have.
Cardinal numbers (1, 2, 7) can choose the number of lines to apply an operator
to, or the number of text objects (nouns) to apply an operator to:</p>

<ul>
<li>&ldquo;Indent ten lines&rdquo; <code>10&gt;&gt;</code></li>
<li>&ldquo;Uppercase two sentences&rdquo; <code>gU2as</code></li>
</ul>


<p>Adverbial numbers (once, twice, sevenfold) can decide the number of times to
do something:</p>

<ul>
<li>&ldquo;Twentyfold insert a blank line&rdquo; <code>20i&lt;enter&gt;&lt;esc&gt;</code> (-> &ldquo;Insert 20 blank
lines&rdquo;)</li>
<li>&ldquo;Delete until you have moved twice to the next word&rdquo; <code>d2w</code> (-> &ldquo;Delete two
words&rdquo;)</li>
</ul>


<p>Ordinal numbers (1st, 2nd, 7th) can choose where to go:</p>

<ul>
<li>&ldquo;To the 27th line&rdquo; <code>27gg</code></li>
<li>&ldquo;To the 20000th byte&rdquo; <code>20000go</code></li>
<li>&ldquo;To the 80&#8217;th column&rdquo; <code>80|</code></li>
<li>&ldquo;To the 70%&lsquo;th line&rdquo; <code>70%</code></li>
</ul>


<p>The ordinal numbers can also be though of just as cardinals (line 27 = 27th
line), but since they access ordered items, it makes sense to see them as
ordinals.</p>

<p>All motions and operators in fact take a count, but it usually defaults to 1.
This is another example of orthogonality in vi.</p>

<a name="Expand.your.Vocabulary"></a>
<h2>Expand your Vocabulary</h2>

<p>For even more orthogonality, you can even add verbs and nouns, as
<a href="http://yanpritzker.com/2011/12/16/learn-to-speak-vim-verbs-nouns-and-modifiers/">mentioned by Yan Pritzker</a>:</p>

<ul>
<li>Install Drew Niel&rsquo;s
<a href="https://github.com/nelstrom/vim-textobj-rubyblock">textobj-rubyblock</a>
plugin to get the new noun &ldquo;Ruby block&rdquo; <code>r</code>.</li>
<li>Install Tim Pope&rsquo;s <a href="https://github.com/tpope/vim-surround">surround.vim</a>
plugin to get three new verbs:

<ul>
<li>&ldquo;Surround with&rdquo;, which is even HTML aware (closes tags). Example:

<ul>
<li>&ldquo;(you) surround a word with em-tags <code>ysaw&lt;em&gt;</code></li>
</ul>
</li>
<li>&ldquo;Change surroundings&rdquo;, example:

<ul>
<li>&ldquo;change the nearest surrounding single quotes to double quotes&rdquo; <code>cs'"</code></li>
</ul>
</li>
<li>&ldquo;Delete surroundings&rdquo;, e.g.

<ul>
<li>&ldquo;delete the nearest surrounding asterisks&rdquo; <code>ds*</code></li>
</ul>
</li>
</ul>
</li>
</ul>


<a name="Real.Keyboard.Shortcuts"></a>
<h2>Real Keyboard Shortcuts</h2>

<p>The key <code>y</code> is not a shortcut for yank, it <em>is</em> the yank operator.  But vi
still has shortcuts (in the traditional sense of the word) for those actions
that are so common that having a shorter ways to get to them is useful:</p>

<ul>
<li>&ldquo;Delete left/right&rdquo; <code>dh</code> and <code>dl</code> are <code>X</code> and <code>x</code> (think backspace and
delete)</li>
<li>&ldquo;Change to the end of the line&rdquo; <code>c$</code> is <code>C</code></li>
<li>&ldquo;Delete to the end of the line&rdquo; <code>d$</code> is <code>D</code></li>
</ul>


<p>Recall that <code>$</code> means &ldquo;to the end of the line&rdquo;.  Similarly, <code>0</code> means &ldquo;to the
beginning of the line&rdquo; and <code>^</code> means &ldquo;to the first non-blank character on the
line&rdquo;. With these we get:</p>

<ul>
<li>&ldquo;Insert at the &#8220;beginning&rdquo; of the line&#8221; <code>^i</code> is <code>I</code></li>
<li>&ldquo;Really insert at the beginning of the line!&rdquo; <code>0i</code> is <code>gI</code></li>
<li>&ldquo;Append to the line&rdquo; <code>$a</code> is <code>A</code>  (append <code>a</code> is like insert <code>i</code>
except it inserts <em>after</em> the cursor position)</li>
</ul>


<p>The idea that &ldquo;vi is about pressing <code>i</code> to insert text&rdquo; is wrong.  We have
already seen that it takes focus away from what vi is really about, namely
actions.  But it&rsquo;s also wrong because it takes focus away from the above
insertion commands which are just as common as <code>i</code> for the effective user.  For
programmers, one type of action is even more common:</p>

<ul>
<li>&ldquo;Open a new line below&rdquo; <code>o</code></li>
<li>&ldquo;Open a new line above&rdquo; <code>O</code></li>
</ul>


<p>It inserts a blank line and leaves you in insert mode, ready to type a new
statement in your program.  With Vim&rsquo;s indentation features this even starts
inserting at the right indentation level, aware of nesting and control
structures. For example, if the previous line is an &ldquo;if&rdquo; statement or the start
of a new block, the next line&rsquo;s indentation level should be one higher.</p>

<a name="What.about.Usability."></a>
<h2>What about Usability?</h2>

<p>I figure I should mention usability because there could seem to be a conflict
between these two facts: (1) I care about usability, and (2) vi is definitely
not known to be user friendly. How can I reconcile this?  The thing to remember
is that usability is about more than user friendliness.  Using the first two
components of <a href="http://www.nngroup.com/articles/usability-101-introduction-to-usability/">Jakob Nielsen&rsquo;s definition of usability</a>:</p>

<ul>
<li><em><strong>Learnability</strong>: How easy is it for users to accomplish basic tasks the first time they encounter the design?</em></li>
<li><em><strong>Efficiency</strong>: Once users have learned the design, how quickly can they perform tasks?</em></li>
</ul>


<p>This is the fundamental trade-off with Vim/vi: Very hard to master and very
efficient when mastered.  The question then quickly arises: Can learnability be
improved without harming efficiency?  And what other options exist on the
learnability/efficiency plane?  (And what about the other aspects of
usability?)  These are all interesting topics for another time!  In the
meantime I hope the <a href="http://www.nngroup.com/articles/mental-models/">mental model</a> of vi explained in this post will
make, if not your first, then your next encounter with Vim more meaningful.</p>

<a name="Conclusion"></a>
<h2>Conclusion</h2>

<p>The essence of vi is not modality.  The essence of vi is performing actions on
text.  Actions are specified using an extensible and orthogonally composable
&ldquo;language&rdquo;, where the same motions that are part of actions are also used for
plain cursor movement.  Some of the actions involve mode switching, some don&rsquo;t.
The actions drive the editing process while the modes help put a large
vocabulary right under your fingertips.</p>

<p>I have only covered basic text manipulation, though Vim does much more.  Any
user would need to know how to open/close/save files, and maybe
open/close/switch buffers, windows, and tabs (Vim has them all).  Fancier
features include regex substitution, autocompletion, diff mode, scripting, key
remapping, (mutually recursive) macros, persistent undo, and encryption.</p>

<p>These features add tremendously to the usefulness of Vim.  And regex
substitution predates even vi.  But in my opinion they are not part of its
essence, action based editing.  In fact, I barely touched upon the
command-line/Ex mode.  Most people who have tried Vim know it because it is the
one you enter when you type <code>:w&lt;enter&gt;</code> to save and <code>:q&lt;enter&gt;</code> to quit.</p>

<p>Is command-line mode essential?
Maybe <a href="http://blog.sanctum.geek.nz/vim-koans/">the Vim Koan &ldquo;The superior editor&rdquo;</a> will enlighten you.</p>
]]></content>
  </entry>
  
</feed>
