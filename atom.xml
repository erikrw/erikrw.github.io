<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Erik Ramsgaard Wognsen]]></title>
  <link href="http://blog.erw.dk/atom.xml" rel="self"/>
  <link href="http://blog.erw.dk/"/>
  <updated>2018-05-10T17:14:04+02:00</updated>
  <id>http://blog.erw.dk/</id>
  <author>
    <name><![CDATA[Erik Ramsgaard Wognsen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Flying in the Front Row]]></title>
    <link href="http://blog.erw.dk/2018/05/10/flying-in-the-front-row/"/>
    <updated>2018-05-10T15:50:10+02:00</updated>
    <id>http://blog.erw.dk/2018/05/10/flying-in-the-front-row</id>
    <content type="html"><![CDATA[<p>I regularly fly to Copenhagen for work, and once in a while I&rsquo;m assigned
a front row seat &mdash; an ostensible upgrade. This must happen randomly as I have
not requested or paid for it. But after experiencing it few times, I&rsquo;d be
inclined to pay to <em>not</em> sit there again.</p>

<p><img src="http://blog.erw.dk/images/posts/wing_sunset.jpg"></p>

<!-- more -->


<p>One of the joys of business trips is traveling light. For a one or two day
trip, I can fit all I need in my briefcase, and there&rsquo;s no need to queue early
to be sure to get a space for my carry-on suitcase in the overhead bins. (I
entirely avoid checking bags when I can.)</p>

<p>After boarding I work until it&rsquo;s time to take off, and then I slide my laptop
in my briefcase and the briefcase under the seat in front of me. Once we&rsquo;re in
the air, I slide it back out and get some more work done, without asking my
fellow passengers to get up while I get my bag. Easy peasy.</p>

<a name="Bags.Must.Be.Stowed"></a>
<h2>Bags Must Be Stowed</h2>

<p>The first problem of the front row stems from the rule that bags must be stowed
in the overhead bins during takeoff and landing.</p>

<p>If I board early, I can put my bag in the overhead bin and sit down without
access to my stuff while everyone else is boarding, with the added bonus that
if I sit in the 1C aisle seat, every third backpack-wearing passenger will bump
their backpack into me as they pass.</p>

<p>If I board late, I get to the second problem: There&rsquo;s very little overhead
space for the first row passengers because a lot of the bin space is reserved
for kit needed by the cabin crew. The little space gets filled quickly and I&rsquo;ll
have to go further down the rows until I find an empty slot. This is not
a problem at first, but after landing, once the disembarkation stampede begins,
getting from row 1 to 4 to get my bag while a hundred people are impatiently
going the opposite direction is not great.</p>

<p>I think one of the supposed advantages of the front row is to be one of the
first people to get off the plane. But that&rsquo;s not likely to happen if you have
baggage. Row 2 and 3 are better. Therefore I was happy when I was recently
assigned seat 2E. That lasted until I got on the plane and it turned out that,
on the right side (D-E-F), row 2 <em>was</em> the front row on that plane &mdash; no row
1.</p>

<a name="Longer.Flights"></a>
<h2>Longer Flights</h2>

<p>The above is just my annoyances with a process I&rsquo;d like to run smoothly as part
of a routine. On the short flight from Aalborg to Copenhagen, more time is
spent boarding, preparing, taxiing, and disembarking, than the actual 30
minutes in the air. On rarer, longer trips the efficiency of getting on and off
the plane seems less important, and the leg room perhaps more important.</p>

<p>Leg room depends on how the airline configures the seats. I often fly with
<em>Norwegian</em> and despite their label as a low-cost airline, they have enough
room in standard economy to fit my long legs &mdash; perhaps because they&rsquo;re
Scandinavian. Either way, the value of a front row seat in this regard will
depend on your legs compared with the leg room of your chosen airline.</p>

<p>But the extra room can be useful to others as well. What I&rsquo;ve found is that the
(not <em>that</em> large, by the way) space in front of the front row seats is where
the front toilet queue goes to stand every time the crew needs to pass with
a trolley.</p>

<p>All this is by the way as it relates to short-haul single-aisle aircraft with
no business class seats &mdash; only &ldquo;economy with extra legroom&rdquo;. These extra
legroom seats are exactly the ones I&rsquo;d like to avoid. The emergency exit rows
have some of the same problems as the front row, but with more overhead bin
space and less toilet queue. But I&#8217; take a standard economy seat over that as
well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Weird Keyboard]]></title>
    <link href="http://blog.erw.dk/2018/04/14/my-weird-keyboard/"/>
    <updated>2018-04-14T16:57:10+02:00</updated>
    <id>http://blog.erw.dk/2018/04/14/my-weird-keyboard</id>
    <content type="html"><![CDATA[<p>I use a weird computer keyboard: The <a href="https://www.kinesis-ergo.com/shop/advantage2/">Kinesis Advantage</a>.
It&rsquo;s a concave, columnar, split, tented, mechanical keyboard with thumb keys.
It&rsquo;s very comfortable and much better than anything Logitech or Microsoft have
ever labeled ergonomic.</p>

<p><img src="http://blog.erw.dk/images/posts/kinesis_advantage2.jpg"></p>

<!-- more -->


<a name="Ergonomic.Features"></a>
<h2>Ergonomic Features</h2>

<p><strong>Columnar</strong> means that the keys are laid out in straight columns, so you don&rsquo;t
have to bend your fingers sideways as you curl and extend them &mdash; unlike on
a standard, staggered keyboard, where especially the left hand fingers need to
move unnaturally. The <strong>split</strong> also helps avoiding sideways bends for the
wrists. For more details, see the illustration of the <a href="https://www.trulyergonomic.com/store/unique-symmetric-columnar-key-arrangement--truly-ergonomic-mechanical-keyboard--orthogonal-matrix-non-staggered">Truly Ergonomic
keyboard</a> (which I haven&rsquo;t tried (yet)).</p>

<p><strong>Tented</strong> means that the thumb side of each hand sits higher than the pinky
side. This gives the wrists a more natural rotation. The Advantage only tilts
20 degrees &mdash; other keyboards such as the
<a href="https://www.kinesis-ergo.com/shop/freestyle2-for-pc-us/">Kinesis Freestyle</a> and the <a href="http://safetype.com">SafeType</a> can tent
(up to) 90 degrees (while <a href="https://www.kinesis-ergo.com/wp-content/uploads/2013/08/frreestyle2-ascent-90-1.jpg">looking</a> even less
conventional than the Advantage).</p>

<p>The <strong>thumb key</strong> clusters make more keys reachable without moving the hand
away from its home position, and it offloads Backspace and Enter from the
overworked right pinky and onto the stronger thumbs.</p>

<p>The <strong>mechanical</strong> keyswitches (Cherry MX brown or red) register the keypress
when the key is halfway depressed (2 out of 4 millimeters). This is opposed to
standard rubber dome keyboards that require you to bottom out &mdash; fully depress
the key until the finger is jolted to a stop.</p>

<p><img src="http://blog.erw.dk/images/posts/kinesis_advantage2_side.jpg"></p>

<p>The best feature of the Advantage is the <strong>concave</strong> keywells: The scooped-out
parts of the keyboard where the alphanumeric keys reside. They serve several
purposes:</p>

<ul>
<li>As you curl and extend your fingers, the keys remain at the same distance
from your fingertips, so you don&rsquo;t need to stretch your fingers much to
reach. This also makes it easy to access all five (!) rows of keys.</li>
<li>The same happens when you move your index finger to the side (like T, G, B),
reducing sideways-twisting finger motions.</li>
<li>The depths of the columns are matched with the corresponding fingers, so they
all rest naturally in the home position.</li>
</ul>


<a name="Switching"></a>
<h2>Switching</h2>

<p>I got my first Kinesis Advantage in 2011. As I recall, it only took a few days
to adapt to this weird keyboard. The best part is that I can still switch
effortlessly between the Advantage and standard, flat, staggered keyboards. Not
that I particularly enjoy it, but I can do it, which is very practical for
traveling. The Advantage is actually narrower than a standard 104/105-key
keyboard, but it&rsquo;s bigger in the two other dimensions and therefore not easy to
transport.</p>

<p>However, the physical shape of my keyboard is not the only weird thing about my
typing. The <em>logical</em> layout I use &mdash; <a href="http://blog.erw.dk/2015/02/27/4-years-with-colemak/">Colemak</a> &mdash; is weird too.</p>

<p><img src="http://blog.erw.dk/images/posts/kinesis_advantage_custom_keycaps_right.jpg"></p>

<p>Switching logical layout is much harder for me than switching physical layout.
Even though the Advantage is firmware remappable, I set my logical layout in
the computer OS, so I will keep the logical layout for all keyboards, including
the laptop keyboard.</p>

<p>Some people retain their QWERTY touch typing skills while learning an
alternative layout by associating logical layout with physical keyboard, e.g.,
typing Colemak on the Advantage and QWERTY on standard keyboards. And I did
actually get the Advantage the same year I switched to Colemak, but I much
prefer typing Colemak on my laptop while traveling to maintaining my QWERTY
skills.</p>

<a name="Legends"></a>
<h2>Legends</h2>

<p>It&rsquo;s not really necessary have Colemak legends on the keys, but I did get a set
of custom keycaps made by <a href="http://www.wasdkeyboards.com/">WASD keyboards</a> for one of my two Advantages
&mdash; complete with my Danish variation of Colemak &mdash; as shown in the images
above and below. It&rsquo;s mostly for show, because the legends are not necessary
for touch typing, and the Advantage is not so good anyway for one-handed use
where the legends might be relevant.</p>

<p>In fact, hunt-and-peck typing is for some reason easier for me with QWERTY
legends, even while I type Colemak. My eyes are more used to the common QWERTY
layout, I guess. I just know that pressing the QWERTY &rsquo;T&#8217; key produces a &lsquo;G&rsquo; in
Colemak. If I look down and the key shows a &lsquo;G&rsquo;, my eyes get confused, even
though my fingers knows exactly where to press to get the &lsquo;G&rsquo; while touch
typing.</p>

<p><img src="http://blog.erw.dk/images/posts/kinesis_advantage_custom_keycaps_left.jpg"></p>

<a name="Downsides"></a>
<h2>Downsides</h2>

<p>The Advantage is not great for everything. Split keyboards are not good for the
occational one-handed use (e.g., while holding a drink, phone, piece of paper).</p>

<p>The Advantage is not the best for gaming either. The arrow keys are spread on
both sides of the split which is fine for two-handed office and programming
use, but not ideal for gaming. The key positions are matched to finger lengths,
so the WASD keys will not work well with the normal WASD-fingers. ESDF should
be perfect, though.</p>

<p>For a long time, the typical complaint of the Advantage was the low quality of
the rubber F-keys. In 2016, the Advantage2 was launched, with Cherry ML
switches instead of rubber dome F-keys, and more programming options. (This is
the product I link to in the top of the post because the product page for the
old version seems to be gone.)</p>

<p>Another problem partially solved by time is the built-in combined USB hub and
PS/2-to-USB converter. It &mdash; and the whole keyboard with it &mdash; didn&rsquo;t work
with Windows 7. Kinesis did sell a cable conversion kit to work around this,
but I went DIY and installed a PS/2-to-USB adapter myself, bypassing the
problematic USB hub, on my &ldquo;work&rdquo; board.</p>

<p>My &ldquo;home&rdquo; board always worked fine with Linux (and Windows 10), but it&rsquo;s also
not recognized by the BIOS of my desktop computer&rsquo;s motherboard. A smaller
problem but I&rsquo;m considering giving this board a USB hubectomy as well. The
Advantage2 has supposedly also solved this problem.</p>

<p>There are a few problems with the Advantage, but they are minor compared to the
Advantage (heh) of using an extremely comfortable keyboard for my 10+ daily
hours of computer usage.</p>

<a name="Key.Remapping"></a>
<h2>Key Remapping</h2>

<p>My remaining complaints were solved with easy firmware remapping, which is in
fact just a testament of the Advantage&rsquo;s flexibility:</p>

<ul>
<li>I swapped Space and Backspace because I have for some reason always used my
left hand&rsquo;s thumb for Space.</li>
<li>I use the Alt+Tab shortcut all the time, so I moved the Alt key closer to my
thumb in the left thumb cluster.</li>
<li>I made the key above Tab work as an Escape key.</li>
<li>I made the key below Tab work as a Control key because that&rsquo;s how control
freaks control.</li>
<li>I put Down to the left of Up because that&rsquo;s how Vim users roll.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Roland Boutique Needs]]></title>
    <link href="http://blog.erw.dk/2018/02/25/what-roland-boutique-needs/"/>
    <updated>2018-02-25T16:46:09+01:00</updated>
    <id>http://blog.erw.dk/2018/02/25/what-roland-boutique-needs</id>
    <content type="html"><![CDATA[<p>Roland Boutique is a series of small form factor electronic music instruments.
The line debuted in 2015 with recreations of three iconic Roland 1980s synths.
I got the JP-08 which I wrote about <a href="http://blog.erw.dk/2017/06/25/roland-jp-08-review/">here</a>. Since then I&rsquo;ve been
watching the series grow with interest.</p>

<p>By now, the <a href="https://www.roland.com/us/promos/roland_boutique/">Boutique line</a> includes nine products recreating
Roland&rsquo;s back catalog: Five subtractive synths (JP-08, JU-06, JX-03, TB-03,
SH-01A), the VP-03 vocoder, the TR-08 and TR-09 drum machines, and finally the
D-05 &ldquo;linear synthesizer&rdquo; mixing sampling and synthesis.</p>

<p><img src="http://blog.erw.dk/images/posts/boutique_hero.png"></p>

<!-- more -->


<p>In 2017, Roland ventured outside their own history. Teaming up with Studio
Electronics, they released the Minimoog-inspired analog monosynth SE-02. Having
started down this path, they might make an FM (frequency modulation) synth.
Missing from the lineup is also perhaps a sampler/sample player/sample mangler?</p>

<p>That would at least match miniatures produced by other manufacturers in the
last few years. The very small and affordable Korg Volca series has the
straightforwardly named Beats, Bass, Keys, Sample, and FM. The first four
predated the original Boutique trio by 1-2 years, while the FM was released in
2016.</p>

<p>Swedish manufacturer Elektron also recently went small with the less toylike
&mdash; and less affordable &mdash; Digitakt sampler and Digitone FM-synth, with the
latter being announced just one month ago.</p>

<p>The 2015 Yamaha Reface series also has CS, DX, YC, and CP, doing synth, FM,
electric organ, and electric piano, respectively. And this leads me toward what
I would most like to see in the Roland Boutique series.</p>

<a name="Give.Me.a.Piano."></a>
<h2>Give Me a Piano!</h2>

<p>When you think of a digital piano, you are more likely to think of 88 weighted
keys than 25 non-weighted &ldquo;synth action&rdquo; minikeys. But one of the advantages of
the Boutiques is that they can both slot into the K-25m keyboard module and
perform as a sound module/desktop synth.</p>

<p>I would love to have a Roland Boutique piano with high-quality, natural,
acoustic piano sounds as well as high-quality electric pianos, organs, strings,
etc. I guess the model number would be in the form of FP-0x or RD-0x. I would
use such a Boutique piano module both as a sound module plugged into a MIDI
keyboard, and in the sofa as a plaything and/or compositional tool with the
K-25m keyboard attached.</p>

<p>The D-05 unfortunately does not fill this role. When the D-50 was launched in
1987 it certainly came closer than any analog synth to sounding like acoustic
instruments, but that doesn&rsquo;t mean it could actually pass for one. I went to my
local music store to try out the D-05, and while it does have a dozen patches
with &ldquo;piano&rdquo; in their name, none of them sound like an acoustic piano. It can
do electric pianos and organs, but overall I think the D-50/D-05 has a certain
80s/90s &ldquo;lo-fi&rdquo; sound. It excels at some things, but not acoustic piano.</p>

<a name="The.Panel"></a>
<h2>The Panel</h2>

<p>Some of the Boutiques have too many buttons crammed into the limited space on
the panel. This includes the <a href="http://blog.erw.dk/2017/06/25/roland-jp-08-review/">JP-08</a>, and judging from pictures, also
the TR-08, TR-09 and SE-02. Some have a more reasonable amount, such as the
JU-06, SH-01A, and VP-03. The D-05 doesn&rsquo;t have too many buttons per se, but it
faithfully recreates the dreary menu diving experience of the &ldquo;digital age&rdquo; (to
achieve more hands-on programming of the D-50/D-550/D-05, you need the enormous
PG-1000 programmer). But, digital pianos typically do not have a lot of
buttons. So what do I want on the Boutique piano panel?</p>

<p>I can think of a lot!</p>

<ul>
<li>Better speaker(s), perhaps even front facing</li>
<li>Dedicated octave up/down buttons</li>
<li>A good pitch/modulation stick (yes, electric organs can <a href="http://www.organforum.com/forums/showthread.php?22171-Pitch-bending-on-a-Hammond-A-mystery">pitch bend</a>)</li>
<li>Effects! Reverb, Leslie, Overdrive, Chorus, you name it.</li>
<li>Loop machine</li>
<li>Tape recorder</li>
<li>Sequencer</li>
<li>Arpeggiator</li>
<li>Chord memory</li>
<li>Scale/chord library (like a <a href="https://www.islainstruments.com/product/kordbot/">KordBot</a>?)</li>
</ul>


<p>Finally, such a module shouldn&rsquo;t be expensive. Unless it would have several of
the above features, it should be closer to 150 €/$ than to 400 €/$. It&rsquo;s
a ripoff that the K-25m keyboard is already 100 €/$.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AoC 2017 Day 8: Fell Into a Python Pitfall]]></title>
    <link href="http://blog.erw.dk/2017/12/10/aoc-2017-day-8-fell-into-a-python-pitfall/"/>
    <updated>2017-12-10T20:43:47+01:00</updated>
    <id>http://blog.erw.dk/2017/12/10/aoc-2017-day-8-fell-into-a-python-pitfall</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been using and enjoying <a href="https://www.python.org/">Python</a> since 2009, but while doing
<a href="http://adventofcode.com">Advent of Code</a> again this year, I stumbled upon a Python feature that
led to a subtle bug. Advent of Code spoiler ahead.</p>

<!-- more -->


<a name="The.Puzzle"></a>
<h2>The Puzzle</h2>

<p>In AoC 2017 you travel inside Santa&rsquo;s computer, fixing and computing things so
the Naughty or Nice List can be printed on time for Santa to deliver the
presents on time.</p>

<p>The puzzle for <a href="http://adventofcode.com/2017/day/8">Day 8</a> gives you a textual input such as</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Pascal'><span class='line'><span class="n">b</span> <span class="nb">inc</span> <span class="mi">5</span> <span class="k">if</span> <span class="n">a</span> <span class="o">&gt;</span> <span class="mi">1</span>
</span><span class='line'><span class="n">a</span> <span class="nb">inc</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">b</span> <span class="o">&lt;</span> <span class="mi">5</span>
</span><span class='line'><span class="n">c</span> <span class="nb">dec</span> <span class="o">-</span><span class="mi">10</span> <span class="k">if</span> <span class="n">a</span> <span class="o">&gt;=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">c</span> <span class="nb">inc</span> <span class="o">-</span><span class="mi">20</span> <span class="k">if</span> <span class="n">c</span> <span class="o">==</span> <span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure>


<p>and asks you to find the largest value in any register after executing the
given instructions (on some imagined CPU). The registers (which are <code>a</code>, <code>b</code>,
and <code>c</code> in the above), are all initialized to zero. The largest value in the
example is 1, which is in the <code>a</code> register at the end.</p>

<p>The real puzzle input is much larger and requires an automated solution. My
approach was to build a register valuation dictionary, update it according to
the instructions, and then find the largest value.</p>

<a name="My.Solution"></a>
<h2>My Solution</h2>

<p>I wrote this code (refactored):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="kn">from</span> <span class="nn">operator</span> <span class="kn">import</span> <span class="n">lt</span><span class="p">,</span> <span class="n">gt</span><span class="p">,</span> <span class="n">le</span><span class="p">,</span> <span class="n">ge</span><span class="p">,</span> <span class="n">eq</span><span class="p">,</span> <span class="n">ne</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">day8</span><span class="p">(</span><span class="nb">input</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">instructions</span> <span class="o">=</span> <span class="p">[</span><span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">()</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">input</span><span class="o">.</span><span class="n">splitlines</span><span class="p">()]</span>
</span><span class='line'>    <span class="n">register_names</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">instruction</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">for</span> <span class="n">instruction</span> <span class="ow">in</span> <span class="n">instructions</span><span class="p">)</span>
</span><span class='line'>    <span class="n">registers</span> <span class="o">=</span> <span class="p">{</span><span class="n">register_name</span><span class="p">:</span> <span class="mi">0</span> <span class="k">for</span> <span class="n">register_name</span> <span class="ow">in</span> <span class="n">register_names</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">mod_reg</span><span class="p">,</span> <span class="n">mod_op</span><span class="p">,</span> <span class="n">mod_amt</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">cond_reg</span><span class="p">,</span> <span class="n">cond_op</span><span class="p">,</span> <span class="n">cond_const</span> <span class="ow">in</span> <span class="n">instructions</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">eval_cond</span><span class="p">(</span><span class="n">registers</span><span class="p">[</span><span class="n">cond_reg</span><span class="p">],</span> <span class="n">cond_op</span><span class="p">,</span> <span class="n">cond_const</span><span class="p">):</span>
</span><span class='line'>            <span class="n">registers</span><span class="p">[</span><span class="n">mod_reg</span><span class="p">]</span> <span class="o">+=</span> <span class="p">(</span><span class="mi">1</span> <span class="k">if</span> <span class="n">mod_op</span> <span class="o">==</span> <span class="s">&#39;inc&#39;</span> <span class="k">else</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="nb">int</span><span class="p">(</span><span class="n">mod_amt</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nb">max</span><span class="p">(</span><span class="n">registers</span><span class="o">.</span><span class="n">values</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">eval_cond</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">cond_op</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span><span class="s">&#39;&lt;&#39;</span><span class="p">:</span> <span class="n">lt</span><span class="p">,</span> <span class="s">&#39;&gt;&#39;</span><span class="p">:</span> <span class="n">gt</span><span class="p">,</span> <span class="s">&#39;&lt;=&#39;</span><span class="p">:</span> <span class="n">le</span><span class="p">,</span> <span class="s">&#39;&gt;=&#39;</span><span class="p">:</span> <span class="n">ge</span><span class="p">,</span> <span class="s">&#39;==&#39;</span><span class="p">:</span> <span class="n">eq</span><span class="p">,</span> <span class="s">&#39;!=&#39;</span><span class="p">:</span> <span class="n">ne</span><span class="p">}[</span><span class="n">cond_op</span><span class="p">](</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I ran it on the test input, and the test passed. Good! Then I ran it on the
main puzzle input, got a nice looking number, and submitted my result.</p>

<p>Incorrect&hellip; Huh.</p>

<p>Can you spot the mistake?</p>

<p>I later fixed it in line 10, and it relates to types.</p>

<a name="Strong.and.Weak.Typing"></a>
<h2>Strong and Weak Typing</h2>

<p>One of the things I like about Python compared with other dynamically typed
languages is that Python is also strongly typed.</p>

<p>JavaScript &mdash; which is dynamically and weakly typed &mdash; implicitly converts
types, such as from number to string:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="o">&gt;</span> <span class="mi">2</span> <span class="o">+</span> <span class="s">&#39;2&#39;</span>
</span><span class='line'><span class="s">&#39;22&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Python doesn&rsquo;t &mdash; it forces you to choose:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">2</span> <span class="o">+</span> <span class="s">&#39;2&#39;</span>
</span><span class='line'><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span><span class='line'><span class="ne">TypeError</span><span class="p">:</span> <span class="n">unsupported</span> <span class="n">operand</span> <span class="nb">type</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="k">for</span> <span class="o">+</span><span class="p">:</span> <span class="s">&#39;int&#39;</span> <span class="ow">and</span> <span class="s">&#39;str&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">2</span> <span class="o">+</span> <span class="nb">int</span><span class="p">(</span><span class="s">&#39;2&#39;</span><span class="p">)</span>
</span><span class='line'><span class="mi">4</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">str</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39;2&#39;</span>
</span><span class='line'><span class="s">&#39;22&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>But ok, let&rsquo;s try mixed type comparison in JavaScript:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="o">&gt;</span> <span class="mi">3</span> <span class="o">&lt;</span> <span class="s">&#39;5&#39;</span>
</span><span class='line'><span class="n">true</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="mi">30</span> <span class="o">&lt;</span> <span class="s">&#39;5&#39;</span>
</span><span class='line'><span class="n">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>And Python:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">3</span> <span class="o">&lt;</span> <span class="s">&#39;5&#39;</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">30</span> <span class="o">&lt;</span> <span class="s">&#39;5&#39;</span>
</span><span class='line'><span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<p>(!)</p>

<p>In fact, any integer compares less than any string in CPython 2.</p>

<p>This was the reason for my bug &mdash; I kept comparing integer register values to
unparsed text strings:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'>    <span class="k">if</span> <span class="n">eval_cond</span><span class="p">(</span><span class="n">registers</span><span class="p">[</span><span class="n">cond_reg</span><span class="p">],</span> <span class="n">cond_op</span><span class="p">,</span> <span class="n">cond_const</span><span class="p">):</span>
</span></code></pre></td></tr></table></div></figure>


<p>After adding the integer parsing, it worked as expected:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'>    <span class="k">if</span> <span class="n">eval_cond</span><span class="p">(</span><span class="n">registers</span><span class="p">[</span><span class="n">cond_reg</span><span class="p">],</span> <span class="n">cond_op</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">cond_const</span><span class="p">)):</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Why.Does.It.Work.Like.This."></a>
<h2>Why Does It Work Like This?</h2>

<p>It&rsquo;s not that I had expected Python to suddenly do implicit type conversion for
comparison &mdash; I had just forgot the call to <code>int</code> &mdash; even though I had
remembered it while parsing the modification amount <code>mod_amt</code>.</p>

<p>What I would have hoped for was a loud error rather than a subtle bug. It turns
out there is both a reason for the subtle behavior in Python 2 and the option
to get a loud error &mdash; by using Python 3.</p>

<p>From the <a href="https://docs.python.org/2/library/stdtypes.html#comparisons">Python 2 docs</a>:</p>

<blockquote><p>Objects of different types [&hellip;] are ordered consistently but arbitrarily (so
that sorting a heterogeneous array yields a consistent result).</p></blockquote>

<p>From the <a href="https://docs.python.org/3/library/stdtypes.html#comparisons">Python 3 docs</a>:</p>

<blockquote><p>The &lt;, &lt;=, > and >= operators will raise a TypeError exception [&hellip;] when the
objects are of different types that cannot be compared [&hellip;].</p></blockquote>

<a name="Mixed-Type.Operators.Can.Be.Good"></a>
<h2>Mixed-Type Operators Can Be Good</h2>

<p>A little <a href="https://stackoverflow.com/a/2384139">history lesson</a> on stackoverflow.com explains why
heterogeneous lists are not cool anymore, and I&rsquo;m happy about the change in
comparison from Python 2 to 3.</p>

<p>But that does not mean that different types should never be combined with
operators.</p>

<p>Let&rsquo;s take another look at JavaScript:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="o">&gt;</span> <span class="s">&#39;3&#39;</span> <span class="o">*</span> <span class="mi">4</span>
</span><span class='line'><span class="mi">12</span>
</span></code></pre></td></tr></table></div></figure>


<p>And Python:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="s">&#39;3&#39;</span> <span class="o">*</span> <span class="mi">4</span>
</span><span class='line'><span class="s">&#39;3333&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you were expecting this to evaluate to 12 &mdash; either because you came from
a weakly typed language, or because you simply forgot to parse the string as an
integer &mdash; you might also be confused. But I really like this Python behavior.</p>

<p>&ldquo;String multiplication&rdquo;, or rather <em>sequence replication</em>, is much more useful
than heterogeneous list sorting &mdash; so useful that it is acceptable for it to
risk being confusing to newcomers.</p>

<p>And as opposed to string/integer comparison, it&rsquo;s also less likely to lead to
subtle bugs. While the string/integer comparison returned a boolean just like
integer/integer comparison, string/integer multiplication returns a string, and
not the integer a novice might be expecting.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Pixel 2 - First Impressions]]></title>
    <link href="http://blog.erw.dk/2017/11/19/google-pixel-2-first-impressions/"/>
    <updated>2017-11-19T15:58:03+01:00</updated>
    <id>http://blog.erw.dk/2017/11/19/google-pixel-2-first-impressions</id>
    <content type="html"><![CDATA[<p>I just bought a new smartphone. After three HTC models (Desire Z, One X, One
M8) I decided to go for the pure Android experience with a Google Pixel 2 (I
went with the Clearly White, non-XL version). Here are my thoughts after two
weeks.</p>

<p><img class="center" src="http://blog.erw.dk/images/posts/pixel2.png"></p>

<!-- more -->


<p>The first thing I noticed was the <strong>speed</strong>. Booting it up for the first time
took what I remember as mere seconds. Coming from a 3.5 year old smartphone,
this was a big improvement. Not so relevant on a daily basis, but a good first
impression. But the Pixel 2 also feels very snappy in use, especially compared
with my old smartphone burdened by the newest, hungriest apps.</p>

<p>The second great thing I noticed is the <strong>screen</strong>. It looks fine, but what I&rsquo;m
really happy about is its ability to reduce the brightness to a fairly low
level so I don&rsquo;t get blinded in low light conditions. I guess older OLED
smartphones might have been able to do the same, but it&rsquo;s certainly the first
smartphone I have owned where I have been satisfied with the low brightness
level. The automatic brightness adjustment is also excellent. On top of that,
the Night Light feature is great. As a <a href="http://jonls.dk/redshift/">Redshift</a> (similar to
<a href="https://justgetflux.com/">f.lux</a>) user I was happy to see it built in to the OS.</p>

<p>Third, the <strong>battery</strong> life is good. As a test, I skipped charging one night,
and just used it regularly two days in a row. When I went to bed the second
night, it still had 19% left. And that&rsquo;s even with two battery-eating always-on
features enabled: Ambient display (showing date, time, and notification icons)
and Now Playing (which does <em>offline</em> analysis of ambient sound to identify
playing songs).</p>

<a name="The.Stuff.People.Talk.About"></a>
<h2>The Stuff People Talk About</h2>

<p><img class="left" src="http://blog.erw.dk/images/posts/pixel2front.jpg" width="370"></p>

<p>On-device song identification is pretty cool. Another hypey feature is the
&ldquo;Active Edge&rdquo; which let&rsquo;s you <strong>squeeze</strong> the sides of the phone to activate
Google Assistant. It&rsquo;s fun to play with, but not very useful in my opinion.
I have to shift the phone in my hand to squeeze the right area, and half of the
time, the &ldquo;meat&rdquo; of the base of my thumb folds up and taps something unwanted
on the screen. So it&rsquo;s better to just launch Assistant the regular way: by long
pressing the home button.</p>

<p>In other news, the <strong>bezels</strong> have taken flak for being too large for 2017. And
I guess they are. On the plus side, I can comfortably reach both top and bottom
of the screen with my thumb, and they have room for front-facing stereo
speakers.</p>

<p>They didn&rsquo;t leave room for a <strong>headphone jack</strong>, though. The phone&rsquo;s packaging
included a (somewhat bulky) converter but no wired USB C headphones &mdash; to get
more people to look at the <a href="https://www.google.com/search?q=Pixel+Buds">Pixel Buds</a>, I guess.</p>

<p>Finally, the Pixel 2&rsquo;s <strong>camera</strong> is supposedly really, really good. I don&rsquo;t
disagree so far, but I&rsquo;ll know more when I get around to trying it somewhere
more picturesque than my desk.</p>

<a name="Small.Annoyances"></a>
<h2>Small Annoyances</h2>

<p>Overall, I&rsquo;m fairly satisfied with the Pixel 2. But there are a few small
annoyances:</p>

<ul>
<li>No support for <a href="https://en.wikipedia.org/wiki/Miracast">Miracast</a> - only Chromecast</li>
<li>The Pixel 2 is not officially for sale in Denmark, which means that the
<a href="https://store.google.com/product/pixel_2">Google Store</a> webpage will not even acknowledge that the Pixel 2 or
its accessories exist, if you access it from Denmark without tricks</li>
<li>The ambient display, which is white text on a black background, <em>strobes</em>,
which you can see when you move the phone around</li>
<li>Dust and debris gets stuck in the speaker grills
<span class='caption-wrapper right'><img class='caption' src='http://blog.erw.dk/images/posts/android8_notification_collapse.png' width='' height='' alt='Areas for expanding/collapsing notifications'><span class='caption-text'>Areas for expanding/collapsing notifications</span></span></li>
<li>The device/screen vibrates when the speakers are playing, which can be felt
in the 120&ndash;700 Hz range</li>
<li>The power button and volume rocker require too much pressure to press</li>
<li>Most Android 8 notifications can be expanded/collapsed, to which a large
part of their surface is reserved. This means that unlike older Android
notifications, I kinda have to aim when I tap them.</li>
<li>Going for pure Android is not as cool as I had imagined, and the default
launcher and dialler are disappointing</li>
<li>Since the bezels are there anyway, a fingerprint reader on the front would be
nice, for those times I want to use the phone flat on the table</li>
</ul>


<p>Come to think of it, many of these feel like a step down from my HTC One M8.
But they&rsquo;re not a big problem compared to the improvements in speed, screen
blackness, camera, and battery, all in a thinner, lighter body.</p>

<p>I&rsquo;ll get to see over the coming months and years if the &ldquo;full Google
experience&rdquo; is worth the price. At least I should be getting updates quickly
for <a href="https://www.androidauthority.com/google-pixel-2-xl-update-804779/">three years</a>, which is better than many OEMs. I just hope the
Pixel 2 will stay snappy as the updates come.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Roland JP-08 Review]]></title>
    <link href="http://blog.erw.dk/2017/06/25/roland-jp-08-review/"/>
    <updated>2017-06-25T17:06:23+02:00</updated>
    <id>http://blog.erw.dk/2017/06/25/roland-jp-08-review</id>
    <content type="html"><![CDATA[<p>In the early 1980s Roland produced a number of synthesizers that aged into
classics. The flagship Jupiter-8 is perhaps the most famous, used by electronic
artists such as Jean Michel Jarre, Depeche Mode, and Moby, as well as pop
artists like Michael Jackson, Madonna, and Abba.</p>

<p>Today, a used Jupiter-8 in good condition can cost more than a new top end
modern synthesizer, which is to say a lot. Luckily, in late 2015 Roland
released miniature versions of these classics, at relatively affordable prices.
Jupiter-8 became JP-08, and I got to own a little piece of music history.</p>

<p><span class='caption-wrapper'><img class='caption' src='http://blog.erw.dk/images/posts/boutiques.jpg' width='' height='' alt='Three originals (Juno-106, Jupiter-8, JX-3P) above the three new 'Boutique' versions (JU-06, JP-08, JX-03)'><span class='caption-text'>Three originals (Juno-106, Jupiter-8, JX-3P) above the three new &lsquo;Boutique&rsquo; versions (JU-06, JP-08, JX-03)</span></span></p>

<p>It&rsquo;s a bit late for a review, one and a half year after the release, but on the
other hand, the Jupiter-8 came out before I was born, so in comparison, the new
version is still very recent!</p>

<!-- more -->


<a name="Sound.in.a.Box"></a>
<h2>Sound in a Box</h2>

<p>One might ask why you need a box like this when you can generate the same
sounds in your computer. But the new Roland releases are in fact just software
in boxes &mdash; digital emulations of the original electronics. The point is that
a box with the right buttons, knobs, and sliders makes the experience of sound
exploration tactile and immediate.</p>

<p>Plus, in this age of multi purpose devices, there is just something fascinating
about a device that does just one thing, does it well, and doesn&rsquo;t let you
connect to Facebook.</p>

<div class="video-container">
<iframe src="//www.youtube.com/embed/C1zdcqoe8qg?feature=player_detailpage" frameborder="0" allowfullscreen></iframe>
</div>


<a name="A.Small.Box"></a>
<h2>A Small Box</h2>

<p>Compared with the Jupiter-8, the JP-08 is tiny. It has the footprint of an A4
sheet of paper (somewhere between letter and legal for you North Americans),
and that&rsquo;s <em>with</em> the optional mini-keyboard attached. Since it can also be
powered from batteries, that means it&rsquo;s <em>portable</em>. You can bring it on trips,
to the park, or just the sofa. (Or bring it to bed, according to
<a href="https://www.youtube.com/user/junkiexlofficial">JunkieXL</a>!)</p>

<p>As part of the portability, the unit even has a built-in speaker so you can
play it without attaching a sound system or headphones. As practical as this
is, the speaker has no bass and a tendency to make the chassis rattle and
resonate. So I recommend skipping it altogether because that will sound much
better and make you appreciate the unit more.</p>

<p><img class="center" src="http://blog.erw.dk/images/posts/jp-08.jpg"></p>

<a name="Too.Small.a.Box"></a>
<h2>Too Small a Box</h2>

<p>The portable coolness however comes at a cost. To fit all of the controls of
the Jupiter-8 into such a small areal, they have been arranged in two rows.
Thus the sliders only have a throw of 1 cm, which means they require delicate
hand movements. This detracts from the overall hand-on experience, even though
they are usable with patience. The worst part is that it&rsquo;s very hard to sweep
the filter or pulse width smoothly.</p>

<p>However diminutive they are, controls dedicated to exactly one sound parameter
provide much of the immediacy of the overall experience. Unfortunately, the
auxiliary controls are tucked away under button combinations &mdash; a few
labelled, most not.</p>

<ul>
<li>The solo/unison/poly mode buttons have moved from dedicated buttons to
(labelled) combinations. This is acceptable because this is not something
you&rsquo;re likely to need to switch quickly.</li>
<li>The portamento settings also glided (pun intended) into a combination, with
the glide time set by sliding the modulation ribbon with the &lsquo;dual&rsquo; button
held down. This is a bit sad, since I could imaging tweaking the glide time
while playing.</li>
<li>It&rsquo;s worse for features native to the JP-08 such as delay effect parameters,
transpose, pitch bend range, MIDI channel, and especially keyboard octave
selection which is not easily done while playing the mini keyboard.</li>
<li>Also, the pitch bend and modulation features have devolved: The VCO/VCF
destination sliders and selectors have disappeared, and the crude ribbon
makes it difficult to do smooth or precise pitch bends.</li>
</ul>


<a name="Better.With.a.MIDI.Controller"></a>
<h2>Better With a MIDI Controller</h2>

<p>Many of the above problems can be solved by a separate MIDI controller:</p>

<ul>
<li>More octaves can be played directly, or at least octaves can be selected more
easily</li>
<li>Bigger knobs and sliders can be used to obtain smoother sweeps and precise
parameter input</li>
<li>The portamento glide time can be adjusted with a single knob or slider</li>
<li>The Jupiter-8 hold (sustain) feature, missing from the JP-08, can be mapped
to a button</li>
<li>The Jupiter-8 arpeggiator, also sadly missing from the JP-08, can be restored
with an arpeggiating controller such as the Arturia KeyStep</li>
</ul>


<p>Using a separate controller defeats the portability, but seen from the bright
side it just means you can switch between portability and better control.</p>

<a name="Signal.Routing"></a>
<h2>Signal Routing</h2>

<p>Also lost in the miniaturization were the little orange signal routing hints
scattered around the original Jupiter-8 panel:</p>

<p><span class='caption-wrapper'><img class='caption' src='http://blog.erw.dk/images/posts/jupiter-8-panel.jpg' width='' height='' alt='Image used with permission from Nikolaus Riehm / Studio Repair'><span class='caption-text'>Image used with permission from Nikolaus Riehm / Studio Repair</span></span></p>

<p>I didn&rsquo;t know of these when I got my JP-08, so it was somewhat confusing. The
source mix knob was the first one I figured out: It mixes between the two only
sound sources &mdash; the two oscillators.</p>

<p>Then there&rsquo;s also routing between the two oscillators. VCO-1 has a &lsquo;cross mod&rsquo;
slider and VCO-2 has a &lsquo;sync&rsquo; switch. What&rsquo;s missing from the panel is the
direction of the routing (and even that routing is going on, if you don&rsquo;t know
what &lsquo;cross mod&rsquo; or &lsquo;sync&rsquo; means).</p>

<p>Cross modulation allows the pitch of VCO-1 to be affected by the pitch of
VCO-2, creating crazy bends or new timbres, depending on the frequency of
VCO-2. Sync allows VCO-2 to return to the start of its cycle at the frequency
of VCO-1, creating new timbres out of existing wave forms. After figuring out
the routing, the JP-08 made a lot more sense.</p>

<p>Perhaps most difficult is keeping track of what the two envelopes control.
ENV-1 can affect the pulse width of both oscillators, the frequency of either
or both oscillators, and the filter cutoff frequency. ENV-2 controls the VCA
and the filter frequency. The filter has a switch choosing which envelope
currently controls the filter.</p>

<a name="Docking.Looks.Better"></a>
<h2>Docking Looks Better</h2>

<p><img class="center" src="http://blog.erw.dk/images/posts/jp-08_k-25m.jpg"></p>

<p>The JP-08 itself is a sturdy metal panel on top of a plastic box. In its
unmounted form it appears somewhat naked. Adding the optional K-25m keyboard
module really helps completing the look of the device.</p>

<p>Before I got the keyboard module, the device looked somehow messy and
unfinished on my desk. Now, it makes me smile when I look at it. So I&rsquo;m happy
I got the keyboard module even though it is both expensive and only mediocre as
a keyboard. For use mainly with an external keyboard, the synth can also dock
in the keyboard-less, cheaper DK-01 dock.</p>

<p>Also, the metal surfaces have a satisfying ability to not pick up fingerprints.</p>

<a name="More.Like.JP-04"></a>
<h2>More Like JP-04</h2>

<p>The &lsquo;8&rsquo; in Jupiter-8 meant eight voices. The JP-08 only has four voices,
meaning only 4 notes can sound at the same time. This has irritated a lot of
people, including me. I mean, it&rsquo;s not that I play 9th chords all the time, but
Roland, did you really need to go for the minimum effort here, to try to sell
more boxes?</p>

<p>Roland happily claims that you can connect more units to increase the polyphony
by four each time. This is better than nothing, but it&rsquo;s also only partially
true. Because while you can play 4<em>n</em> notes <em>simultaneously</em>, there&rsquo;s still
voice stealing when you play notes sequentially (which is called&hellip; music&hellip;
you might have heard of it, Roland). That means that if you play a sound that
fades out gradually after lifting your finger from the key, that tail will be
cut off by the next note that starts, if no unused voice is available within
the first 4, <strong>not</strong> 4<em>n</em>, voices. <a href="https://www.youtube.com/watch?v=Ejpw7GsyAGg">Here&rsquo;s</a> a demonstration.</p>

<p>Since the JP-08 is a (really good) digital simulation of the original analog
electronics, giving it eight voices shouldn&rsquo;t be that hard. Maybe you&rsquo;d need
a better processor, but compared with the costs of development and production,
that cost should be minimal. And you&rsquo;d have happier users. Then perhaps,
instead of buying another JP-08 and feeling like an idiot, I might have bought
one of the other Boutiques.</p>

<a name="Patch.Selection"></a>
<h2>Patch Selection</h2>

<p><span class='caption-wrapper'><img class='caption' src='http://blog.erw.dk/images/posts/jp-08-16.jpg' width='' height='' alt='The patch selection button rows of the JU-06 and the JP-08'><span class='caption-text'>The patch selection button rows of the JU-06 and the JP-08</span></span></p>

<p>The four voices bring another annoyance, which we need to take a step back to
understand. The Juno-106, JU-06, Jupiter-8, and JP-08 all have 16 buttons used
for patch selection. The JU-06 has eight bank buttons and eight patch buttons,
leading to a total of 64 patches. (The Juno-106, which I own, additionally has
a group selector multiplying everything by two for 128 patches in total.) On
the Juno-106 and JU-06, a single button press can switch the bank number (the
first digit) and the patch number (the last digit) independently (as well as
the group, on the Juno-106), which is very nice. (The Juno-106 also has a patch
increment pedal input, but I digress).</p>

<p>The JP-08 has eight patch number buttons and eight patch preset buttons.
Choosing one of the 64 patches always requires two consecutive presses of the
patch number buttons. A patch preset on the JP-08 is a layering of two patches
sounding simultaneously, and there are only eight of these. This is also how it
was on the Jupiter-8, except that a Jupiter-8 patch preset could also be
a left/right split between two patches instead of a layering.</p>

<p>A patch preset cuts the polyphony in half, since each note you play uses two
voices. Thus, with the JP-08 having only four voices and no split option, patch
presets are much less useful. You can&rsquo;t even play real chords! You can still
play leads and power chords with your layered sound. However, this could be
accomplished with the &lsquo;dual&rsquo; and &lsquo;upper/lower&rsquo; buttons without reserving eight
buttons for patch presets. Instead, it could have used the faster bank+patch
system like the Juno. (Or better yet, it could just have had eight voices.)</p>

<p>There is one final snafu with the 16 buttons and the way they relate to the
delay effect parameters (level, time, and feedback). Because changing the
parameters is difficult while playing, you are not likely to notice it, but
changing the delay time also flushes the delay buffer. However, if you control
the delay parameters with a knob on a MIDI controller, this becomes
embarrassingly obvious.</p>

<a name="In.Conclusion"></a>
<h2>In Conclusion</h2>

<p>The JP-08 is fun and sounds really good. But there are so many things that feel
like they could have been much better with small changes.</p>

<p>Eight voices, obviously. Then the sliders could have been much better with
a small increase in the height of the box. A small increase in width could have
allowed space for direct control of many more parameters. And an arpeggiator!
Not to mention full width keys or more mini keys. A normal pitch bend and mod
stick would also be great, but this might make the unit deeper.</p>

<p>Dimensions multiply, and the unit would quickly become much bigger and less
cute. But it would also be much better and less toy-like. The tiny Boutique
format just seems to go better with machines with fewer controls the Juno-106
or the VP-330.</p>

<p>Seeing newer Boutique releases having features that the JP-08 should have had
also feels like betrayal, after throwing money at a first generation Boutique
model. We&rsquo;re talking tempo synced LFO, tempo synced delay, sequencer note
slides, sequencer song mode, and sequencer <em>parameter locks</em>! It hurts, Roland.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Work Helps Me Beat Procrastination]]></title>
    <link href="http://blog.erw.dk/2017/01/22/work-helps-me-beat-procrastination/"/>
    <updated>2017-01-22T17:23:59+01:00</updated>
    <id>http://blog.erw.dk/2017/01/22/work-helps-me-beat-procrastination</id>
    <content type="html"><![CDATA[<p>Back in school, I put off essay writing until the night before the due date. In
gymnasium/high school, I put off assignments until the <em>morning</em> of the due
date. In my first years of university it went so far that a student counsellor
suggested that maybe university wasn&rsquo;t for me.</p>

<p>Despite&mdash;or perhaps because of&mdash;that, I pulled myself together. After passing
some courses that especially triggered my procrastination, I did much better,
and eventually emerged with a master&rsquo;s degree in software engineering and a PhD
in computer science.</p>

<p>But that does not mean I had completely overcome procrastination, especially
not during the PhD study. It was not until <a href="http://blog.erw.dk/2016/05/09/leaving-academia/">leaving academia</a> for the
IT business that I experienced what it is like to get control of my
procrastination. (It&rsquo;s amazing, by the way.)</p>

<!-- more -->


<a name="My.Job"></a>
<h2>My Job</h2>

<p>It&rsquo;s ironic that procrastination means postponing work, but my job actually
helps me avoid procrastination. I&rsquo;ll try to figure out why that is. To that
end, I&rsquo;ll first describe my job. It includes:</p>

<ul>
<li>Designing software solutions meeting the clients&#8217; requirements.</li>
<li>Implementing (programming) software solutions according to designs approved
by the clients.</li>
<li>Registering the time spent on all tasks in our time tracking system.</li>
</ul>


<a name="Doing.It.for.Others"></a>
<h2>Doing It for Others</h2>

<p>There are many aspects of the above that contribute to procrastinating less.
One of them, I think, is that this is the first time in my education and work
life that people who ask me to do something want me to do it for <em>their</em> sake.</p>

<p>Beating procrastination often requires external deadlines and reasons. In
education of all levels, teachers ask us to do exercises, homework,
assignments, semester projects, theses. But while they ask you, and systems may
be in place to punish those who do not comply, the requests are not truly
external. The purpose is that <em>you</em> learn, not (necessarily) that <em>they want</em>
to read your work.</p>

<p>Compulsory education contains more external pressure to learn than higher
education (which is probably why procrastination gets worse the higher you get
in the education system). In a job, you get back some external pressure, and
this time they care more about what they get out of it than what you get out of
it.</p>

<p>Although external reasons (and payment!) are good reasons to work, they are
unfortunately not enough to fight procrastination.</p>

<a name="Implementation.Tasks.are.Well-Defined"></a>
<h2>Implementation Tasks are Well-Defined</h2>

<p>One of the causes for procrastination is perfectionism. Often the desire to
find the perfect solution to a problem puts so much pressure on you that you do
not even succeed in finding a good-enough solution. Simply taking a step
towards finding the perfect solution feels like a futile step towards
a possibly unachievable goal, so let&rsquo;s just look a cat videos on YouTube
instead.</p>

<p>Working to implement a preapproved design means that the biggest decisions have
already been made, whether by yourself or by others, and locked in by the
client. Now your task is not to solve the original business problem, but simply
to implement the designed solution in the alotted time.</p>

<p>&ldquo;Simply&rdquo; does not mean to imply that it&rsquo;s easy. A high level of expertise is
required to write correct, robust, efficient, and maintainable code. But with
well-defined goals for the programming, the task is constrained enough that
a skilled procrastinator (skilled at programming, that is) can attack the task
head-on rather than postpone it.</p>

<p>I do still get ideas to change the design while working to implement it, but
the bureaucracy involved in changing it is actually a good thing here because
it keeps me from trying, unless I&rsquo;m convinced it&rsquo;s necessary. It&rsquo;s better to
have a good solution done on time than a perfect solution that isn&rsquo;t.</p>

<a name="Implementation.Tasks.are.Divisible"></a>
<h2>Implementation Tasks are Divisible</h2>

<p>It&rsquo;s not just that implementation tasks are easier when the design is fixed.
It&rsquo;s also that the they can be broken into smaller parts that are even easier
to do.</p>

<p>The first subtask is to understand the design and hold a mental model of it.
Depending on the level of detail in the design description, this can itself
turn into clarifying discussions with the author, but that is also fairly
well-defined.</p>

<p>Many of the remaining subtasks are taken from a repertoire that includes:</p>

<ul>
<li>Adding required tables and fields to the database</li>
<li>Identifying required data and writing queries to retrieve it</li>
<li>Adding the business logic</li>
<li>Testing the solution, and adding error handling and logging</li>
</ul>


<a name="Time.Tracking"></a>
<h2>Time Tracking</h2>

<p>Next up is the time tracking we are required to do. While working a task, any
task, we register the time spent in an issue tracker. Our issue trackers are
then connected to the time tracking system, and in the time tracking system
each week has to sum up to the number of hours our contract states before we
can &ldquo;close&rdquo; that week. It&rsquo;s cold, mechanical, and unsympathetic, and it works
wonders in beating procrastination.</p>

<a name="Design.Tasks.Can.Make.You.Proud"></a>
<h2>Design Tasks Can Make You Proud</h2>

<p>Design is the process of turning the client&rsquo;s requirements into a consistent
and implementable description in terms of the business domain. Sometimes this
requires several iterations with client feedback and further changes before the
design is approved. A design can also be a change to a previously implemented
module or feature.</p>

<p>If it&rsquo;s a change request, it&rsquo;s fairly simple: read up on documentation and code
until you hold a good-enough mental model of the existing functionality. From
there, seeing where changes are required, is often obvious.</p>

<p>If it&rsquo;s a new module or feature, it may be harder to get started. That&rsquo;s where
one of the risks of procrastination hide. However, two things can mitigate
this. The first is <em>structured procrastination</em>: While putting off the daunting
design task, work on something else productive like a straightforward
implementation task (as opposed to watching cat videos on YouTube). At least
you&rsquo;re doing something productive.</p>

<p>The second thing is that once you do get it cracked and have your initial idea
for the general direction of the design, a feeling of ownership and pride
starts to grow. This will make it much easier to keep the focus.</p>

<p>All in all, my job helps me keep my procrastination in check, which I&rsquo;m very
happy about. I hope all you other procrastinators out there can see that your
circumstances can help you beat procrastination, if you haven&rsquo;t cracked the
code yet.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn Vim the Harder Way, Part II]]></title>
    <link href="http://blog.erw.dk/2016/08/28/learn-vim-the-harder-way-part-ii/"/>
    <updated>2016-08-28T13:29:00+02:00</updated>
    <id>http://blog.erw.dk/2016/08/28/learn-vim-the-harder-way-part-ii</id>
    <content type="html"><![CDATA[<p>In a <a href="http://blog.erw.dk/2016/05/16/learn-vim-the-harder-way/">previous post</a> I introduced learning <a href="http://en.wikipedia.org/wiki/Vim_%28text_editor%29">Vim</a> the harder way. To summarize:</p>

<ul>
<li><strong>The easy way</strong>: Use the arrow keys for cursor movement</li>
<li><strong>The hard way</strong>: Don&rsquo;t use arrow keys; use <em>hjkl</em> in <em>normal mode</em></li>
<li><strong>The harder way</strong>: Don&rsquo;t use <em>hjkl</em>; learn Vim&rsquo;s multitude of other motion
commands</li>
</ul>


<p>Now, there&rsquo;s nothing wrong with using the arrow keys per se, but it very often
leads to staying in <em>insert mode</em> most of the time and thus missing out on all
the stuff you can do from <em>normal mode</em>. As someone <a href="http://www.viemu.com/a-why-vi-vim.html">wrote</a> about vi/Vim:</p>

<blockquote><p>your keyboard becomes a huge specialized text-editing gamepad with almost
a hundred buttons.</p></blockquote>

<p>There&rsquo;s nothing wrong with using <em>hjkl</em> either, in fact they&rsquo;re very good
because they force you to use <em>normal mode</em> as your, well, normal mode.
However, normal mode only really provides an advantage if you harness its power
and go beyond the basics. For motions, that involves reducing your use of
<em>hjkl</em>. In this part we see how to do that for inserting and deleting text.</p>

<!-- more -->


<a name="Insert.Without..em.i..em."></a>
<h2>Insert Without <em>i</em></h2>

<p>One of the first things Vim users learn is that you type <em>i</em> to go to insert
mode (where you can write text). Just like <em>hjkl</em>, <em>i</em> is a basic command. And
just like there are many other motions beyond <em>hjkl</em>, there are more commands
that bring you to insert mode:</p>

<ul>
<li><em>a</em> appends text after the current character (like <em>i</em> inserts before it).</li>
<li><em>I</em> and <em>A</em> insert text at the beginning and end of the line, respectively,
no matter where on the line your cursor is.</li>
<li><em>o</em> and <em>O</em> &ldquo;open&rdquo; a new blank line for writing immediately after and before
the current line, respectively (no matter where on the line your cursor is).
When used for programming (for example with <code>:set autoindent</code>), &ldquo;open&rdquo; also
does intelligent indentation.</li>
<li><em>gi</em> inserts text where you last stopped inserting text, no matter where in
the buffer the cursor now is.</li>
</ul>


<p>Try disabling <em>i</em> with <code>:nmap i &lt;nop&gt;</code>, or perhaps with a reminder of what to
do instead: <code>:nnoremap i :echoerr "Try a/I/A/o/O/gi instead!"&lt;cr&gt;</code>. It&rsquo;s really
annoying, but that&rsquo;s the point. Once you have a basic grasp of the other insert
mode commands, you can remove the mapping again with <code>:nunmap i</code>.</p>

<p>By the way, I lied a bit earlier. The command <em>I</em> doesn&rsquo;t insert at the
beginning of the line. It inserts immediately before the first non-whitespace
character of the line, which is often convenient, not least in programming. But
you can still tell Vim to <em>really</em> insert at the beginning of the line with the
command <em>gI</em>. Vim is thorough like that.</p>

<a name="Delete.Without.Backspace"></a>
<h2>Delete Without Backspace</h2>

<p>Now you know a flexible set of commands to go to insert mode. Once you&rsquo;re
there, there&rsquo;s one thing you should not to too much (beside use the arrow
keys), and that is: backspace. Like many other commands, it is a basic
operation good in some cases and inefficient in others. It&rsquo;s good for
correcting a typo, but deleting words and anything bigger is like digging with
a teaspoon. So I&rsquo;d recommend removing the temptation to use the teaspoon by
disallowing backspacing past the position where you started insert mode:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>set backspace-=start</span></code></pre></td></tr></table></div></figure>


<p>You can still correct typos while you type. In normal mode you can also delete
a few chars with the <em>x</em> and <em>X</em> commands which work like delete and backspace
do in insert mode.</p>

<p>For anything bigger, use the delete command <em>d</em>. It takes a motion or text
object. For example, <code>dw</code> deletes from the cursor position until the start of
the next word, <code>dt'</code> deletes until the next apostrophe, and <code>dap</code> deletes
a paragraph (the one the cursor is currently in). All in one step.</p>

<p>Besides being more efficient, doing it as a single command has the advantage
that it can be undone as a single command (<em>u</em>), and, perhaps more importantly,
that you get the whole thing copied so you can insert it later (in Vim, delete
and cut are the same thing).</p>

<a name="Delete.and.Insert.at.the.Same.Time"></a>
<h2>Delete and Insert at the Same Time</h2>

<p>In the previous section I suggest staying in normal mode when removing text.
But what if you want to both delete <em>and</em> insert text? Just like Vim provides
many commands than combine moving the cursor and inserting text (<em>a</em>, <em>I</em>, <em>A</em>,
etc.), it also provides commands that combine deleting and inserting:</p>

<ul>
<li><em>r</em> replaces the character under the cursor with another character of your
choosing</li>
<li><em>R</em> drops you into replace mode where you overwrite/replace text until you
return to normal mode with Esc.</li>
<li><em>s</em>/<em>S</em> substitute the character/line under the cursor with any text (insert
mode)</li>
<li><em>c</em> changes text into other text: It first awaits your choice of motion or
text object to delete and then drops you into insert mode. For example, <code>c)</code>
changes from the cursor position until the end of the sentence and <code>ci"</code>
changes the whole content of the double quote delimited string the cursor is
in.</li>
<li><em>C</em> changes from the cursor position to the end of the line (similarly to how
<em>D</em> deletes from the cursor position to the EOL while <em>d</em> takes a motion or
text object)</li>
</ul>


<p>If you&rsquo;re comfortable with <em>x</em>/<em>X</em>/<em>d</em>, but not the replace/substitute/change
commands, I&rsquo;d recommend something crazy: Disable <em>x</em>, <em>X</em>, and <em>d</em>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nmap x &lt;nop&gt;
</span><span class='line'>nmap X &lt;nop&gt;
</span><span class='line'>nmap d &lt;nop&gt;</span></code></pre></td></tr></table></div></figure>


<p>Instead, the stuff you want to delete, you can substitute/change into nothing
until the substitute/change commands comes naturally to you.</p>

<a name="Learn"></a>
<h2>Learn</h2>

<p>The point of temporarily disabling commands is not to say they&rsquo;re bad, because
they&rsquo;re not. They are strictly necessary parts of Vim. The point is to <em>also</em>
learn the more powerful and flexible commands. I have only covered the basics
of normal mode, but read <code>:help</code>, <code>:help user-manual</code>, and <a href="http://stackoverflow.com/questions/1218390/what-is-your-most-productive-shortcut-with-vim/1220118#1220118">this</a> to
uncover all the cool stuff you can do.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[INSIDE]]></title>
    <link href="http://blog.erw.dk/2016/07/31/inside/"/>
    <updated>2016-07-31T19:53:27+02:00</updated>
    <id>http://blog.erw.dk/2016/07/31/inside</id>
    <content type="html"><![CDATA[<p>I don&rsquo;t game a lot, but after seeing rave reviews, I knew I had to try
Playdead&rsquo;s <a href="http://www.playdead.com/games/inside/">INSIDE</a>.</p>

<div class="video-container">
<iframe src="//www.youtube.com/embed/op4G1--kb-g?rel=0&showinfo=0&feature=player_detailpage" frameborder="0" allowfullscreen></iframe>
</div>


<p>And, like many others, I was blown away.</p>

<!-- more -->


<p>Above all stands the eerie, mesmerizing, spine-chilling atmosphere. It&rsquo;s
a combination of the visuals, the sounds, the story. All three are tightly
integrated as well as dark, minimalist, mysterious, foreboding and
awe-inspiring.</p>

<p><img src="http://www.playdead.com/css/img/inside/screenshots/INSIDE_05.jpg"></p>

<p>The <a href="https://en.wikipedia.org/wiki/2.5D">two-and-a-half dimensions</a> are amazing. The game uses 2D controls in
a 3D world. The third dimension is an integral part of the game even though the
protagonist cannot enter it. First of all, it tells the most of the story.
Second, while the boy is stuck in 2D, antagonists can move in 3D which is used
in puzzles or to introduce them before they interact with you. When a dog
chases you, you can hear it barking as it appears in the distance and races
towards you. If it catches you, it does not feel unfair &mdash; only terrifying.</p>

<p>The camera is also used to great effect. While the camera always follows the
protagonist, it subtly, gradually changes perspective to draw attention to
puzzle elements and places you are going. The camera also zooms in and out
depending on the scene. I vividly remember the zoomed-in view of trying to fend
off a pack of dogs with a torch, or the zoom-out of an underwater expanse
making me feel small and vulnerable while also coaxing me into exploring.</p>

<p><span class='caption-wrapper'><img class='caption' src='http://www.playdead.com/css/img/inside/screenshots/INSIDE_06.jpg' width='' height='' alt='The camera perspective reveals a drainpipe that will become relevant in the near future.'><span class='caption-text'>The camera perspective reveals a drainpipe that will become relevant in the near future.</span></span></p>

<p>The realism of movements is also amazing. The physically unrealistic platformer
classic of changing direction in mid-air does not work here. But it&rsquo;s also in
details such as running in mud slowing the boy down. He can stumble and fall.
When climbing a ladder, his hands and feet will touch each individual rung.
Climbing and swinging a rope looks realistic. While underwater, it takes time
to change direction.</p>

<p>In general, I just loved the attention to detail. His breathing chest movements
match the sound of his breathing. And his breathing matches the tension of the
situation. In this regard, I think that coming up short of breath from a deep
dive should also affect his breathing, but it doesn&rsquo;t. This seems like a minor
oversight in what is otherwise a parade of perfection.</p>

<p><img src="http://www.playdead.com/css/img/inside/screenshots/INSIDE_04.jpg"></p>

<p>The details are not just about the boy&rsquo;s movements. There are many subtleties
that you only find by chance. For example, while swinging from a lamp cord,
sparks will fly from the lamp on the off chance that it hits the wall. A blast
of air will throw zombies off their feet in the rare case they are standing
nearby. Some details are even hidden on purpose. There is a cord you can climb,
but when you stand under it, it (and the boy) is obscured by a pillar in the
foreground.</p>

<p>Finally, I love the complete lack of words in the game, both spoken and
written. The gameplay needs no explanation because the whole thing is just
a beautifully crafted progression of elements. The story is very open to
interpretation. I think you should play the game and see for yourself!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn Vim the Harder Way]]></title>
    <link href="http://blog.erw.dk/2016/05/16/learn-vim-the-harder-way/"/>
    <updated>2016-05-16T14:59:23+02:00</updated>
    <id>http://blog.erw.dk/2016/05/16/learn-vim-the-harder-way</id>
    <content type="html"><![CDATA[<p>The first lesson of the official <a href="http://en.wikipedia.org/wiki/Vim_%28text_editor%29">Vim</a> tutorial (&ldquo;vimtutor&rdquo;) introduces
the navigation keys <em>h</em>, <em>j</em>, <em>k</em>, <em>l</em>. This is where the user might go
&ldquo;What?&rdquo;, followed perhaps by &ldquo;What&rsquo;s wrong with the arrow keys?&rdquo; The tutorial
has this answer: &ldquo;The cursor keys should also work. But using hjkl you will be
able to move around much faster, once you get used to it. Really!&rdquo;</p>

<p><img class="center" src="http://blog.erw.dk/images/posts/vimtutor.png"></p>

<p>From here, I think most people continue using Vim with the arrow keys and
perhaps mouse because that&rsquo;s what they&rsquo;re used to, and why change something
that works? Users who actually use hjkl from this point onwards (either by
sheer willpower or by disabling the mouse and arrow keys) are learning Vim &ldquo;the
hard way&rdquo;.</p>

<p>Let me say from the beginning that I agree with the tutorial: Using hjkl <em>is</em>
better. But for most people the hard way is not the right way. Learning Vim
<a href="http://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/">progressively</a> is more fun and will allow you to switch to Vim
while still <a href="http://yehudakatz.com/2010/07/29/everyone-who-tried-to-convince-me-to-use-vim-was-wrong/">getting work done</a>. In addition to the official
vimtutor, you can also try an <a href="http://www.openvim.com/tutorial.html">interactive tutorial</a>, or even an
<a href="http://vim-adventures.com/">adventure game</a>.</p>

<p>If, however, you are going for the hard way, let me propose learning Vim the
<em>harder</em> way!</p>

<!-- more -->


<a name="Learning.Vim.the.Harder.Way"></a>
<h2>Learning Vim the Harder Way</h2>

<p>The harder way is to use neither arrow keys <em>nor</em> hjkl.</p>

<p>So what do you do instead? Finding out is exactly the point of this exercise.
Vim has a very rich set of motion commands (see <code>:help motion.txt</code> in Vim or
<a href="https://raw.githubusercontent.com/vim/vim/master/runtime/doc/motion.txt">here</a>) that you might never come across if you can get by with hjkl
&mdash; just like you wouldn&rsquo;t learn hjkl if you kept using the arrow keys.</p>

<p>While writing this article, I experimented with various variations on this.
After disabling hjkl, it took some time before I noticed that the sideways
motions <em>h</em> and <em>l</em> were missing (i.e., I use other, more direct motions more).
On the other hand, the up-down motions <em>j</em> and <em>k</em> in many cases <em>are</em> the most
efficient motions when combined with counts (see <code>:help count</code>) and relative
line numbers. Therefore, I do not recommend disabling <em>j</em> and
<em>k</em> completely. But to nudge you into using them intelligently, I suggest
disabling the &ldquo;repeat keys&rdquo; feature in your OS keyboard settings:</p>

<p><img class="center" src="http://blog.erw.dk/images/posts/repeat_keys.png"></p>

<p>When this is done, disable the mouse and <em>h</em> and <em>l</em> as well as the arrow keys
in both normal mode and insert mode:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>set nocompatible
</span><span class='line'>set mouse=
</span><span class='line'>map h <span class="nt">&lt;nop&gt;</span>
</span><span class='line'>map l <span class="nt">&lt;nop&gt;</span>
</span><span class='line'>map <span class="nt">&lt;left&gt;</span> <span class="nt">&lt;nop&gt;</span>
</span><span class='line'>map <span class="nt">&lt;down&gt;</span> <span class="nt">&lt;nop&gt;</span>
</span><span class='line'>map <span class="nt">&lt;up&gt;</span> <span class="nt">&lt;nop&gt;</span>
</span><span class='line'>map <span class="nt">&lt;right&gt;</span> <span class="nt">&lt;nop&gt;</span>
</span><span class='line'>imap <span class="nt">&lt;left&gt;</span> <span class="nt">&lt;nop&gt;</span>
</span><span class='line'>imap <span class="nt">&lt;down&gt;</span> <span class="nt">&lt;nop&gt;</span>
</span><span class='line'>imap <span class="nt">&lt;up&gt;</span> <span class="nt">&lt;nop&gt;</span>
</span><span class='line'>imap <span class="nt">&lt;right&gt;</span> <span class="nt">&lt;nop&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first command, <code>set nocompatible</code>, changes many options from vi compatible
to sane.</p>

<p>You can try these commands in Vim by typing &lsquo;:&rsquo; to go command line mode, typing
the command, and then pressing Enter. For example: <code>:map h &lt;nop&gt;</code> followed by
Enter. This lasts until you close Vim or undo it with <code>:unmap h</code>. To make it
stick, put the commands in your vimrc configuration file (see <code>:help vimrc</code>),
and they will be loaded each time you start Vim, until you remove them from
your vimrc again.</p>

<a name="Start.Learning"></a>
<h2>Start Learning</h2>

<p>At first, the above settings are a pain in the gluteus maximus.</p>

<p>Fire up <a href="https://raw.githubusercontent.com/vim/vim/master/runtime/doc/motion.txt"><code>:help motion.txt</code></a> and look around. (If you&rsquo;re tired of
moving down one <em>j</em> at a time, use CTRL-f and CTRL-b to go forward and backward
one page at a time. Or put the cursor on a <code>|keyword|</code> and press CTRL-] to jump
to that subject.)</p>

<p>To use <em>j</em> and <em>k</em> efficiently for editing, enable relative line numbers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>set number
</span><span class='line'>set relativenumber
</span></code></pre></td></tr></table></div></figure>


<p>They look like this:</p>

<p><img class="center" src="http://blog.erw.dk/images/posts/vim_relativenumber.png"></p>

<p>As shown in the margin, the cursor is on line 124. To go to the line &ldquo;To
use&hellip;&rdquo;, just look to the left, read the 9, and go nine lines up with <em>9k</em>.
Without relative line numbers (i.e. <code>:set norelativenumber</code>, or <code>:set nornu</code>
for short), you could also see that this line is line 115 and go to it with
<em>115G</em>, but that&rsquo;s twice the typing.</p>

<p>While getting by with <em>j</em> and <em>k</em>, missing <em>h</em> and <em>l</em> is probably really bad
at first. Take a look at <code>:help word-motions</code> and <code>:help left-right-motions</code>
(which are sections of motion.txt). The six motions <em>f</em>, <em>F</em>, <em>t</em>, <em>T</em>,
<em>(comma)</em>, and <em>;</em> (where <em>(comma)</em> is the comma key itself), will come in
especially handy. To give an example, with the cursor at X on this line and an
&lsquo;x&rsquo; somewhere later, typing <em>fx</em> will go to that x. (Go try it in Vim!) For
letters more common than x, these find commands are less useful. But uppercase
letters and punctuation are easy targets, and help you navigate very quickly.</p>

<p>Playing around with <em>f</em> and family, you will notice that while they are very
fast to type, they only move within the current line, and of course they only
find one symbol at a time. Read <code>:help search-commands</code> to get into the big
league search commands.</p>

<p>At this point I&rsquo;ll remark that the search default settings are a bit lame.
I prefer these settings regarding search:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">set</span> <span class="nb">incsearch</span>   <span class="c">&quot; Search while you type</span>
</span><span class='line'><span class="k">set</span> <span class="nb">hlsearch</span>    <span class="c">&quot; Highlight all matches</span>
</span><span class='line'><span class="k">set</span> <span class="nb">ignorecase</span>  <span class="c">&quot; Ignore case while searching...</span>
</span><span class='line'><span class="k">set</span> <span class="nb">smartcase</span>   <span class="c">&quot; ...unless you use uppercase letters in the search pattern.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Especially search <span style="background-color: yellow;">highlight</span> can
be useful, but after finding what you were looking for, you might want to get
rid of the <span style="background-color: yellow;">highlight</span>ing. Rather
than disabling it completely (<code>:set nohlsearch</code>), just turn it off until your
next search with <code>:nohlsearch</code>, or <code>:noh</code> for short.</p>

<p>In addition, when there are many highlighted matches close to each other,
Damian Conway&rsquo;s <a href="https://github.com/thoughtstream/Damian-Conway-s-Vim-Setup/blob/master/plugin/hlnext.vim">hlnext</a> plugin helps you see where you&rsquo;re at by
blinking the next hit reached with <em>n</em> or <em>N</em>.</p>

<a name="Conclusion"></a>
<h2>Conclusion</h2>

<p>As I mentioned in the beginning, learning Vim incrementally is the most useful.
So the harder way is not the best for most beginners. But I think it is very
useful for people who use Vim frequently but would like to unlock more of its
potential.</p>

<p>Also, we have just scratched the surface of what you can do in Vim. For any
learner, new or experienced, I&rsquo;d recommend reading <code>:help user-manual</code> from
start to end. This is in fact how I learned Vim.</p>

<p>Update: See also <a href="http://blog.erw.dk/2016/08/28/learn-vim-the-harder-way-part-ii/">part II</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leaving Academia]]></title>
    <link href="http://blog.erw.dk/2016/05/09/leaving-academia/"/>
    <updated>2016-05-09T06:35:59+02:00</updated>
    <id>http://blog.erw.dk/2016/05/09/leaving-academia</id>
    <content type="html"><![CDATA[<p>Last fall, I had been at Aalborg University for nine years: One year in
electronic engineering, five years studying software engineering, and three
years doing a PhD in computer science. The first six years as a bachelor and
master&rsquo;s student were relatively straightforward and satisfying. The last three
years formed my introduction to the academic world.</p>

<p>Being a PhD student in computer science does not mean you are a student of
computer science at a high level. Well, you are that, but first and foremost,
you are an apprentice of academia. The distinction is important because, while
I love computer science, academia is, it turned out for me, not great.</p>

<p>I left the university before having finished my PhD, to work at a private
company as an IT consultant. I managed to finish my thesis concurrently with my
new job, and I have now defended it successfully. But the last half year has
also helped me see more clearly my motivation for switching jobs. It can be
summed up like this: Now, I go home from work most days feeling a sense of
accomplishment. Before, I came home from work many days with the feeling of
having failed.</p>

<!-- more -->


<p>Research is hard. It&rsquo;s hard because you are trying to do something that has not
been done before. There is no recipe that guarantees success, because if
someone could tell you what to do, you wouldn&rsquo;t be doing research anymore.
Research is hard because a lot of the time you feel lost and stupid. This is
normal, I was told. But knowing that it is normal does not magically make it
feel good.</p>

<a name="Purpose"></a>
<h2>Purpose</h2>

<p>The question then is if there is something else in the job that makes it
worthwhile and keeps you motivated. According to behavioral economist Dan
Ariely, two of the key motivating factors at work are the feelings of
<a href="http://www.ted.com/talks/dan_ariely_what_makes_us_feel_good_about_our_work">progress and purpose</a>. Progress is generally slow in research due to
its nature. You will fail a lot before stumbling upon something important. So
what about purpose?</p>

<p>Ideally, research should be about the noble goal of adding to the pool of human
knowledge. Cure the proverbial cancer. But doing something significant in
research takes decades and even then is not guaranteed to happen. And that
leaves us back at the slow progress. So how about the feeling of purpose in the
shorter term?</p>

<p>This is where my new job really became a contrast to research. On the grand
scale of things, my work as an IT consultant is fairly insignificant. But on
a smaller scale, it <em>is</em> significant: Someone (the client) is actually going to
use what I am building for them. This is in contrast to academia, where I feel
that very few people read my work, let alone <em>use it</em> for anything. Making
something that others use, want, and care about feels great. Submitting
a research paper for publication and getting grumpy reviews back months later
does not.</p>

<p>Of course, the work I do as an IT consultant is not guaranteed to be used. The
client may change their mind and drop whatever project you are working on. But
since they ordered it and are paying good money for it, they are likely to want
it. In academia, conferences and journals are more important and prestigious,
the more submissions they reject.</p>

<a name="Feedback"></a>
<h2>Feedback</h2>

<p>So what if you instead look for purpose in the very short short term &ndash; hours
and days? In presenting a small new idea, or new section in a draft, and having
your collaborators see it and comment on it? Here, academia also disappointed
me. Getting feedback on my work was not always easy. Meetings could be fitted
into busy schedules a few times a month, and you would be lucky to get an email
reply without sending several reminders.</p>

<p>Unlike the inherent hardness of research, feedback in the short term is
somewhat within your own control because you can influence who you collaborate
with. But I still think my experience is fairly common.</p>

<p>In my new job, feedback is not something I get a few times per week &ndash; it is
something I get a few times per <em>hour</em>. Everybody&rsquo;s busy, but we take time to
help each other. In general I liked my colleagues at the university, but I feel
more like part of a team now than I have ever done as a PhD student.</p>

<p>To top it off, I also feel much more valued now because my time is treated with
respect. And of course it is: Every hour I am not doing billable work is missed
income for the company. And so, getting equipment, booking travels, getting
expenses refunded &mdash; everything is laughably easy compared to the university.</p>

<a name="Just.a.Job."></a>
<h2>Just a Job?</h2>

<p>One might object and say that travel booking and emails are irrelevant; that
work in academia is about grander things. Indeed, a faculty member who joined
the research group I was in complained that the PhD students were not dedicated
enough; that we just treated research as &ldquo;a job&rdquo;.</p>

<p>I think if you work on a topic that you care deeply about, then indeed you can
push on in spite of the slow progress. The feeling of ownership is a strong
motivator.</p>

<p>I was not strongly dedicated to my PhD research. When I couldn&rsquo;t get a PhD
position within my favored topic, I settled for what I could get right here,
right now, rather than looking for other options. In hindsight this was
a mistake. But I&rsquo;m not the only one who made the mistake. And perhaps academia
as an increasingly competitive institution could benefit from having work done
by &ldquo;research <a href="http://academia.stackexchange.com/a/35003">technicians</a>&rdquo; following the lead of a principal
investigator. At least, that could solve the current situation where far more
PhDs are produced than there are permanent positions available for.</p>

<p>But to keep us technicians happy doing what is partially someone elses
research, we need to be treated exactly as a employees doing a regular &ldquo;job&rdquo;.
And to be motivated to do this job where real successes are occasional at best,
the working conditions should provide the day-to-day work satisfaction. And of
course no matter your motivation to tackle long-term research problems, dealing
with bureaucracy is no fun.</p>

<a name="How.to.Succeed"></a>
<h2>How to Succeed</h2>

<p>I do hope that the work I have done during my time working in research has made
a <a href="http://matt.might.net/articles/phd-school-in-pictures/">dent</a>, and I am thankful for the good experiences I have had. But
I would also like others considering doing a PhD to think about why they want
to do it. I thought that because I was a good bachelor and master&rsquo;s student,
I would be a good PhD student. And perhaps I was good for my co-authors, at
least I have been told that. But being a PhD student wasn&rsquo;t good for <em>me</em>.</p>

<p>I think, for academia to be good for you, three things are crucial:</p>

<ul>
<li>You should have a clear goal that is enough yours that you feel ownership of
it and therefore motivation. If your research project is too much somebody
else&rsquo;s idea, you may lose this important source of motivation.</li>
<li>When that is said, you should also work with people who agree with your goal,
and who you enjoy working with. If you collaborate with people you do not
strongly enjoy working with, you will miss regular morale boosts that help keep
you going in spite of the many failures you encounter.</li>
<li>You need to be either highly confident or <a href="http://jcs.biologists.org/content/121/11/1771">productively stupid</a>.</li>
</ul>


<p>Perhaps someday I will get an idea for a research project of my own and find
the right place to pursue it, but for now I&rsquo;ll happily develop &ldquo;mundane&rdquo;
business software that people use in the &ldquo;real world&rdquo;, as we used to say at the
university.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Entering Dates and Times in Vim]]></title>
    <link href="http://blog.erw.dk/2016/04/19/entering-dates-and-times-in-vim/"/>
    <updated>2016-04-19T07:55:20+02:00</updated>
    <id>http://blog.erw.dk/2016/04/19/entering-dates-and-times-in-vim</id>
    <content type="html"><![CDATA[<p>As a young Windows user, I learned that if you write <code>.LOG</code> as the first line
of a text file, then each time you open it in Notepad, it appends the current
time and date to the file. That was pretty cool. And useful for logging things,
as <code>.LOG</code> implies. Later I became a <a href="http://www.vim.org/about.php">Vim</a> user and started enjoying all
the customization I can do to my editor. Or perhaps I became a Vim user because
I enjoy customizing! Either way, I like my date and time shortcuts in Vim. For
example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="n">noremap</span><span class="o">!</span> <span class="o">&lt;</span><span class="n">expr</span><span class="o">&gt;</span> <span class="p">,</span><span class="n">t</span> <span class="n">strftime</span><span class="p">(</span><span class="s">&quot;%H:%M&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This means: Map the key sequence <code>,t</code> (comma followed by &rsquo;t&#8217;) to the result of
the expression <code>strftime("%H:%M")</code> in the insert and command line modes. So if
I write &ldquo;The package arrived ,t&rdquo;, what I will see is &ldquo;The package arrived
13:43&rdquo;, or whatever the time was. I use capital T for further precision
(seconds), <code>,d</code> to insert the date (of course in ISO 8601 format), and <code>,l</code> to
insert date and time together (&lsquo;l&rsquo; for log, as with <code>.LOG</code>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="n">noremap</span><span class="o">!</span> <span class="o">&lt;</span><span class="n">expr</span><span class="o">&gt;</span> <span class="p">,</span><span class="n">T</span> <span class="n">strftime</span><span class="p">(</span><span class="s">&quot;%H:%M:%S&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">noremap</span><span class="o">!</span> <span class="o">&lt;</span><span class="n">expr</span><span class="o">&gt;</span> <span class="p">,</span><span class="n">d</span> <span class="n">strftime</span><span class="p">(</span><span class="s">&quot;%Y-%m-%d&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">noremap</span><span class="o">!</span> <span class="o">&lt;</span><span class="n">expr</span><span class="o">&gt;</span> <span class="p">,</span><span class="n">l</span> <span class="n">strftime</span><span class="p">(</span><span class="s">&quot;%Y-%m-%d %H:%M&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>There are only so many shortcuts you can make with the Control and Alt keys,
but if you use key sequences, you have many more. I have chosen comma as
a &ldquo;leader&rdquo; key because I rarely write it without following it by a space. In
case I do want to write literally &ldquo;,t&rdquo; without a space, I have to type &ldquo;,,t&rdquo;,
where the double comma is a command to insert a single comma:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="n">noremap</span><span class="o">!</span> <span class="p">,,</span> <span class="p">,</span>
</span></code></pre></td></tr></table></div></figure>


<p>The &ldquo;nore&rdquo; part of &ldquo;noremap&rdquo; means &ldquo;no remapping&rdquo;, i.e., don&rsquo;t use the output
of this mapping as input to another mapping. If it <em>did</em> remap, the one comma
produced here would be interpreted as the start of one of the mappings starting
with comma, including itself.</p>

<p>I use these functions daily, for example at work, where I keep a log of which
tasks I start when. I also use it a lot with <a href="http://todotxt.com/">todotxt</a> when writing
due dates or threshold dates. Finally, I added a mapping to insert the first of
the next month.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="n">noremap</span><span class="o">!</span> <span class="o">&lt;</span><span class="n">expr</span><span class="o">&gt;</span> <span class="p">,</span><span class="n">D</span>
</span><span class='line'>          <span class="err">\</span> <span class="n">strftime</span><span class="p">(</span><span class="s">&quot;%Y&quot;</span><span class="p">)</span> <span class="o">+</span> <span class="n">strftime</span><span class="p">(</span><span class="s">&quot;%m&quot;</span><span class="p">)</span> <span class="o">/</span> <span class="mi">12</span> <span class="p">.</span> <span class="s">&quot;-&quot;</span> <span class="p">.</span>
</span><span class='line'>          <span class="err">\</span> <span class="n">repeat</span><span class="p">(</span><span class="sc">&#39;0&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="o">-</span><span class="n">len</span><span class="p">((</span><span class="n">strftime</span><span class="p">(</span><span class="s">&quot;%m&quot;</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="mi">12</span><span class="p">))</span> <span class="p">.</span>
</span><span class='line'>          <span class="err">\</span> <span class="p">(</span><span class="n">strftime</span><span class="p">(</span><span class="s">&quot;%m&quot;</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="mi">12</span> <span class="p">.</span>
</span><span class='line'>          <span class="err">\</span> <span class="s">&quot;-01&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Typing &ldquo;,D&rdquo; today would yield 2016-05-01, for example.</p>

<p>Entered times and dates can also be manipulated with Vim&rsquo;s Ctrl-A and Ctrl-X
increment and decrement commands. Want to add two weeks? Type 14 followed by
Ctrl-X to add 14 days.</p>

<p>My duplicate increment line mappings also come in handy:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="n">nnoremap</span> <span class="o">&lt;</span><span class="n">silent</span><span class="o">&gt;</span>       <span class="o">&lt;</span><span class="n">F2</span><span class="o">&gt;</span>  <span class="err">@</span><span class="o">=</span><span class="err">&#39;</span><span class="n">yyp</span><span class="o">&lt;</span><span class="n">c</span><span class="o">-</span><span class="n">v</span><span class="o">&gt;&lt;</span><span class="n">c</span><span class="o">-</span><span class="n">a</span><span class="o">&gt;</span><span class="err">&#39;</span><span class="o">&lt;</span><span class="n">cr</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">nnoremap</span> <span class="o">&lt;</span><span class="n">silent</span><span class="o">&gt;</span>       <span class="o">&lt;</span><span class="n">F3</span><span class="o">&gt;</span>  <span class="err">@</span><span class="o">=</span><span class="err">&#39;</span><span class="n">yypE</span><span class="o">&lt;</span><span class="n">c</span><span class="o">-</span><span class="n">v</span><span class="o">&gt;&lt;</span><span class="n">c</span><span class="o">-</span><span class="n">x</span><span class="o">&gt;</span><span class="err">&#39;</span><span class="o">&lt;</span><span class="n">cr</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If I write &ldquo;2016-04-20 Plan:&rdquo; followed by 10 and then the F3 key, I immediately
have:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="mi">2016</span><span class="o">-</span><span class="mo">04</span><span class="o">-</span><span class="mi">20</span> <span class="nl">Plan</span><span class="p">:</span>
</span><span class='line'><span class="mi">2016</span><span class="o">-</span><span class="mo">04</span><span class="o">-</span><span class="mi">21</span> <span class="nl">Plan</span><span class="p">:</span>
</span><span class='line'><span class="mi">2016</span><span class="o">-</span><span class="mo">04</span><span class="o">-</span><span class="mi">22</span> <span class="nl">Plan</span><span class="p">:</span>
</span><span class='line'><span class="mi">2016</span><span class="o">-</span><span class="mo">04</span><span class="o">-</span><span class="mi">23</span> <span class="nl">Plan</span><span class="p">:</span>
</span><span class='line'><span class="mi">2016</span><span class="o">-</span><span class="mo">04</span><span class="o">-</span><span class="mi">24</span> <span class="nl">Plan</span><span class="p">:</span>
</span><span class='line'><span class="mi">2016</span><span class="o">-</span><span class="mo">04</span><span class="o">-</span><span class="mi">25</span> <span class="nl">Plan</span><span class="p">:</span>
</span><span class='line'><span class="mi">2016</span><span class="o">-</span><span class="mo">04</span><span class="o">-</span><span class="mi">26</span> <span class="nl">Plan</span><span class="p">:</span>
</span><span class='line'><span class="mi">2016</span><span class="o">-</span><span class="mo">04</span><span class="o">-</span><span class="mi">27</span> <span class="nl">Plan</span><span class="p">:</span>
</span><span class='line'><span class="mi">2016</span><span class="o">-</span><span class="mo">04</span><span class="o">-</span><span class="mi">28</span> <span class="nl">Plan</span><span class="p">:</span>
</span><span class='line'><span class="mi">2016</span><span class="o">-</span><span class="mo">04</span><span class="o">-</span><span class="mi">29</span> <span class="nl">Plan</span><span class="p">:</span>
</span><span class='line'><span class="mi">2016</span><span class="o">-</span><span class="mo">04</span><span class="o">-</span><span class="mi">30</span> <span class="nl">Plan</span><span class="p">:</span>
</span></code></pre></td></tr></table></div></figure>


<p>Actually, Vim just thinks it&rsquo;s decrementing the integer -19 to -20 and so on,
but Tim Pope&rsquo;s <a href="https://github.com/tpope/vim-speeddating">speeddating.vim</a> plugin adds date and time
awareness, so typing Ctrl-A on 2016-04-30 would result in 2016-05-01 and not
2016-04-31. Happy Vimming!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remote Desktop White Screen - Solved]]></title>
    <link href="http://blog.erw.dk/2016/03/12/remote-desktop-white-screen-solved/"/>
    <updated>2016-03-12T13:54:10+01:00</updated>
    <id>http://blog.erw.dk/2016/03/12/remote-desktop-white-screen-solved</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://blog.erw.dk/images/posts/rdp.png" width="450"></p>

<p>At work, I often connect to Windows servers over Remote Desktop Protocol (RDP).
A few times, I have been met with a blank white screen, typically after
changing screen resolution in the Remote Desktop Connection options.</p>

<p>The first time this happened I spent a lot of time googling to no avail, so now
I will put the solution I found by chance here in case it might help someone
else. And note that encountering a blank <em>black</em> screen is a different and more
frequent problem, the solutions to which didn&rsquo;t help me with my white screen in
the time that I spent on it.</p>

<a name="Solution:.Alt-F4"></a>
<h3>Solution: Alt-F4</h3>

<p>An <strong>Alt-F4</strong> was all it took to get rid of the white screen. However, if that
does not work, you can also try a <strong>Ctrl-Alt-End</strong> (the remote desktop
equivalent of Ctrl-Alt-Del), and see if you can work anything out from there.
Good luck!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keep Track With a Year at a Glance]]></title>
    <link href="http://blog.erw.dk/2016/01/10/keep-track-with-a-year-at-a-glance/"/>
    <updated>2016-01-10T19:32:58+01:00</updated>
    <id>http://blog.erw.dk/2016/01/10/keep-track-with-a-year-at-a-glance</id>
    <content type="html"><![CDATA[<p><span class='caption-wrapper right'><img class='caption' src='http://blog.erw.dk/images/posts/floss.jpg' width='' height='' alt='The calendar helped me floss (more or less) daily.'><span class='caption-text'>The calendar helped me floss (more or less) daily.</span></span></p>

<p>If you are already starting to forget about your New Year&rsquo;s resolutions, here&rsquo;s
a tip to keep going: Visualize your progress: Put X&rsquo;s on a calendar on every
day you do what whatever you want to do more of. Stick the calendar on the wall
or wherever it would remind you of your goal.</p>

<p>Some years back, each time I visited my dentist, she recommended that I floss.
And I would decide that <em>this time</em> I would start doing it. But some days
later, I started slipping and forgetting about it. It wasn&rsquo;t until I put
a year-at-a-glance calendar on the bathroom cabinet door that the habit stuck.</p>

<p>Putting a mark on a calendar is not rocket science, but the satisfaction of
marking a completed task and of seeing your progress is a mental reward that
can make a big difference. If you want to try, I made a one page 2016 calendar
you can print (<a href="http://blog.erw.dk/files/cal2016.odt">LibreOffice/odt</a>,
<a href="http://blog.erw.dk/files/cal2016.docx">Word/docx</a>). (It was easily made with the open source
ncal utility, invoked as <code>ncal -bh 2016</code>.)</p>

<!-- more -->


<a name="Don.t.Break.the.Chain"></a>
<h2>Don&rsquo;t Break the Chain</h2>

<p>For goals that can practically be done every day, it&rsquo;s not just having many
marks on the calendar that is important. A further motivation is to keep the
chain of successful days unbroken. (This method is widely known as the
<a href="https://www.google.com/search?q=seinfeld+strategy">Seinfeld Strategy</a>, even though Jerry Seinfeld says
<a href="https://www.reddit.com/r/IAmA/comments/1ujvrg/jerry_seinfeld_here_i_will_give_you_an_answer/ceitfxh">it wasn&rsquo;t his idea</a>.)
For workouts or other things that you might not have time to do every day, you
could still use the chain method by using a list of weeks of the year, and
checking off each week that met your goal, say, doing at least two workouts. Or
maybe drinking at most three bottles of soda that week.</p>

<p>The chain method is also used in games and apps. For example, the app
<a href="http://www.memrise.com/">Memrise</a> shows me my learning streak, or unbroken chain of days that
I learn/memorize words or images in my chosen topic. Showing the streak has
helped me to learn <a href="http://www.memrise.com/course/42769/country-mapping/">the world map</a> for five minutes a day, 234
days in a row today. (The streak trick worked better than even the designers
anticipated &ndash; the app crashed when trying to award me a 200-day badge.)</p>

<a name="Not.Just.for.Resolutions"></a>
<h2>Not Just for Resolutions</h2>

<p>The fine art of putting marks on a calendar is not just for New Year&rsquo;s
resolutions. I find it useful for anything I want to track. For example, I use
one to remember when I last watered my chili plant. Or put a mark when you
vacuum clean. Then you can see both when it would be a good idea to do it
again, and in the long run, how often you do it &ndash; if you&rsquo;re interested in that
sort of thing. Happy tracking!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AoC 2015 Day 5: Fun with Declarative Programming]]></title>
    <link href="http://blog.erw.dk/2015/12/06/fun-with-declarative-programming/"/>
    <updated>2015-12-06T19:36:41+01:00</updated>
    <id>http://blog.erw.dk/2015/12/06/fun-with-declarative-programming</id>
    <content type="html"><![CDATA[<p>My <a href="http://www.bachata-geek.me">girlfriend</a> introduced me to Eric Wastl&rsquo;s <a href="http://adventofcode.com">Advent of Code</a>,
a programming puzzle Advent calendar. The best advent calendar I&rsquo;ve had in my
adult life! (If you&rsquo;re planning on playing it, this article is one big spoiler
for Day 5.) I compare declarative programming puzzle solutions on readability
and speed.</p>

<!-- more -->


<p>The puzzle for Day 5 is:</p>

<blockquote><p>Santa needs help figuring out which strings in his text file are naughty or nice.</p>

<p>A nice string is one with all of the following properties:</p>

<ul>
<li>It contains at least three vowels (<code>aeiou</code> only), like <code>aei</code>, <code>xazegov</code>, or <code>aeiouaeiouaeiou</code>.</li>
<li>It contains at least one letter that appears twice in a row, like <code>xx</code>, <code>abcdde</code> (<code>dd</code>), or <code>aabbccdd</code> (<code>aa</code>, <code>bb</code>, <code>cc</code>, or <code>dd</code>).</li>
<li>It does not contain the strings <code>ab</code>, <code>cd</code>, <code>pq</code>, or <code>xy</code>, even if they are part of one of the other requirements.</li>
</ul>


<p>How many strings are nice?</p></blockquote>

<p>On the <a href="http://adventofcode.com">page</a> you get more explanation and an input to use for your
code, but this is the basic challenge.</p>

<p>I&rsquo;d normally do this in Python, but I&rsquo;m brushing up on my C#-fu, so that&rsquo;s what
I went with. I first wrote it in classic, imperative style:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='CSharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.IO</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">Day5</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">MainClass</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="kt">var</span> <span class="n">nNice</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">line</span> <span class="k">in</span> <span class="n">File</span><span class="p">.</span><span class="n">ReadLines</span><span class="p">(</span><span class="s">&quot;../../input&quot;</span><span class="p">))</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">line</span><span class="p">.</span><span class="n">Contains</span><span class="p">(</span><span class="s">&quot;ab&quot;</span><span class="p">)</span> <span class="p">||</span>
</span><span class='line'>            <span class="n">line</span><span class="p">.</span><span class="n">Contains</span><span class="p">(</span><span class="s">&quot;cd&quot;</span><span class="p">)</span> <span class="p">||</span>
</span><span class='line'>            <span class="n">line</span><span class="p">.</span><span class="n">Contains</span><span class="p">(</span><span class="s">&quot;pq&quot;</span><span class="p">)</span> <span class="p">||</span>
</span><span class='line'>            <span class="n">line</span><span class="p">.</span><span class="n">Contains</span><span class="p">(</span><span class="s">&quot;xy&quot;</span><span class="p">))</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">var</span> <span class="n">vowels</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">character</span> <span class="k">in</span> <span class="n">line</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="s">&quot;aeiou&quot;</span><span class="p">.</span><span class="n">Contains</span><span class="p">(</span><span class="n">character</span><span class="p">))</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>            <span class="n">vowels</span><span class="p">++;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">vowels</span> <span class="p">&lt;</span> <span class="m">3</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">character</span> <span class="k">in</span> <span class="n">line</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">line</span><span class="p">.</span><span class="n">Contains</span><span class="p">(</span><span class="k">new</span> <span class="kt">string</span><span class="p">(</span><span class="n">character</span><span class="p">,</span> <span class="m">2</span><span class="p">)))</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>            <span class="n">nNice</span><span class="p">++;</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">nNice</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>One of the reasons I love Python is <a href="https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions">comprehensions</a>. But
.NET has <a href="https://msdn.microsoft.com/en-us/library/bb397926.aspx">LINQ</a> (Language Integrated Query), which I one of the reasons
I love C# too. By <code>using System.Linq</code> I can turn the <code>Main()</code> body into
a single, declarative statement:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='CSharp'><span class='line'>  <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span>
</span><span class='line'>    <span class="n">File</span><span class="p">.</span><span class="n">ReadLines</span><span class="p">(</span><span class="s">&quot;../../input&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Count</span><span class="p">(</span><span class="n">line</span> <span class="p">=&gt;</span>
</span><span class='line'>      <span class="n">line</span><span class="p">.</span><span class="n">Count</span><span class="p">(</span><span class="n">character</span> <span class="p">=&gt;</span> <span class="s">&quot;aeiou&quot;</span><span class="p">.</span><span class="n">Contains</span><span class="p">(</span><span class="n">character</span><span class="p">))</span> <span class="p">&gt;=</span> <span class="m">3</span> <span class="p">&amp;&amp;</span>
</span><span class='line'>      <span class="n">line</span><span class="p">.</span><span class="n">Any</span><span class="p">(</span><span class="n">character</span> <span class="p">=&gt;</span> <span class="n">line</span><span class="p">.</span><span class="n">Contains</span><span class="p">(</span><span class="k">new</span> <span class="kt">string</span><span class="p">(</span><span class="n">character</span><span class="p">,</span> <span class="m">2</span><span class="p">)))</span> <span class="p">&amp;&amp;</span>
</span><span class='line'>      <span class="p">!(</span><span class="k">new</span><span class="p">[]</span> <span class="p">{</span> <span class="s">&quot;ab&quot;</span><span class="p">,</span> <span class="s">&quot;cd&quot;</span><span class="p">,</span> <span class="s">&quot;pq&quot;</span><span class="p">,</span> <span class="s">&quot;xy&quot;</span> <span class="p">}.</span><span class="n">Any</span><span class="p">(</span><span class="n">naughty</span> <span class="p">=&gt;</span> <span class="n">line</span><span class="p">.</span><span class="n">Contains</span><span class="p">(</span><span class="n">naughty</span><span class="p">)))));</span>
</span></code></pre></td></tr></table></div></figure>


<p>It sure feels good to write compact code, but is it better than the imperative
version?
It depends on how you evaluate it.</p>

<a name="Readability"></a>
<h2>Readability</h2>

<p>Imperative code always requires detailed inspection and/or non-outdated
comments to understand. On the other hand, I think the gist of the declarative
version is very quick to read: &ldquo;Count the number of lines in the input file
which satisfy &hellip; some criteria&rdquo;. Compared to the imperative version, the
overall purpose is much clearer. But the individual criteria still take time to
read.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='CSharp'><span class='line'>      <span class="n">line</span><span class="p">.</span><span class="n">Count</span><span class="p">(</span><span class="n">character</span> <span class="p">=&gt;</span> <span class="s">&quot;aeiou&quot;</span><span class="p">.</span><span class="n">Contains</span><span class="p">(</span><span class="n">character</span><span class="p">))</span> <span class="p">&gt;=</span> <span class="m">3</span> <span class="p">&amp;&amp;</span>
</span><span class='line'>      <span class="n">line</span><span class="p">.</span><span class="n">Any</span><span class="p">(</span><span class="n">character</span> <span class="p">=&gt;</span> <span class="n">line</span><span class="p">.</span><span class="n">Contains</span><span class="p">(</span><span class="k">new</span> <span class="kt">string</span><span class="p">(</span><span class="n">character</span><span class="p">,</span> <span class="m">2</span><span class="p">)))</span> <span class="p">&amp;&amp;</span>
</span><span class='line'>      <span class="p">!(</span><span class="k">new</span><span class="p">[]</span> <span class="p">{</span> <span class="s">&quot;ab&quot;</span><span class="p">,</span> <span class="s">&quot;cd&quot;</span><span class="p">,</span> <span class="s">&quot;pq&quot;</span><span class="p">,</span> <span class="s">&quot;xy&quot;</span> <span class="p">}.</span><span class="n">Any</span><span class="p">(</span><span class="n">naughty</span> <span class="p">=&gt;</span> <span class="n">line</span><span class="p">.</span><span class="n">Contains</span><span class="p">(</span><span class="n">naughty</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>At least three vowels, a repeated character, and no naughty substrings.</p>

<p>The keen reader may have noticed that the first criterion could be written more
compactly as <code>line.Count("aeiou".Contains) &gt;= 3</code> (similarly with the third).
I think this is less readable, and compactness is not a goal in itself, unless
you are playing code golf. Incidentally, the method group (compact) version
also performs slightly slower.</p>

<p>Variable names are a form of built-in documentation. Along the same lines, it
might help to introduce variables:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='CSharp'><span class='line'>  <span class="kt">var</span> <span class="n">vowels</span> <span class="p">=</span> <span class="s">&quot;aeiou&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">naughtySubstrings</span> <span class="p">=</span> <span class="k">new</span><span class="p">[]</span> <span class="p">{</span> <span class="s">&quot;ab&quot;</span><span class="p">,</span> <span class="s">&quot;cd&quot;</span><span class="p">,</span> <span class="s">&quot;pq&quot;</span><span class="p">,</span> <span class="s">&quot;xy&quot;</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>But readability also depends on what you know.
For the uninitiated, <a href="https://en.wikipedia.org/wiki/Regular_expression">regular expressions</a> are complete gibberish. But
for the experienced, <code>using System.Text.RegularExpressions</code> can actually state
the criteria more clearly. Instead of fussing over the individual characters of
the line and naughty patterns, it is easier to compare the whole, undivided
line to a pattern:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='CSharp'><span class='line'>      <span class="n">Regex</span><span class="p">.</span><span class="n">Matches</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="s">&quot;[aeiou]&quot;</span><span class="p">).</span><span class="n">Count</span> <span class="p">&gt;=</span> <span class="m">3</span> <span class="p">&amp;&amp;</span>
</span><span class='line'>      <span class="n">Regex</span><span class="p">.</span><span class="n">IsMatch</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="s">@&quot;(.)\1&quot;</span><span class="p">)</span> <span class="p">&amp;&amp;</span>
</span><span class='line'>      <span class="p">!</span><span class="n">Regex</span><span class="p">.</span><span class="n">IsMatch</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="s">&quot;ab|cd|pq|xy&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Regular expressions are declarative on an even higher level.</p>

<p>But they might not perform that well, especially when using uncompiled regular
expressions. And that leads us to another criterion.</p>

<a name="Performance"></a>
<h2>Performance</h2>

<p>Doing a quick benchmark on an input with two million strings and warmed-up
caches, the uncompiled Regex version completes in 6.6 seconds, the LINQ version
in 4.4 seconds, and my naive imperative version in 2.4 seconds. So much for
readability. (This was using Mono, btw.)</p>

<p>But, the declarative style has a trick up its sleeve: Parallelism for free!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='CSharp'><span class='line'>  <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span>
</span><span class='line'>    <span class="n">File</span><span class="p">.</span><span class="n">ReadLines</span><span class="p">(</span><span class="s">&quot;../../input&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">AsParallel</span><span class="p">()</span>  <span class="c1">///////////////////////////////// Parallelism for free!</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Count</span><span class="p">(</span><span class="n">line</span> <span class="p">=&gt;</span>
</span><span class='line'>      <span class="n">line</span><span class="p">.</span><span class="n">Count</span><span class="p">(</span><span class="n">character</span> <span class="p">=&gt;</span> <span class="s">&quot;aeiou&quot;</span><span class="p">.</span><span class="n">Contains</span><span class="p">(</span><span class="n">character</span><span class="p">))</span> <span class="p">&gt;=</span> <span class="m">3</span> <span class="p">&amp;&amp;</span>
</span><span class='line'>      <span class="n">line</span><span class="p">.</span><span class="n">Any</span><span class="p">(</span><span class="n">character</span> <span class="p">=&gt;</span> <span class="n">line</span><span class="p">.</span><span class="n">Contains</span><span class="p">(</span><span class="k">new</span> <span class="kt">string</span><span class="p">(</span><span class="n">character</span><span class="p">,</span> <span class="m">2</span><span class="p">)))</span> <span class="p">&amp;&amp;</span>
</span><span class='line'>      <span class="p">!(</span><span class="k">new</span><span class="p">[]</span> <span class="p">{</span> <span class="s">&quot;ab&quot;</span><span class="p">,</span> <span class="s">&quot;cd&quot;</span><span class="p">,</span> <span class="s">&quot;pq&quot;</span><span class="p">,</span> <span class="s">&quot;xy&quot;</span> <span class="p">}.</span><span class="n">Any</span><span class="p">(</span><span class="n">naughty</span> <span class="p">=&gt;</span> <span class="n">line</span><span class="p">.</span><span class="n">Contains</span><span class="p">(</span><span class="n">naughty</span><span class="p">)))));</span>
</span></code></pre></td></tr></table></div></figure>


<p>1.8 seconds on my quadcore!</p>

<p>Now, I have not optimized any of these three versions for performance, and it
could of course be done faster in C# (with or without explicit threads), and
most likely even faster in C or C++.</p>

<p>So I think the conclusion so far is what it is nothing new:
Readability and performance are conflicting goals.</p>

<a name="Debuggability"></a>
<h2>Debuggability</h2>

<p>One final criterion is debuggability. I have loved declarative style for a long
time, but always found it harder to debug than imperative style. However, an
advantage of Python and C# compared to, say, Haskell, is that they are
basically imperative languages with other paradigms on top. Thus, you can
gradually learn declarative and functional style in the safe context of
imperative programming. And cut down on the declarative-ness when you want to.</p>

<p>However, next up on my reading list is <a href="https://www.simple-talk.com/dotnet/.net-framework/linq-secrets-revealed-chaining-and-debugging/">LINQ Secrets Revealed: Chaining and Debugging</a>.</p>

<a name="Python.Postscript"></a>
<h2>Python Postscript</h2>

<p>I did the puzzle in Python just to see how it compared. Rather than reading
then length of a list made with a list comprehension, I do it in a streaming
fashion by summing over a generator expression:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="kn">import</span> <span class="nn">re</span>
</span><span class='line'><span class="k">print</span> <span class="nb">sum</span><span class="p">(</span><span class="mi">1</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;input&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s">&#39;[aeiou]&#39;</span><span class="p">,</span> <span class="n">line</span><span class="p">))</span> <span class="o">&gt;=</span> <span class="mi">3</span> <span class="ow">and</span>
</span><span class='line'>              <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">r&#39;(.)\1&#39;</span><span class="p">,</span> <span class="n">line</span><span class="p">)</span> <span class="ow">and</span>
</span><span class='line'>              <span class="ow">not</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">&#39;ab|cd|pq|xy&#39;</span><span class="p">,</span> <span class="n">line</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>(This is the whole program, not just the body of some main function!)</p>

<p>At 5.3 seconds for the two million strings, this stacks up pretty well against
C#, considering that Python is interpreted.</p>

<p><em>Update 2016-03-12: I added in the performance section that I used Mono.</em></p>

<p><em>Update 2017-12-09: Changed the post title.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ode to my Casio]]></title>
    <link href="http://blog.erw.dk/2015/07/11/ode-to-my-casio/"/>
    <updated>2015-07-11T13:57:20+02:00</updated>
    <id>http://blog.erw.dk/2015/07/11/ode-to-my-casio</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://blog.erw.dk/images/posts/casio.jpg" width="345"></p>

<p>The year was 2002 and I had started gymnasium (≈high school). My parents had
bought me the graphic calculator required for our maths classes: Casio fx-9750G
PLUS. It was white and green and curvy and Casio &mdash; not dark and rectangular
and from Texas Instruments, as a calculator was expected to be. Soon, however,
this happy-looking thing became my companion on my journey into the world of
programming.</p>

<!-- more -->


<p>Compared with a personal computer, this calculator was weak, to say the least.
The display resolution was 128×64 pixels in black and white. (However, I did
for a long time dream of the color LCD version CFX-9850GC PLUS, which could
show <em>three</em> colors:
<span style="color:orange">orange</span>,
<span style="color:green">green</span>, and
<span style="color:blue">blue</span>.)
The processor was slow. Graphing <em>y = x<sup>2</sup></em> took a good five seconds. Sinusoidal
regression on 150 data points took 75 seconds, plus another 8 seconds to draw
the sine curve.
Memory was limited as well: 32K, of which only 28568 bytes were available to
the user. And of which every list and matrix entry took up 10 bytes! Plus, any
time something was graphed, 4K was reserved for that.</p>

<p>Yet for all these complaints, this machine was a fantastic place to start
programming. Having a fixed set of features challenges you to do what you can
with what you have. On this fixed platform, there was no getting lost in
debates about which programming language to use, because there was only one
choice. There was no trouble with installation or incompatible software
libraries. There was no web browsing or multitasking. No distraction. And zero
boot time and a year of battery life.</p>

<p><img class="right" src="http://blog.erw.dk/images/posts/casio-fact.jpg"></p>

<p>The basic calculator part is a REPL: That is to say it <em>reads</em> your input,
<em>evaluates</em> it, <em>prints</em> the result, and it <em>loops</em>, doing this indefinitely.
In this interactive environment, you can familiarize yourself with expressions
before slowly, step by step, automating small parts of your calculations. You
could, for example, make a small program that asks the user for input and uses
a loop to do a calculation.</p>

<p>And there were enough features to do really cool things: Plotting, lists and
list operations (sorting, summation, product, mean, median, etc.), matrices and
matrix operations, statistics, regression, etc.</p>

<a name="Programming.on.the.Bus"></a>
<h2>Programming on the Bus</h2>

<p>During the bus trips to school I spent as much time with my Casio as people
today spend with their smartphones. And I suppose this puzzled the other
students: How much time can you really spend calculating?</p>

<p>I made programs for all sorts of tasks. One type was the programs that helped
my maths and science classes. In maths it was nice to be able to enter the
information you had about a triangle, and then calculate the rest
automatically. Or calculate the greatest common divisor. In physics,
I calculated and visualized refraction. In chemistry, I calculated molar
masses.</p>

<p><img class="right" src="http://blog.erw.dk/images/posts/casio-guitar.jpg"></p>

<p>But it was also fun and games: I made programs that drew nice geometric shapes
for their beauty. I calculated poker odds. During some boring classes I made
a program in which you entered the time of day (the calculator didn&rsquo;t have
a clock), and it drew a 3d pie chart showing how close the current lecture was
to completion. And I factored out the pie chart so other programs could use it
as a subroutine.</p>

<p>I made programs for sound and music. I translated between notes (such as A) and
frequencies (such as 440 Hz). I visualized harmonics. I made a program that
showed all the ways a chosen note could be played on a guitar. (And
I didn&rsquo;t even play the guitar!)</p>

<p>And I made games. Guess which number I&rsquo;m thinking of, where the program tells
you whether your guess was too high or too low. I made a game in which you had
to remember random numbers that were shown in progressively shorter glimpses.
Each level made the number one digit longer. I made Snake. It grew linearly
slower with the length of the snake, and the game was too slow to be fun to
play. But that didn&rsquo;t affect my pride in making it. Near the end of gymnasium,
I was planning a strategy game inspired by Command &amp; Conquer Tiberian Sun,
which I loved. I had a cool animation for the cyborgs&#8217; machine guns, but other
than that, I never got very far. But to be fair, it is a rather big step from
Snake to that.</p>

<a name="Much.Learnage"></a>
<h2>Much Learnage</h2>

<p>This primitive programming taught me some lessons about &ldquo;real&rdquo; programming:</p>

<ul>
<li>Understanding a program you wrote months ago is tricky, when all variable
names are a single character. I learned the value of descriptive variable
names.</li>
<li>The slow processor gave me a tangible sense of execution time and complexity.</li>
<li>With an editor window of 6x21 chars, I soon learned that sketching your
algorithm or architecture before implementing is useful for big programs.
That would probably take more time to learn on a big screen.</li>
<li>I learned to prioritize what to do with the limited memory.</li>
<li>I learned debugging the hard way: There were almost no meaningful error
messages (but at least you could be taken to the location in the code that
caused the error).</li>
<li>I learned that all programs and subroutines sharing a global address space
sucks!</li>
</ul>


<a name="Interacting.with.the.World"></a>
<h2>Interacting with the World</h2>

<p>After some time, interacting with a program through a (tiny) screen and (tiny)
keyboard was not enough. I wanted to interact with the world. Thankfully, my
parents got me the Casio EA-200 data logger. This device was even clunkier than
the calculator, but it was a window to the physical world: Now I could measure
voltage, light, temperature, and sound.</p>

<p>I measured the fluctuation of the temperature in the fridge. Since I could hear
the compressor swiching on and off I knew the temperature couldn&rsquo;t be constant,
so I wanted to know the extent of the lie that &ldquo;a fridge is 5&#x00b0;C&rdquo;. (As
I recall, it went between 4 and 8&#x00b0;C). Knowledge is power, even in the
small.</p>

<p>With the microphone and speaker, I made a dictaphone. As with Snake, the idea
of making it was more important than its usefulness. It did work, but the
memory was somewhat limited.</p>

<p>I also measured the fluctuation of the intensity of light from lightbulbs. Even
when they appear constantly on, they heat and cool with the alternating current
of the electric grid. And I learned about another &ldquo;truth&rdquo;: Our electric grid
runs at 50 Hz. Yes, when it&rsquo;s not 49 and 52 and 50.2 Hz. This is also where
I got to appreciate the Fourier transform that I recently <a href="http://blog.erw.dk/2015/03/20/debugging-complex-numbers/">implemented</a>
myself.</p>

<p>My dear Casio, thanks for the ride.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Checks for Your Django Project]]></title>
    <link href="http://blog.erw.dk/2015/06/06/checks-for-your-django-project/"/>
    <updated>2015-06-06T13:42:14+02:00</updated>
    <id>http://blog.erw.dk/2015/06/06/checks-for-your-django-project</id>
    <content type="html"><![CDATA[<p>The <a href="https://www.djangoproject.com/">Django web framework</a> has a management
command to <a href="https://docs.djangoproject.com/en/1.8/ref/checks/">check</a> your code for various problems. For
example, it checks that your database <code>CharFields</code> define the <code>max_length</code>
attribute, and that you have not set <code>DEBUG = True</code> in deployment. This is good
for catching various mistakes in using the framework before the problem shows
up in production. And for your own business logic, you have unit tests. But
there are still many things to not mess up, and they are easy to forget if they
are not incredibly easy to check. So I wrote a script to check every problem
I could think of in one go.</p>

<!-- more -->


<p>First up is the unit tests. For this script I only want it to tell me anything
if there is a problem, as is customary for unix programs. With verbosity 0 and
<code>head -n -4</code> cutting off the last four lines with the test summary, only failed
test cases are shown:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./manage.py <span class="nb">test</span> -v <span class="m">0</span> --noinput 2&gt;<span class="p">&amp;</span><span class="m">1</span> <span class="p">|</span> head -n -4
</span></code></pre></td></tr></table></div></figure>


<p>Alternatively, you can run them with a code coverage check. Here, failed tests
are shown and the total code coverage is shown if it is below 50%:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>coverage run --branch --source<span class="o">=</span><span class="s1">&#39;.&#39;</span> --omit<span class="o">=</span><span class="s1">&#39;*/migrations/*,*test*,*settings*&#39;</span> <span class="se">\</span>
</span><span class='line'>    manage.py <span class="nb">test</span> -v <span class="m">0</span> 2&gt;<span class="p">&amp;</span><span class="m">1</span> <span class="p">|</span> head -n -4
</span><span class='line'>coverage report --fail-under<span class="o">=</span><span class="m">50</span> &gt;/dev/null <span class="o">||</span> coverage report <span class="p">|</span> sed -n <span class="s1">&#39;1p;$p&#39;</span> <span class="o">&amp;&amp;</span> <span class="nb">echo</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first of the &ldquo;hidden&rdquo; things that is easy to forget is changes to the data
model that need to be migrated in the database. Unfortunately, the
<code>makemigrations</code> management command doesn&rsquo;t have a usable exit status, but
I work around that to only output text in case of problems:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span> <span class="s2">&quot;$(./manage.py makemigrations --dry-run)&quot;</span> !<span class="o">=</span> <span class="s2">&quot;No changes detected&quot;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>    ./manage.py makemigrations --dry-run <span class="o">&amp;&amp;</span> <span class="nb">echo</span>
</span></code></pre></td></tr></table></div></figure>


<p>I also run <a href="https://flake8.readthedocs.org/">flake8</a> which wraps the code style checker <a href="http://pep8.readthedocs.org/en/latest/intro.html">pep8</a>,
the static error checker <a href="https://pypi.python.org/pypi/pyflakes">Pyflakes</a>, and, optionally,
the <a href="http://en.wikipedia.org/wiki/Cyclomatic_complexity">code complexity</a> checker <a href="https://pypi.python.org/pypi/mccabe">mccabe</a>, if
you give the flag <code>--max-complexity=10</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>flake8 . <span class="o">||</span> <span class="nb">echo</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Translation"></a>
<h2>Translation</h2>

<p>For a multilingual project, you must remember to scan for changes to
translatable strings and also to translate them. The <code>makemessages</code> management
command goes over the source and finds all strings marked for translation and
makes or updates the translation &ldquo;portable object&rdquo;/PO file. So ideally, I could
just run that command and see if there are any changes to the PO file.</p>

<p>However, <code>makemessages</code> includes a timestamp for the generation of the file, so
it is always different each time the command is run. On top of that, it can
happen that the command finds the translatable strings in a different order
even when the content of the strings didn&rsquo;t change (I think this happens
between different version of Django).</p>

<p>So, I compare the before and after versions of the PO file with the timestamps
stripped out, and sorted such that ordering doesn&rsquo;t matter. This sorting trick
will cause false negatives if two strings are swapped in the source code, but
this seems unlikely and therefore preferable to getting false positives from
<code>makemessages</code>&#x2019; inability to search the source in a consistent order.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sed <span class="s1">&#39;/POT-Creation-Date/d&#39;</span> locale/da/LC_MESSAGES/django.po &gt; __po1
</span><span class='line'>mv locale/da/LC_MESSAGES/django.po<span class="o">{</span>,_orig<span class="o">}</span>
</span><span class='line'>cp locale/da/LC_MESSAGES/django.po<span class="o">{</span>_orig,<span class="o">}</span>
</span><span class='line'>./manage.py makemessages -v <span class="m">0</span> -a --no-location --no-obsolete
</span><span class='line'>sed <span class="s1">&#39;/POT-Creation-Date/d&#39;</span> locale/da/LC_MESSAGES/django.po &gt; __po2
</span><span class='line'>mv locale/da/LC_MESSAGES/django.po<span class="o">{</span>_orig,<span class="o">}</span>
</span><span class='line'>diff &lt;<span class="o">(</span>sort __po1<span class="o">)</span> &lt;<span class="o">(</span>sort __po2<span class="o">)</span> &gt;/dev/null <span class="o">||</span> <span class="se">\</span>
</span><span class='line'>    <span class="o">{</span> <span class="nb">echo</span> <span class="s2">&quot;=== Translation not up to date:&quot;</span> <span class="o">&amp;&amp;</span> diff __po1 __po2 <span class="o">||</span> <span class="nb">echo</span><span class="p">;</span> <span class="o">}</span>
</span><span class='line'>rm __po1 __po2
</span></code></pre></td></tr></table></div></figure>


<p>Before and after running <code>makemessages</code>, I backup the PO file and restore it,
respectively. By doing this as <code>mv A B; cp B A; mv B A</code>, rather than just <code>cp
A B; mv B A</code>, the file retains its inode. Thus, editors will not falsely see
the file as changed outside the editor.</p>

<p>Even if you had already run <code>makemessages</code>, you also had to translate the newly
found strings. I check for both untranslated strings and unverified automatic
translations. The former appear as <code>msgstr ""</code>, but not every <code>msgstr ""</code> means
you forgot a translation; some of them just mark the beginning of a string
spanning multiple lines. So I do some <code>sed</code> magic to find the real culprits:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sed <span class="s1">&#39;$a\\&#39;</span> locale/da/LC_MESSAGES/django.po <span class="p">|</span> tac <span class="p">|</span> <span class="se">\</span>
</span><span class='line'>    sed <span class="s1">&#39;/^$/N;/\nmsgstr &quot;&quot;$/,/^msgid/!d&#39;</span> <span class="p">|</span> tac
</span></code></pre></td></tr></table></div></figure>


<p>While scanning, if <code>makemessages</code> finds a string that is close to something you
already translated, it will insert the existing translation and mark it as
a &ldquo;fuzzy&rdquo; match, so you can check it and remove the fuzzy label when the
translation is done. I find such unremoved &ldquo;fuzzy&rdquo; labels:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span> <span class="k">$(</span>grep -c <span class="s1">&#39;, fuzzy&#39;</span> locale/da/LC_MESSAGES/django.po<span class="k">)</span> -gt <span class="m">1</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;=== Fuzzy translation:&quot;</span> <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>    grep <span class="s1">&#39;, fuzzy&#39;</span> locale/da/LC_MESSAGES/django.po -A2 <span class="p">|</span> tail -n +5 <span class="o">&amp;&amp;</span> <span class="nb">echo</span>
</span></code></pre></td></tr></table></div></figure>


<a name="The.Full.Script"></a>
<h2>The Full Script</h2>

<p>With all the components of the script done, the whole script looks like this.
I call it <code>ok.sh</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>coverage run --branch --source<span class="o">=</span><span class="s1">&#39;.&#39;</span> --omit<span class="o">=</span><span class="s1">&#39;*/migrations/*,*test*,*settings*&#39;</span> <span class="se">\</span>
</span><span class='line'>    manage.py <span class="nb">test</span> -v <span class="m">0</span> 2&gt;<span class="p">&amp;</span><span class="m">1</span> <span class="p">|</span> head -n -4
</span><span class='line'>coverage report --fail-under<span class="o">=</span><span class="m">50</span> &gt;/dev/null <span class="o">||</span> coverage report <span class="p">|</span> sed -n <span class="s1">&#39;1p;$p&#39;</span> <span class="o">&amp;&amp;</span> <span class="nb">echo</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span> <span class="s2">&quot;$(./manage.py makemigrations --dry-run)&quot;</span> !<span class="o">=</span> <span class="s2">&quot;No changes detected&quot;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>    ./manage.py makemigrations --dry-run <span class="o">&amp;&amp;</span> <span class="nb">echo</span>
</span><span class='line'>
</span><span class='line'>flake8 . <span class="o">||</span> <span class="nb">echo</span>
</span><span class='line'>
</span><span class='line'>sed <span class="s1">&#39;/POT-Creation-Date/d&#39;</span> locale/da/LC_MESSAGES/django.po &gt; __po1
</span><span class='line'>mv locale/da/LC_MESSAGES/django.po<span class="o">{</span>,_orig<span class="o">}</span>
</span><span class='line'>cp locale/da/LC_MESSAGES/django.po<span class="o">{</span>_orig,<span class="o">}</span>
</span><span class='line'>./manage.py makemessages -v <span class="m">0</span> -a --no-location --no-obsolete
</span><span class='line'>sed <span class="s1">&#39;/POT-Creation-Date/d&#39;</span> locale/da/LC_MESSAGES/django.po &gt; __po2
</span><span class='line'>mv locale/da/LC_MESSAGES/django.po<span class="o">{</span>_orig,<span class="o">}</span>
</span><span class='line'>diff &lt;<span class="o">(</span>sort __po1<span class="o">)</span> &lt;<span class="o">(</span>sort __po2<span class="o">)</span> &gt;/dev/null <span class="o">||</span> <span class="se">\</span>
</span><span class='line'>    <span class="o">{</span> <span class="nb">echo</span> <span class="s2">&quot;=== Translation not up to date:&quot;</span> <span class="o">&amp;&amp;</span> diff __po1 __po2 <span class="o">||</span> <span class="nb">echo</span><span class="p">;</span> <span class="o">}</span>
</span><span class='line'>rm __po1 __po2
</span><span class='line'>
</span><span class='line'>sed <span class="s1">&#39;$a\\&#39;</span> locale/da/LC_MESSAGES/django.po <span class="p">|</span> tac <span class="p">|</span> <span class="se">\</span>
</span><span class='line'>    sed <span class="s1">&#39;/^$/N;/\nmsgstr &quot;&quot;$/,/^msgid/!d&#39;</span> <span class="p">|</span> tac
</span><span class='line'>
</span><span class='line'><span class="o">[</span> <span class="k">$(</span>grep -c <span class="s1">&#39;, fuzzy&#39;</span> locale/da/LC_MESSAGES/django.po<span class="k">)</span> -gt <span class="m">1</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;=== Fuzzy translation:&quot;</span> <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>    grep <span class="s1">&#39;, fuzzy&#39;</span> locale/da/LC_MESSAGES/django.po -A2 <span class="p">|</span> tail -n +5 <span class="o">&amp;&amp;</span> <span class="nb">echo</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is no explicit call to <code>./manage.py check</code> because it is called
implicitly by the other management commands. An ideal run of the script
produces no output, but if you made a lot of errors, it could look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./ok.sh 
</span><span class='line'>======================================================================
</span><span class='line'>FAIL: test_basic_addition (docs.tests.SimpleTest)
</span><span class='line'>----------------------------------------------------------------------
</span><span class='line'>Traceback (most recent call last):
</span><span class='line'>  File "/home/erw/hstareal/docs/tests.py", line 16, in test_basic_addition
</span><span class='line'>    self.assertEqual(1 + 1, 3)
</span><span class='line'>AssertionError: 2 != 3
</span><span class='line'>
</span><span class='line'>Migrations for 'requisitions':
</span><span class='line'>  0002_auto_20150605_1757.py:
</span><span class='line'>    - Alter field supplier_postcode on requisition
</span><span class='line'>
</span><span class='line'>./requisitions/models.py:123:80: E501 line too long (108 &gt; 79 characters)
</span><span class='line'>./requisitions/admin.py:194:25: F821 undefined name 'messages'
</span><span class='line'>./requisitions/admin.py:441:25: F821 undefined name 'messages'
</span><span class='line'>
</span><span class='line'>=== Translation not up to date:
</span><span class='line'>1541c1541,1543
</span><span class='line'>&lt; msgid "postcode"
</span><span class='line'>---
</span><span class='line'>&gt; #, fuzzy
</span><span class='line'>&gt; #| msgid "postcode"
</span><span class='line'>&gt; msgid "postal code"
</span><span class='line'>
</span><span class='line'>=== Fuzzy translation:
</span><span class='line'>#, fuzzy
</span><span class='line'>msgid "internal account type"
</span><span class='line'>msgstr "interne kontotyper"
</span></code></pre></td></tr></table></div></figure>


<p>Now, all that is required is to run this one script before committing. A CI
server could of course be nice, but for a small project, this might be fine,
and cheaper.</p>

<p>One thing that is missing is to make the check in lines 18&ndash;19 of the script
aware of untranslated strings that you don&rsquo;t need to translate in your own
project, because they are covered in Django&rsquo;s own translation. For example, my
404 page says &ldquo;Page not found&rdquo; which Django already knows how to translate into
70+ languages. The script could also be generalized to process all locales &mdash;
right now it is hardcoded for Danish.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Sound of E]]></title>
    <link href="http://blog.erw.dk/2015/04/06/the-sound-of-e/"/>
    <updated>2015-04-06T12:16:44+02:00</updated>
    <id>http://blog.erw.dk/2015/04/06/the-sound-of-e</id>
    <content type="html"><![CDATA[<p>E is the most common letter in many European languages. In English it makes up
12&ndash;13% of all letters written depending on source (see for example
<a href="http://en.wikipedia.org/wiki/Letter_frequency">Wikipedia</a> or
<a href="http://practicalcryptography.com/cryptanalysis/letter-frequencies-various-languages/">Practical Cryptography</a>). The second place is T with
around 9%. In Dutch, Danish, and German, &lsquo;E&rsquo; goes as high as 15&ndash;17%. But
should it really be this common?</p>

<!-- more -->


<p>That is a perhaps a difficult question to answer. Another question is: Is
E always E? And here, the answer is a clear no, at least if we think of writing
primarily as a representation of the spoken language. I will look at the sound
of E in the two languages I know the best: Danish and English.</p>

<a name="English"></a>
<h2>English</h2>

<p>In English, the two most well-known versions are the short and long Es:</p>

<ul>
<li>h<strong>e</strong>llo, <strong>e</strong>legant &mdash; <a href="http://en.wikipedia.org/wiki/Open-mid_front_unrounded_vowel">ɛ</a> &mdash; Short e</li>
<li><strong>e</strong>vil, h<strong>e</strong>, sc<strong>e</strong>ne &mdash; <a href="http://en.wikipedia.org/wiki/Close_front_unrounded_vowel">i:</a> &mdash; Long e</li>
</ul>


<p>These are however not the most <em>common</em> realizations of E. Those are instead
the following two, even though you probably don&rsquo;t give them much thought:</p>

<ul>
<li>en<strong>e</strong>my, elev<strong>e</strong>n &mdash; <a href="http://en.wikipedia.org/wiki/Mid_central_vowel">ə</a> &mdash; <a href="http://en.wikipedia.org/wiki/Schwa">Schwa</a>, a short, &ldquo;lazy&rdquo;
vowel made while relaxing the mouth. In many accents, the first e of
<strong>e</strong>leven is also a schwa.</li>
<li>slat<strong>e</strong>, grip<strong>e</strong>, don<strong>e</strong> &mdash; Silent!</li>
</ul>


<p>The schwa is the most common vowel sound in English, and every vowel can be
pronounced that way if unstressed (<strong>a</strong>bout, penc<strong>i</strong>l, el<strong>o</strong>quent,
s<strong>u</strong>pply, vin<strong>y</strong>l).
The silent E is also called <a href="http://en.wikipedia.org/wiki/Silent_e">magic E</a> if its presence in spelling
modifies the pronunciation of other vowels. Compare for example <em>slat</em> and
<em>slate</em>, <em>grip</em> and <em>gripe</em>. On the other hand, the e in <em>done</em> is truly
silent; <em>don</em> and <em>done</em> are pronounced the same.
But here are still more ways to pronounce E:</p>

<ul>
<li>d<strong>e</strong>ter, d<strong>e</strong>test &mdash; <a href="http://en.wikipedia.org/wiki/Near-close_near-front_unrounded_vowel">ɪ</a> &mdash; Same as th<strong>i</strong>ng</li>
<li><strong>e</strong>nvelope &mdash; <a href="http://en.wikipedia.org/wiki/Open-mid_front_unrounded_vowel">ɛ</a>, <a href="http://en.wikipedia.org/wiki/Open_back_rounded_vowel">ɒ</a>, or <a href="http://en.wikipedia.org/wiki/Open_back_unrounded_vowel">ɑ</a> &mdash; (&ldquo;en-&rdquo;, &ldquo;on-&rdquo;, &ldquo;arn-&rdquo;)</li>
</ul>


<p>&ldquo;Envelope&rdquo; comes from French, but none of the three English pronunciations of
its E match the French nasal <em>en</em> <a href="http://en.wikipedia.org/wiki/Nasal_vowel">ɑ̃</a>. They do however appear in other
English words such as <strong>e</strong>nd and the UK and US versions of
<a href="http://en.wiktionary.org/wiki/swan#Pronunciation">sw<strong>a</strong>n</a>, respectively. From French we also have</p>

<ul>
<li>resum<strong>e</strong>, fianc<strong>e</strong> &mdash; <a href="http://en.wikipedia.org/wiki/Close-mid_front_unrounded_vowel">e</a><a href="http://en.wikipedia.org/wiki/Near-close_near-front_unrounded_vowel">ɪ</a> &mdash; Also written é</li>
</ul>


<p>This is a <a href="http://en.wikipedia.org/wiki/Diphthong">diphthong</a>, or glide between two vowels, rather than
a pure vowel. It is again different from French, where é is simply pronounced
<a href="http://en.wikipedia.org/wiki/Close-mid_front_unrounded_vowel">e</a>. But the eɪ diphthong also appears in for example the English
pronunciation of Santa Fe from Spanish, and original English words such as
l<strong>a</strong>ne. (Though I always see this diphthong transcribed /eɪ/, I think many
dialects pronounce it [ɛɪ], i.e., with the sound <a href="http://en.wikipedia.org/wiki/Open-mid_front_unrounded_vowel">ɛ</a> from b<strong>e</strong>d, and
f<strong>a</strong>ce (which is, ironically, transcribed /feɪs/ on <a href="http://en.wiktionary.org/wiki/face#Pronunciation">Wiktionary</a>).)</p>

<p>There are also letter sequences that have special sounds:</p>

<ul>
<li>read<strong>er</strong>, play<strong>er</strong> &mdash; <a href="http://en.wikipedia.org/wiki/Mid_central_vowel">ə</a> (typical UK) or <a href="http://en.wikipedia.org/wiki/R-colored_vowel">ɝ</a> (typical US)</li>
<li>t<strong>er</strong>m, G<strong>er</strong>man &mdash; <a href="http://en.wikipedia.org/wiki/Open-mid_central_unrounded_vowel">ɜ</a> (typical UK) or <a href="http://en.wikipedia.org/wiki/R-colored_vowel">ɝ</a> (typical US)</li>
<li>Fr<strong>eu</strong>dian &mdash; <a href="http://en.wikipedia.org/wiki/Open-mid_back_rounded_vowel">ɔ</a><a href="http://en.wikipedia.org/wiki/Near-close_near-front_unrounded_vowel">ɪ</a></li>
<li>f<strong>eu</strong>d, c<strong>ue</strong>, n<strong>ew</strong>, <strong>eu</strong>phemism &mdash; <a href="http://en.wikipedia.org/wiki/Palatal_approximant">j</a><a href="http://en.wikipedia.org/wiki/Close_back_rounded_vowel">u:</a> &mdash; Here,
E only represents a <a href="http://en.wikipedia.org/wiki/Semivowel">semivowel</a>, or glide.</li>
</ul>


<p>I <a href="http://blog.erw.dk/2015/02/21/the-sound-of-r/">wrote about R</a> previously, and how it can influence vowels, which is
what happens in the two first cases above. I always see suffix <em>-er</em>
transcribed as schwa (<a href="http://en.wikipedia.org/wiki/Mid_central_vowel">ə</a>) for <a href="https://en.wikipedia.org/wiki/Rhotic_and_non-rhotic_accents">non-rhotic</a> accents (typical
of the UK), but I suspect some accents pronounce it with a slightly more
A-like&nbsp;<a href="http://en.wikipedia.org/wiki/Near-open_central_vowel">ɐ</a>, from where we get slang spellings such as <em>playa</em> and
<em>gangsta</em>.</p>

<p>So far we have eight pure vowel sounds (<a href="http://en.wikipedia.org/wiki/Open-mid_front_unrounded_vowel">ɛ</a>, <a href="http://en.wikipedia.org/wiki/Close_front_unrounded_vowel">i</a>, <a href="http://en.wikipedia.org/wiki/Near-close_near-front_unrounded_vowel">ɪ</a>,
<a href="http://en.wikipedia.org/wiki/Open_back_rounded_vowel">ɒ</a>, <a href="http://en.wikipedia.org/wiki/Open_back_unrounded_vowel">ɑ</a>, <a href="http://en.wikipedia.org/wiki/Mid_central_vowel">ə</a>, <a href="http://en.wikipedia.org/wiki/Open-mid_central_unrounded_vowel">ɜ</a>, <a href="http://en.wikipedia.org/wiki/R-colored_vowel">ɝ</a>) and three diphthongs
(<a href="http://en.wikipedia.org/wiki/Close-mid_front_unrounded_vowel">e</a><a href="http://en.wikipedia.org/wiki/Near-close_near-front_unrounded_vowel">ɪ</a>, <a href="http://en.wikipedia.org/wiki/Open-mid_back_rounded_vowel">ɔ</a><a href="http://en.wikipedia.org/wiki/Near-close_near-front_unrounded_vowel">ɪ</a>, <a href="http://en.wikipedia.org/wiki/Palatal_approximant">j</a><a href="http://en.wikipedia.org/wiki/Close_back_rounded_vowel">u</a>). I have not included E&rsquo;s
function in the words <em>awe</em> and <em>eau</em> (as in <em>eau de toilette</em>), and
<em>rheumatism</em>, because it could be argued that it is silent. Especially, <em>au</em>
(as in <em>coq au vin</em>), is also pronounced [<a href="http://en.wikipedia.org/wiki/Close-mid_back_rounded_vowel">o</a>] (at least in French).
The Danish inventory is similarly large:</p>

<a name="Danish"></a>
<h2>Danish</h2>

<ul>
<li>d<strong>e</strong>n &mdash; <a href="http://en.wikipedia.org/wiki/Open-mid_front_unrounded_vowel">ɛ</a> &mdash; h<strong>e</strong>llo</li>
<li>d<strong>e</strong>t &mdash; <a href="http://en.wikipedia.org/wiki/Close-mid_front_unrounded_vowel">e</a> &mdash; Close to r<strong>e</strong>port</li>
<li>d<strong>e</strong> &mdash; <a href="http://en.wikipedia.org/wiki/Close_front_unrounded_vowel">i</a> &mdash; Like h<strong>e</strong>, but short: happ<strong>y</strong></li>
<li>s<strong>e</strong> &mdash; <a href="http://en.wikipedia.org/wiki/Close-mid_front_unrounded_vowel">e</a><a href="http://en.wikipedia.org/wiki/St%C3%B8d">ˀ</a> &mdash; With <a href="http://en.wikipedia.org/wiki/St%C3%B8d"><em>stød</em></a>; Like the e of
fianc<strong>e</strong> said very quickly</li>
<li>j<strong>e</strong>g &mdash; <a href="http://en.wikipedia.org/wiki/Open_back_unrounded_vowel">ɑ</a> &mdash; f<strong>a</strong>ther. Actually part of the diphthong [ɑj], but
can be pronounced alone here.</li>
<li>spis<strong>e</strong> &mdash; <a href="http://en.wikipedia.org/wiki/Mid_central_vowel">ə</a> in emphatic speech &mdash; en<strong>e</strong>my</li>
<li>spis<strong>e</strong> &mdash; Silent in normal speech (<a href="http://en.wikipedia.org/wiki/Syllabic_consonant#Germanic_languages">assimilated schwa</a>)</li>
<li>spis<strong>er</strong> &mdash; <a href="http://en.wikipedia.org/wiki/Near-open_central_vowel">ɐ</a> &mdash; e and r merge. Close to <a href="https://en.wikipedia.org/wiki/Rhotic_and_non-rhotic_accents">non-rhotic</a>
both<strong>er</strong>, but distinct from <a href="http://en.wikipedia.org/wiki/Schwa">schwa</a>.</li>
<li><strong>e</strong>r &mdash; <a href="http://en.wikipedia.org/wiki/Near-open_front_unrounded_vowel">æ</a> &mdash; Influence from R, but not merged with it. Tr<strong>a</strong>p.</li>
</ul>


<p>With the above words being first two genders of <em>it</em>/<em>that</em>/<em>the</em>, then <em>they</em>,
<em>see</em>, <em>I</em>, 2x <em>eat</em>, <em>eats</em>, and <em>is</em>, these realizations of E are all part of
the core of the language and not due to any loanword; not any recent ones at
least. If we add those, we get for example:</p>

<ul>
<li>r<strong>eu</strong>matisme &mdash; <a href="http://en.wikipedia.org/wiki/Open-mid_back_unrounded_vowel">ʌ</a><a href="http://en.wikipedia.org/wiki/Palatal_approximant">j</a> &mdash; Close to t<strong>oy</strong></li>
<li>voy<strong>eu</strong>r &mdash; <a href="http://en.wikipedia.org/wiki/Open-mid_front_rounded_vowel">œ</a> &mdash; (New Zealand b<strong>ir</strong>d)</li>
<li>mili<strong>eu</strong> &mdash; <a href="http://en.wikipedia.org/wiki/Close-mid_front_rounded_vowel">ø</a> &mdash; (South African b<strong>ir</strong>d)</li>
</ul>


<p>The last one is cheating a bit because it is no longer an accepted spelling in
Danish, where we instead use the logical &ldquo;miljø&rdquo;. But this decision is rather
arbitrary. For example, 30 years ago, the Danish language board tried to
change, among other things, the spelling of <em>mayonnaise</em> to the more logical
<em>majonæse</em>. And <a href="http://sproget.dk/raad-og-regler/artikler-mv/sproget-jyllands-postens-sprogklumme/majonesekrigen-25-ar-efter">people hated it</a> (link in Danish), even though
French words like <em>liqueur</em>, <em>portrait</em>, and <em>capitaine</em> were already spelled
<em>likør</em>, <em>portræt</em>, and <em>kaptajn</em> at the time!</p>

<a name="The.Sound.of.E"></a>
<h2>The Sound of E</h2>

<p>I have found the sounds above by looking at and pronouncing many words, and
also by looking through lists of vowel sounds, and looking for English and
Danish words with those sounds. Though somewhat systematic, I may have missed
some sounds of E. But what is interesting is that my list alone spans most of
our vowel capabilities! It goes from <a href="http://en.wikipedia.org/wiki/Close_vowel">high</a> and
<a href="http://en.wikipedia.org/wiki/Front_vowel">front</a> to <a href="http://en.wikipedia.org/wiki/Open_vowel">low</a> and <a href="http://en.wikipedia.org/wiki/Back_vowel">back</a>. An
example of the first is f<strong>ee</strong>t/d<strong>e</strong> [i], with the tongue high in the mouth
and the sound made near the front. The other end is f<strong>a</strong>ther/j<strong>e</strong>g [ɑ] with
the tongue low in the mouth and the sound made at the back.</p>

<p><span class='caption-wrapper right'><img class='caption' src='http://blog.erw.dk/images/posts/IPA_vowel_chart_2005_erw.png' width='' height='' alt='This work, English/Danish Es, [CC&nbsp;BY-SA&nbsp;4.0] [cc-by-sa4] by Erik R. Wognsen, is derived from [IPA vowel chart 2005] [wf_vowel_chart], [CC&nbsp;BY-SA&nbsp;3.0] [cc-by-sa3]'><span class='caption-text'>This work, English/Danish Es, <a href="http://creativecommons.org/licenses/by-sa/4.0/">CC&nbsp;BY-SA&nbsp;4.0</a> by Erik R. Wognsen, is derived from <a href="http://en.wikipedia.org/wiki/File:IPA_vowel_chart_2005.png">IPA vowel chart 2005</a>, <a href="http://creativecommons.org/licenses/by-sa/3.0/">CC&nbsp;BY-SA&nbsp;3.0</a></span></span></p>

<p>I have illustrated this above. Purple vowels are common to English and Danish,
blue vowels are English, and red are Danish. The blob sizes represent my rough
guess to how often these sounds are represented by the letter E, graduated in
three levels. For the common vowel sounds, e and ɑ are used more often in
Danish than in English, while i is used more in English. ɛ is used often in
both, and ə even more. For diphthongs, only the first component is shown to
keep it simple.</p>

<a name="Does.it.have.to.be.like.this."></a>
<h2>Does it have to be like this?</h2>

<p>As we can see from the picture, the letter E is perhaps so full of meaning that
it is almost meaningless. So we could ask ourselves whether it has to be like
this? Or, could have a more <a href="http://en.wikipedia.org/wiki/Phonemic_orthography">regular spelling</a>, so kids
could learn to read in <a href="http://www.theatlantic.com/education/archive/2015/02/how-the-english-language-is-holding-kids-back/385291/">months rather than years</a>?
This will be a future topic!</p>

<a name="E.on.the.Keyboard"></a>
<h2>E on the Keyboard</h2>

<p>In the meantime, E is still the most common letter in many languages. So how
easy should it be to type on a computer keyboard? Very easy, preferably.</p>

<p>The ergonomic, three-dimensional <a href="http://upload.wikimedia.org/wikipedia/commons/4/45/Maltron_Dual_Hand_keyboard_with_Malt_Key_distribution.jpg">Maltron keyboard</a> goes as far as to
put the letter E on the strongest finger: the thumb! Most other &ldquo;normal&rdquo;
layouts that improve on QWERTY put E on the home row, where you rest your hands
when <a href="http://en.wikipedia.org/wiki/Touch_typing">touch typing</a>. A good example is the Colemak keyboard
layout which I <a href="http://blog.erw.dk/2015/02/27/4-years-with-colemak/">wrote about recently</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Lithuanian]]></title>
    <link href="http://blog.erw.dk/2015/03/27/learning-lithuanian/"/>
    <updated>2015-03-27T11:21:54+01:00</updated>
    <id>http://blog.erw.dk/2015/03/27/learning-lithuanian</id>
    <content type="html"><![CDATA[<p>Lithuanian is a very old language with connections to Latin, Ancient Greek and
Sanskrit. This quote is <a href="http://termcoord.eu/2014/08/ever-wanted-travel-back-time-talk-lithuanian-3/">attributed</a> to French linguist Antoine
Meillet:</p>

<blockquote><p>Anyone wishing to hear how Indo-Europeans spoke should come and listen to
a Lithuanian peasant.</p></blockquote>

<p><span class='caption-wrapper right'><img class='caption' src='http://blog.erw.dk/images/posts/lt-flag.jpg' width='512' height='365' alt='[Lithuanian Embassy Flag] [flickr_flag] by [Mr.TinDC] [flickr_mr] is licensed under [CC BY 2.0](https://creativecommons.org/licenses/by/2.0/)'><span class='caption-text'><a href="https://www.flickr.com/photos/mr_t_in_dc/3415891618/">Lithuanian Embassy Flag</a> by <a href="https://www.flickr.com/photos/mr_t_in_dc/">Mr.TinDC</a> is licensed under <a href="https://creativecommons.org/licenses/by/2.0/">CC BY 2.0</a></span></span></p>

<p>This is in itself very interesting, also because Lithuanian is less well-known,
and has survived bans and attempts of being eradicated in the past. I also have
a personal connection to the language because it is the native language of
<a href="http://www.bachata-geek.me/about-me/">my girlfriend</a> and her family. I am trying to learn it, and while I (slowly)
do so, two things stand out to me:</p>

<p>The first is that in Lithuanian, when you read a word, you know (almost) how to
pronounce it. This is very different from for example English and Danish, where
the connection between writing and pronunciation is complicated and fraught
with exceptions. See for example <a href="http://en.wikipedia.org/wiki/Ghoti">ghoti</a>, pronounced &ldquo;fish&rdquo;.</p>

<p>The second is that Lithuanian uses seven <em>cases</em>, which means a word has seven
different forms depending on its role in a sentence. A remnant of a case system
is seen in personal pronouns in English: <em>I helped her, and she helped me.</em> &ldquo;I&rdquo;
and &ldquo;me&rdquo;, as well as &ldquo;she&rdquo; and &ldquo;her&rdquo;, have the same &ldquo;meaning&rdquo;, but a different
form depending on roles such as subject and object. In Lithuanian, every noun
and adjective changes depending on role. And these roles include cool things
like being a location or an instrument or means of doing something!</p>

<!-- more -->


<a name="Writing"></a>
<h2>Writing</h2>

<p>Lithuanian is based on the Latin alphabet, but adds and removes some letters.
My favorites are the three extra consonants &mdash; Č, Š, and Ž &mdash; and their
logic:</p>

<ul>
<li>S is as in most languages: Like the &rsquo;s&#8217; in <strong>s</strong>peak in English.</li>
<li>Š is like the &lsquo;sh&rsquo; in <strong>sh</strong>are, or Engli<strong>sh</strong>.</li>
<li>Z is like a voiced S: Like &lsquo;z&rsquo; in <strong>z</strong>oo.</li>
<li>Ž, similarly, is like a voiced Š: Like the &rsquo;s&#8217; in mea<strong>s</strong>ure, the &lsquo;si&rsquo; in
vi<strong>si</strong>on, or the &lsquo;g&rsquo; in gara<strong>g</strong>e.</li>
<li>C is pronounced like &lsquo;ts&rsquo;, as in roo<strong>ts</strong>.</li>
<li>Č follows the pattern of S/Š and Z/Ž: It&rsquo;s like the &lsquo;ch&rsquo; in <strong>ch</strong>erry.</li>
</ul>


<p>I think it is interesting to have separate letters for these sounds. They are
compact and more predictable than in English where for example &lsquo;ch&rsquo; can be
pronounced as in &ldquo;<strong>ch</strong>erry&rdquo; (the standard č-sound), &ldquo;stoma<strong>ch</strong>&rdquo; (k-sound),
&ldquo;ma<strong>ch</strong>ine&rdquo; (š-sound), or even &ldquo;ya<strong>ch</strong>t&rdquo; (no sound).</p>

<p>That is not to say that they are 100% predictable. Coca-Cola, for example, is
still written Coca-Cola (even though I do enjoy pronouncing it &ldquo;tsotsa-tsola&rdquo;
for fun). But some imported words do change spelling. Can you guess what &ldquo;pica&rdquo;
is? (I&rsquo;d love to have some.)</p>

<p>All in all, the spelling is fairly systematic, but regarding stress/accent,
it&rsquo;s no better than English or Danish. From my <a href="https://www.amazon.com/Complete-Lithuanian-Teach-Yourself-Language/dp/0071765980">Lithuanian book</a>:</p>

<blockquote><p>Rules concerning word stress are really quite complicated in Lithuanian,
unfortunately, so it is best if you try to imitate both pronunciation and
stress [when listening].</p></blockquote>

<p>This is opposed to a language such as Spanish, where accents mark exceptions.
Most unmarked words are stressed on the penultimate (next-to-last) syllable, so
for example if <em>corazón</em> was written without the accent, it should be
pronounced co<strong>ra</strong>zon rather than cora<strong>zon</strong>.</p>

<p>But perhaps technology is changing this. Whereas accents and other
<a href="http://en.wikipedia.org/wiki/Diacritic">diacritics</a> are easy to add in handwriting, it takes
more time on computers and mobile phones, enough that they are often skipped in
casual writing, reducing the logic of the written language, in Spanish as well
as in Lithuanian. But that is all part of the evolution of languages.</p>

<a name="In.Any.Case"></a>
<h2>In Any Case</h2>

<p>In English, words&#8217; roles in sentences (subject, object, etc.) are marked with
word order and prepositions (to, in, on, etc.). But there is another way of
marking them, namely cases. Lithuanian has seven:</p>

<ul>
<li>Nominative &ndash; as subject (unmarked in English)</li>
<li>Genitive &ndash; possessive (of, &rsquo;s)</li>
<li>Dative &ndash; as indirect object (for, to)</li>
<li>Accusative &ndash; as direct object (unmarked in English)</li>
<li>Instrumental &ndash; as instrument/tool/means/company (using, with)</li>
<li>Locative &ndash; location (in)</li>
<li>Vocative &ndash; addressing someone (unmarked in English)</li>
</ul>


<p>Each noun has these seven forms, for example
al<strong>us</strong> (beer),
al<strong>aus</strong> (of beer, beer&rsquo;s),
al<strong>ui</strong> (for beer),
al<strong>ų</strong> (beer as object),
al<strong>umi</strong> (with beer),
al<strong>uje</strong> (in beer),
al<strong>au</strong> (O, beer!).
And then it has another seven forms in plural.
Here follows some examples of case use that I like.</p>

<a name="Examples"></a>
<h3>Examples</h3>

<p>The first is about Vilnius, the capital of Lithuania, and the locative case:</p>

<ul>
<li>Vilniaus centre yra daug bažnyčių.</li>
<li>Vilnius-GEN center-LOC are many church-GEN-PLUR.</li>
<li>of-Vilnius in-center are many of-churches.</li>
<li>There are many churches in the center of Vilnius.</li>
</ul>


<p>When I first decoded this sentence I was stoked. It is such a different way of
representing information. Another example I saw in an electrician&rsquo;s advert:</p>

<ul>
<li>Šviesa jūsų projektams.</li>
<li>Light-NOM you-GEN project-DAT-PLUR.</li>
<li>Light of-you for-projects.</li>
<li>Light for your projects.</li>
</ul>


<p>Last Christmas I got a present with a label with a single word on it: <em>Erikui</em>.
It is the dative case of my name so it means &ldquo;for Erik&rdquo;. But this does requires
a name with a special ending to fit into the declension paradigms. My
Lithuanian name is Erikas. Some possible endings are -as, -is, -us (masculine),
and -a and -ė (feminine).</p>

<p>The vocative (addressing) case is especially relevant for names. For example,
my girlfriend&rsquo;s dad&rsquo;s name is Tomas. But to get someone&rsquo;s attention, you use
the vocative: Tomai. This was weird to me at first, but on the other hand, if
you hear your name spoken, you can tell whether people are talking <em>to</em> you or
<em>about</em> you, which is nifty. Here are some examples of the instrumental case:</p>

<ul>
<li>Aš žaidžiu kamuoliu &#8594; I-NOM play ball-INS &#8594; I play with-ball &#8594; I play with a ball</li>
<li>Važiuoju autobusu su tavimi &#8594; (I) go bus-INS with you-INS &#8594; I go by bus with you</li>
</ul>


<p>As you can see in the second example, prepositions are still used. In this case
an explicit &ldquo;with&rdquo; to say &ldquo;with you as a companion&rdquo; rather than &ldquo;with you as
a means&rdquo;. Languages with even more cases such as Finnish and Estonian express
relationships like &ldquo;to&rdquo; and &ldquo;from&rdquo; <a href="http://en.wikipedia.org/wiki/Locative_case#Estonian">as cases</a>, while they
are prepositions in Lithuanian. In Lithuanian, prepositions can also be
overloaded. For example <em>po</em> + instrumental means &ldquo;under&rdquo; while <em>po</em> + genitive
means &ldquo;after&rdquo;.</p>

<p>Finally, a cute example of the locative:</p>

<ul>
<li>Du viename.</li>
<li>Two-NOM one-LOC.</li>
<li>Two in-one.</li>
<li>Two in one.</li>
</ul>


<a name="Learning.to.Count"></a>
<h3>Learning to Count</h3>

<p>I am fascinated with this case system, but it also takes a considerable amount
of time to build a vocabulary. One thing that is especially hard is counting.
As you have just seen, numbers can be used in the locative. But typically, the
case of the number just matches what it counts. &ldquo;Vien<strong>as</strong> tašk<strong>as</strong>,
penk<strong>i</strong> tašk<strong>ai</strong>&rdquo; means &ldquo;one point, five points&rdquo; in the nominative case.
But as an object in the sentence, it is different:</p>

<ul>
<li>Turiu vien<strong>ą</strong> tašk<strong>ą</strong> &mdash; I have one point (accusative singular)</li>
<li>Turiu penk<strong>is</strong> tašk<strong>us</strong> &mdash; I have five points (accusative plural)</li>
</ul>


<p>And on top of that, the genitive overrides for some numbers, for example those
ending in zero, while those ending in one are singular, even if the number
itself is not:</p>

<ul>
<li>Turiu dešimt tašk<strong>ų</strong> &mdash; I have 10 points (genitive plural)</li>
<li>Turiu dvidešimt tašk<strong>ų</strong> &mdash; I have 20 points (genitive plural)</li>
<li>Turiu dvidešimtvien<strong>ą</strong> tašk<strong>ą</strong> &mdash; I have 21 points (accusative
<em>singular</em>)</li>
</ul>


<p>Then add to that that numbers also decline for gender, and you have not one
word meaning &ldquo;two&rdquo;, but 14 (7 cases * 2 genders). Then you can add the ordinal
(&ldquo;second&rdquo;), which in Lithuanian has 7 cases * 2 genders * 2 numbers
(singular/plural) * 2 forms (pronominal/non-pronominal) + a neuter form =
<a href="http://en.wiktionary.org/wiki/antras#Declension">57 forms</a>.</p>

<p>On top of the two main types of numbers &mdash; cardinal/quantitative (one, two,
etc.) and ordinal (first, second, etc.) &mdash; Lithuanian has two more. The first
is a &ldquo;super-plural&rdquo; for counting groups and <a href="http://en.wikipedia.org/wiki/Plurale_tantum">plurals-only</a>, which,
in English, are words like scissors, clothes and electronics. The second is
a collective type for the size of groups: Where English speakers can talk about
a pair, a dozen, a hundred, or a million of x, Lithuanians can equally easily
talk about groups of any size.</p>

<a name="The.Beauty"></a>
<h2>The Beauty</h2>

<p>I am told by my better half that the collective numbers are not common in
everyday use, and that probably holds for some of the other grammatical
features I come across as well. But while some people learn about the roots of
Indo-European languages from Latin or Ancient Greek, I do it from Lithuanian.
Plus I learn to speak my girlfriend&rsquo;s language at the same time. And Lithuanian
is great for creating affectionate words! As written by Élisée Reclus in
Nouvelle géographie universelle:</p>

<blockquote><p>Of all European languages, the Lithuanian has the greatest number of
affectionate and diminutive terms, more than the Spanish or Italian, even
more than Russian, and they can be multiplied almost indefinitely by adding
them to verbs and adverbs as well as adjectives and nouns. [&hellip;]</p>

<p>If the value of a nation in the total sum humanity were to be measured by the
beauty of its language, the Lithuanian ought to have the first place among
the nations of Europe.</p></blockquote>

<p><em>Update 2018-01-01: Fixed attribution of the last quote (thanks, Robertas) and
another source.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging Complex Numbers]]></title>
    <link href="http://blog.erw.dk/2015/03/20/debugging-complex-numbers/"/>
    <updated>2015-03-20T20:34:38+01:00</updated>
    <id>http://blog.erw.dk/2015/03/20/debugging-complex-numbers</id>
    <content type="html"><![CDATA[<p>For my research I needed to implement a <a href="http://en.wikipedia.org/wiki/Discrete_Fourier_transform">discrete Fourier transform</a> in
the C-like programming language of the <a href="http://www.uppaal.org/">UPPAAL</a> model checker. One
option would be to port an existing C library such as <a href="http://www.fftw.org">FFTW</a>, but for
a proof of concept, porting a large, powerful library would be much slower
and less instructive than implementing a simpler algorithm myself.
Programming rant coming up.</p>

<!-- more -->


<p>I went with the <a href="http://en.wikipedia.org/wiki/Cooley%E2%80%93Tukey_FFT_algorithm#The_radix-2_DIT_case">Cooley-Tukey radix-2 decimation-in-time fast Fourier transform</a>,
which, despite the name, is one of the simpler choices.
Pseudocode adapted from Wikipedia:</p>

<pre><code>X[0,...,N−1] ← ditfft2(x, N, s):             DFT of (x[0], x[s], x[2s], ..., x[(N-1)s]):
    if N = 1 then
        X[0] ← x[0]                                  trivial size-1 DFT base case
    else
        X[0,...,N/2−1] ← ditfft2(x, N/2, 2s)         DFT of (x[0], x[2s], x[4s], ...)
        X[N/2,...,N−1] ← ditfft2(x+s, N/2, 2s)       DFT of (x[s], x[s+2s], x[s+4s], ...)
        for k = 0 to N/2−1                           combine DFTs of two halves into full DFT:
            t ← X[k]
            X[k] ← t + exp(−2πi k/N) X[k+N/2]
            X[k+N/2] ← t − exp(−2πi k/N) X[k+N/2]
        endfor
    endif

Here, ditfft2(x,N,1), computes X=DFT(x) out-of-place by a radix-2 DIT FFT,
where N is an integer power of 2 and s=1 is the stride of the input
x array. x+s denotes the array starting with xs.
</code></pre>

<p>I decided to handle the problem in two stages: 1) Implement the algorithm in
a high-level language (Python) to make sure I get the algorithm itself right,
and 2) reduce the use of high-level features until it is trivial to port to
a C-like language.</p>

<p>List handling in Python is always a charm, but the main high-level feature
I wanted was the handling of <a href="http://en.wikipedia.org/wiki/Complex_number">complex numbers</a> (notice the <code>−2πi</code>s
above). My first high-level version worked nicely &mdash; at least as compared with
the <code>fft</code> function of <a href="https://en.wikipedia.org/wiki/R_%28programming_language%29">R</a> with a few sample inputs. Code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="kn">import</span> <span class="nn">math</span>
</span><span class='line'><span class="n">EVEN</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">ODD</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">fft1</span><span class="p">(</span><span class="n">a</span><span class="p">):</span>
</span><span class='line'>    <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">a</span>
</span><span class='line'>    <span class="n">c</span> <span class="o">=</span> <span class="n">fft1</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">EVEN</span><span class="p">::</span><span class="mi">2</span><span class="p">])</span> <span class="o">+</span> <span class="n">fft1</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">ODD</span><span class="p">::</span><span class="mi">2</span><span class="p">])</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">):</span>
</span><span class='line'>        <span class="n">t</span> <span class="o">=</span> <span class="n">c</span><span class="p">[</span><span class="n">k</span><span class="p">]</span>
</span><span class='line'>        <span class="n">c</span><span class="p">[</span><span class="n">k</span><span class="p">]</span>         <span class="o">=</span> <span class="n">t</span> <span class="o">+</span> <span class="nb">pow</span><span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">e</span><span class="p">,</span> <span class="o">-</span><span class="mi">2j</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">pi</span> <span class="o">*</span> <span class="n">k</span> <span class="o">/</span> <span class="n">n</span><span class="p">)</span> <span class="o">*</span> <span class="n">c</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">]</span>
</span><span class='line'>        <span class="n">c</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">t</span> <span class="o">-</span> <span class="nb">pow</span><span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">e</span><span class="p">,</span> <span class="o">-</span><span class="mi">2j</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">pi</span> <span class="o">*</span> <span class="n">k</span> <span class="o">/</span> <span class="n">n</span><span class="p">)</span> <span class="o">*</span> <span class="n">c</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">]</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">c</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next step was to handle the complex numbers manually, so they can be
represented by two doubles. At first I tried to handle the general case of
raising a real to a complex, but that was harder than I thought it would be.
Luckily my colleague Louise could derive it for me:</p>

<pre><code> a + bi      a                   a
x        =  x  cos(b ln(x)) + i x  sin(b ln(x))
</code></pre>

<p>(and I wish adding MathJax (LaTeX) to Octopress was a one-minute job, but it isn&rsquo;t.)</p>

<p>However, if I had remembered that in my case <em>x</em> = <em>e</em> and <em>a</em> = 0, it would
have been simpler. It even has a name, <a href="http://en.wikipedia.org/wiki/Euler%27s_formula">Euler&rsquo;s formula</a>, and it is
mindboggling in all its simple beauty:</p>

<pre><code> bi
e    =  cos(b) + i sin(b)
</code></pre>

<p>At least we both learned something about complex numbers!</p>

<p>The next (buggy) version of my code was this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="k">def</span> <span class="nf">fft2</span><span class="p">(</span><span class="n">a_re</span><span class="p">,</span> <span class="n">a_im</span><span class="p">):</span>
</span><span class='line'>    <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">a_re</span><span class="p">)</span>
</span><span class='line'>    <span class="k">assert</span> <span class="n">n</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">a_im</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="n">a_re</span><span class="p">,</span> <span class="n">a_im</span><span class="p">)</span>
</span><span class='line'>    <span class="n">c_re</span><span class="p">,</span> <span class="n">c_im</span> <span class="o">=</span> <span class="n">fft2</span><span class="p">(</span><span class="n">a_re</span><span class="p">[</span><span class="n">EVEN</span><span class="p">::</span><span class="mi">2</span><span class="p">],</span> <span class="n">a_im</span><span class="p">[</span><span class="n">EVEN</span><span class="p">::</span><span class="mi">2</span><span class="p">])</span>
</span><span class='line'>    <span class="n">c_re2</span><span class="p">,</span> <span class="n">c_im2</span> <span class="o">=</span> <span class="n">fft2</span><span class="p">(</span><span class="n">a_re</span><span class="p">[</span><span class="n">ODD</span><span class="p">::</span><span class="mi">2</span><span class="p">],</span> <span class="n">a_im</span><span class="p">[</span><span class="n">ODD</span><span class="p">::</span><span class="mi">2</span><span class="p">])</span>
</span><span class='line'>    <span class="n">c_re</span> <span class="o">+=</span> <span class="n">c_re2</span>
</span><span class='line'>    <span class="n">c_im</span> <span class="o">+=</span> <span class="n">c_im2</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">):</span>
</span><span class='line'>        <span class="n">t_re</span><span class="p">,</span> <span class="n">t_im</span> <span class="o">=</span> <span class="n">c_re</span><span class="p">[</span><span class="n">k</span><span class="p">],</span> <span class="n">c_im</span><span class="p">[</span><span class="n">k</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">c_re</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">t_re</span> <span class="o">+</span> <span class="n">math</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">pi</span> <span class="o">*</span> <span class="n">k</span> <span class="o">/</span> <span class="n">n</span><span class="p">)</span> <span class="o">*</span> <span class="n">c_re</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">]</span>
</span><span class='line'>        <span class="n">c_im</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">t_im</span> <span class="o">+</span> <span class="n">math</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">pi</span> <span class="o">*</span> <span class="n">k</span> <span class="o">/</span> <span class="n">n</span><span class="p">)</span> <span class="o">*</span> <span class="n">c_im</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">]</span>
</span><span class='line'>        <span class="n">c_re</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">t_re</span> <span class="o">-</span> <span class="n">math</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">pi</span> <span class="o">*</span> <span class="n">k</span> <span class="o">/</span> <span class="n">n</span><span class="p">)</span> <span class="o">*</span> <span class="n">c_re</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">]</span>
</span><span class='line'>        <span class="n">c_im</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">t_im</span> <span class="o">-</span> <span class="n">math</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">pi</span> <span class="o">*</span> <span class="n">k</span> <span class="o">/</span> <span class="n">n</span><span class="p">)</span> <span class="o">*</span> <span class="n">c_im</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">c_re</span><span class="p">,</span> <span class="n">c_im</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>It didn&rsquo;t give the same output as the first one, and I couldn&rsquo;t see why, so
I put both versions in one to debug them in lockstep:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="k">def</span> <span class="nf">fft3</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">a_re</span><span class="p">,</span> <span class="n">a_im</span><span class="p">):</span>
</span><span class='line'>    <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'>    <span class="k">assert</span> <span class="n">n</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">a_re</span><span class="p">)</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">a_im</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">a_re</span><span class="p">,</span> <span class="n">a_im</span><span class="p">)</span>
</span><span class='line'>    <span class="n">c</span><span class="p">,</span> <span class="n">c_re</span><span class="p">,</span> <span class="n">c_im</span> <span class="o">=</span> <span class="n">fft3</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">EVEN</span><span class="p">::</span><span class="mi">2</span><span class="p">],</span> <span class="n">a_re</span><span class="p">[</span><span class="n">EVEN</span><span class="p">::</span><span class="mi">2</span><span class="p">],</span> <span class="n">a_im</span><span class="p">[</span><span class="n">EVEN</span><span class="p">::</span><span class="mi">2</span><span class="p">])</span>
</span><span class='line'>    <span class="n">c2</span><span class="p">,</span> <span class="n">c_re2</span><span class="p">,</span> <span class="n">c_im2</span> <span class="o">=</span> <span class="n">fft3</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">ODD</span><span class="p">::</span><span class="mi">2</span><span class="p">],</span> <span class="n">a_re</span><span class="p">[</span><span class="n">ODD</span><span class="p">::</span><span class="mi">2</span><span class="p">],</span> <span class="n">a_im</span><span class="p">[</span><span class="n">ODD</span><span class="p">::</span><span class="mi">2</span><span class="p">])</span>
</span><span class='line'>    <span class="n">c</span> <span class="o">+=</span> <span class="n">c2</span>
</span><span class='line'>    <span class="k">del</span> <span class="n">c2</span>
</span><span class='line'>    <span class="n">c_re</span> <span class="o">+=</span> <span class="n">c_re2</span>
</span><span class='line'>    <span class="k">del</span> <span class="n">c_re2</span>
</span><span class='line'>    <span class="n">c_im</span> <span class="o">+=</span> <span class="n">c_im2</span>
</span><span class='line'>    <span class="k">del</span> <span class="n">c_im2</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">):</span>
</span><span class='line'>        <span class="n">t</span><span class="p">,</span> <span class="n">t_re</span><span class="p">,</span> <span class="n">t_im</span> <span class="o">=</span> <span class="n">c</span><span class="p">[</span><span class="n">k</span><span class="p">],</span> <span class="n">c_re</span><span class="p">[</span><span class="n">k</span><span class="p">],</span> <span class="n">c_im</span><span class="p">[</span><span class="n">k</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">c</span><span class="p">[</span><span class="n">k</span><span class="p">]</span>         <span class="o">=</span> <span class="n">t</span> <span class="o">+</span> <span class="nb">pow</span><span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">e</span><span class="p">,</span> <span class="o">-</span><span class="mi">2j</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">pi</span> <span class="o">*</span> <span class="n">k</span> <span class="o">/</span> <span class="n">n</span><span class="p">)</span> <span class="o">*</span> <span class="n">c</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">]</span>
</span><span class='line'>        <span class="n">c</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">t</span> <span class="o">-</span> <span class="nb">pow</span><span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">e</span><span class="p">,</span> <span class="o">-</span><span class="mi">2j</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">pi</span> <span class="o">*</span> <span class="n">k</span> <span class="o">/</span> <span class="n">n</span><span class="p">)</span> <span class="o">*</span> <span class="n">c</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">c_re</span><span class="p">[</span><span class="n">k</span><span class="p">]</span>         <span class="o">=</span> <span class="n">t_re</span> <span class="o">+</span> <span class="n">math</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">pi</span> <span class="o">*</span> <span class="n">k</span> <span class="o">/</span> <span class="n">n</span><span class="p">)</span> <span class="o">*</span> <span class="n">c_re</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">]</span>
</span><span class='line'>        <span class="n">c_im</span><span class="p">[</span><span class="n">k</span><span class="p">]</span>         <span class="o">=</span> <span class="n">t_im</span> <span class="o">+</span> <span class="n">math</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">pi</span> <span class="o">*</span> <span class="n">k</span> <span class="o">/</span> <span class="n">n</span><span class="p">)</span> <span class="o">*</span> <span class="n">c_im</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">]</span>
</span><span class='line'>        <span class="n">c_re</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">t_re</span> <span class="o">-</span> <span class="n">math</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">pi</span> <span class="o">*</span> <span class="n">k</span> <span class="o">/</span> <span class="n">n</span><span class="p">)</span> <span class="o">*</span> <span class="n">c_re</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">]</span>
</span><span class='line'>        <span class="n">c_im</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">t_im</span> <span class="o">-</span> <span class="n">math</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">pi</span> <span class="o">*</span> <span class="n">k</span> <span class="o">/</span> <span class="n">n</span><span class="p">)</span> <span class="o">*</span> <span class="n">c_im</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">c_re</span><span class="p">,</span> <span class="n">c_im</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Testing still showed that the approaches disagreed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="n">x1</span><span class="p">,</span> <span class="n">x2_re</span><span class="p">,</span> <span class="n">x2_im</span> <span class="o">=</span> <span class="n">fft3</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">complex</span><span class="p">,</span> <span class="n">a</span><span class="p">),</span> <span class="n">a</span><span class="p">,</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">))</span>
</span><span class='line'><span class="n">x2</span> <span class="o">=</span> <span class="p">[</span><span class="nb">complex</span><span class="p">(</span><span class="n">re</span><span class="p">,</span> <span class="n">im</span><span class="p">)</span> <span class="k">for</span> <span class="n">re</span><span class="p">,</span> <span class="n">im</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">x2_re</span><span class="p">,</span> <span class="n">x2_im</span><span class="p">)]</span>
</span><span class='line'><span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">x1</span><span class="p">,</span> <span class="n">x2</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">x</span> <span class="o">-</span> <span class="n">y</span><span class="p">,</span> <span class="s">&#39;!&#39;</span> <span class="o">*</span> <span class="mi">10</span> <span class="k">if</span> <span class="n">x</span> <span class="o">-</span> <span class="n">y</span> <span class="o">!=</span> <span class="mi">0</span> <span class="k">else</span> <span class="s">&#39;&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="p">(</span><span class="mi">4</span><span class="o">+</span><span class="mi">0j</span><span class="p">)</span> <span class="p">(</span><span class="mi">4</span><span class="o">+</span><span class="mi">0j</span><span class="p">)</span> <span class="mi">0j</span>
</span><span class='line'><span class="p">(</span><span class="mf">1.22464679915e-16</span><span class="o">-</span><span class="mi">2j</span><span class="p">)</span> <span class="p">(</span><span class="mf">1.22464679915e-16</span><span class="o">+</span><span class="mi">0j</span><span class="p">)</span> <span class="o">-</span><span class="mi">2j</span> <span class="err">!!!!!!!!!!</span>
</span><span class='line'><span class="mi">0j</span> <span class="mi">0j</span> <span class="mi">0j</span>
</span><span class='line'><span class="p">(</span><span class="o">-</span><span class="mf">1.22464679915e-16</span><span class="o">+</span><span class="mi">2j</span><span class="p">)</span> <span class="p">(</span><span class="o">-</span><span class="mf">1.22464679915e-16</span><span class="o">+</span><span class="mi">0j</span><span class="p">)</span> <span class="mi">2j</span> <span class="err">!!!!!!!!!!</span>
</span></code></pre></td></tr></table></div></figure>


<p>Stepping through the code in Winpdb, I found three things:</p>

<ul>
<li>Debugging is easier if you clean up temp variables in the namespace, hence
the <code>del</code> statements in <code>fft3</code>.</li>
<li>Debugging is easier if the complex numbers are represented as complex numbers
all the time, hence the test code giving <code>map(complex, a)</code> as the first
argument to <code>fft3</code> (rather than simply giving <code>a</code>).</li>
<li>Line 21 was the first to show the bug (for the given input): I had been so
focused on complex exponentiation that I had forgot all about
<a href="http://en.wikipedia.org/wiki/Complex_number#Multiplication_and_division">complex multiplication</a>! Which is btw

<ul>
<li>(a + bi) (c + di) = (ac - bd) + (bc + ad) i</li>
</ul>
</li>
</ul>


<p>Now I (naively hoped I) was done. Replacing</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="n">c_re</span><span class="p">[</span><span class="n">k</span><span class="p">]</span>         <span class="o">=</span> <span class="n">t_re</span> <span class="o">+</span> <span class="n">math</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">pi</span> <span class="o">*</span> <span class="n">k</span> <span class="o">/</span> <span class="n">n</span><span class="p">)</span> <span class="o">*</span> <span class="n">c_re</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">]</span>
</span><span class='line'><span class="n">c_im</span><span class="p">[</span><span class="n">k</span><span class="p">]</span>         <span class="o">=</span> <span class="n">t_im</span> <span class="o">+</span> <span class="n">math</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">pi</span> <span class="o">*</span> <span class="n">k</span> <span class="o">/</span> <span class="n">n</span><span class="p">)</span> <span class="o">*</span> <span class="n">c_im</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">]</span>
</span><span class='line'><span class="n">c_re</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">t_re</span> <span class="o">-</span> <span class="n">math</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">pi</span> <span class="o">*</span> <span class="n">k</span> <span class="o">/</span> <span class="n">n</span><span class="p">)</span> <span class="o">*</span> <span class="n">c_re</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">]</span>
</span><span class='line'><span class="n">c_im</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">t_im</span> <span class="o">-</span> <span class="n">math</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">pi</span> <span class="o">*</span> <span class="n">k</span> <span class="o">/</span> <span class="n">n</span><span class="p">)</span> <span class="o">*</span> <span class="n">c_im</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>by</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="n">p_re</span> <span class="o">=</span> <span class="n">math</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">pi</span> <span class="o">*</span> <span class="n">k</span> <span class="o">/</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="n">p_im</span> <span class="o">=</span> <span class="n">math</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">pi</span> <span class="o">*</span> <span class="n">k</span> <span class="o">/</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="n">c_re</span><span class="p">[</span><span class="n">k</span><span class="p">]</span>         <span class="o">=</span> <span class="n">t_re</span> <span class="o">+</span>  <span class="p">(</span><span class="n">p_re</span> <span class="o">*</span> <span class="n">c_re</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">])</span> <span class="o">-</span> <span class="p">(</span><span class="n">p_im</span> <span class="o">*</span> <span class="n">c_im</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">])</span>
</span><span class='line'><span class="n">c_im</span><span class="p">[</span><span class="n">k</span><span class="p">]</span>         <span class="o">=</span> <span class="n">t_im</span> <span class="o">+</span>  <span class="p">(</span><span class="n">p_im</span> <span class="o">*</span> <span class="n">c_re</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">])</span> <span class="o">+</span> <span class="p">(</span><span class="n">p_re</span> <span class="o">*</span> <span class="n">c_im</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">])</span>
</span><span class='line'><span class="n">c_re</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">t_re</span> <span class="o">-</span> <span class="p">((</span><span class="n">p_re</span> <span class="o">*</span> <span class="n">c_re</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">])</span> <span class="o">-</span> <span class="p">(</span><span class="n">p_im</span> <span class="o">*</span> <span class="n">c_im</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">]))</span>
</span><span class='line'><span class="n">c_im</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">t_im</span> <span class="o">-</span> <span class="p">((</span><span class="n">p_im</span> <span class="o">*</span> <span class="n">c_re</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">])</span> <span class="o">+</span> <span class="p">(</span><span class="n">p_re</span> <span class="o">*</span> <span class="n">c_im</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">]))</span>
</span></code></pre></td></tr></table></div></figure>


<p>still didn&rsquo;t work. But that is just a silly bug: Reading <code>c_re[k + n / 2]</code> in
line 6 after it was overwritten in line 5. Python has a really nice solution
for problems like this: Do both <a href="https://docs.python.org/2/reference/simple_stmts.html#assignment-statements">assignments</a> at once!
Instead of lines 5 and 6:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="n">c_re</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">],</span> <span class="n">c_im</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>    <span class="n">t_re</span> <span class="o">-</span> <span class="p">((</span><span class="n">p_re</span> <span class="o">*</span> <span class="n">c_re</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">])</span> <span class="o">-</span> <span class="p">(</span><span class="n">p_im</span> <span class="o">*</span> <span class="n">c_im</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">])),</span>
</span><span class='line'>    <span class="n">t_im</span> <span class="o">-</span> <span class="p">((</span><span class="n">p_im</span> <span class="o">*</span> <span class="n">c_re</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">])</span> <span class="o">+</span> <span class="p">(</span><span class="n">p_re</span> <span class="o">*</span> <span class="n">c_im</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">])),</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, the goal was using fewer high-level features, so my final solution
factors out the reused parts of the computation, which probably makes the code
simpler in this case anyway:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="n">p_re</span> <span class="o">=</span> <span class="n">math</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">pi</span> <span class="o">*</span> <span class="n">k</span> <span class="o">/</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="n">p_im</span> <span class="o">=</span> <span class="n">math</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">pi</span> <span class="o">*</span> <span class="n">k</span> <span class="o">/</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="n">mult_re</span> <span class="o">=</span> <span class="p">(</span><span class="n">p_re</span> <span class="o">*</span> <span class="n">c_re</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">])</span> <span class="o">-</span> <span class="p">(</span><span class="n">p_im</span> <span class="o">*</span> <span class="n">c_im</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">])</span>
</span><span class='line'><span class="n">mult_im</span> <span class="o">=</span> <span class="p">(</span><span class="n">p_im</span> <span class="o">*</span> <span class="n">c_re</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">])</span> <span class="o">+</span> <span class="p">(</span><span class="n">p_re</span> <span class="o">*</span> <span class="n">c_im</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">])</span>
</span><span class='line'><span class="n">c_re</span><span class="p">[</span><span class="n">k</span><span class="p">]</span>         <span class="o">=</span> <span class="n">t_re</span> <span class="o">+</span> <span class="n">mult_re</span>
</span><span class='line'><span class="n">c_im</span><span class="p">[</span><span class="n">k</span><span class="p">]</span>         <span class="o">=</span> <span class="n">t_im</span> <span class="o">+</span> <span class="n">mult_im</span>
</span><span class='line'><span class="n">c_re</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">t_re</span> <span class="o">-</span> <span class="n">mult_re</span>
</span><span class='line'><span class="n">c_im</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">t_im</span> <span class="o">-</span> <span class="n">mult_im</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, after a few detours I got my &ldquo;manually&rdquo; computed complex numbers, and
learned a bit more about how complex numbers and FFTs work. Also, debugging
with a debugger (rather than print statements) doesn&rsquo;t mean you don&rsquo;t need to
modify your code &ndash; in my case, merging both functions made the debugging a lot
easier.</p>

<p>Finally, the Python <a href="https://docs.python.org/2/library/math.html"><code>math</code> library</a> doesn&rsquo;t support complex numbers!
But there is a good reason for that, as explained in the
<a href="https://docs.python.org/2/library/cmath.html"><code>cmath</code> (complex math) library</a>:</p>

<blockquote><p>The reason for having two modules is that some users aren’t interested in
complex numbers, and perhaps don’t even know what they are. They would rather
have <code>math.sqrt(-1)</code> raise an exception than return a complex number.</p></blockquote>
]]></content>
  </entry>
  
</feed>
