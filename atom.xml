<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Erik Ramsgaard Wognsen]]></title>
  <link href="http://blog.erw.dk/atom.xml" rel="self"/>
  <link href="http://blog.erw.dk/"/>
  <updated>2014-11-21T12:43:19+01:00</updated>
  <id>http://blog.erw.dk/</id>
  <author>
    <name><![CDATA[Erik Ramsgaard Wognsen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Design of Everyday Things]]></title>
    <link href="http://blog.erw.dk/2014/11/21/the-design-of-everyday-things/"/>
    <updated>2014-11-21T04:15:21+01:00</updated>
    <id>http://blog.erw.dk/2014/11/21/the-design-of-everyday-things</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://blog.erw.dk/images/posts/IC3_tray_table.jpg" width="300" title="A tray table in a Danish IC3 train" alt="A tray table in a Danish IC3 train"></p>

<p>The woman in the seat next to me on the train had trouble folding down her tray table.
I showed her how to do it, and she said &ldquo;Oh, I&rsquo;ve never been good at that sort of thing.&rdquo;
I said &ldquo;It&rsquo;s not you, it&rsquo;s just bad design.&rdquo;
She didn&rsquo;t follow.
&ldquo;See, it <em>looks like</em> you&rsquo;re supposed to turn the knob, but in fact you have to slide it. You just tried to turn it like the design told you to do, but the design was wrong.&rdquo;</p>

<p>She never seemed to accept my interpretation of the situation.
But the fact is that design subconsciously guides us and affects our behavior, for better and for worse.
I hope to do a better job here of convincing you than I did with the woman in the train!</p>

<!-- more -->


<p>The concept of <em>affordance</em> is about what things <em>are for</em>.
For example, a hammer <em>affords</em> hitting.
James J. Gibson introduced the concept as the <em>possibilities for action</em> that are possible between an object and a user.
<a href="http://en.wikipedia.org/wiki/Don_Norman">Don Norman</a> later popularized the idea with a focus on what actions seem obvious (hitting with a hammer), rather that which ones are theoretically possible (say, stirring a pot with it).
He did this in his famous &mdash; and recommendable &mdash; 1988 book <a href="http://en.wikipedia.org/wiki/The_Design_of_Everyday_Things">The Design of Everyday Things</a>, from which I lifted the title as well as this quote:</p>

<blockquote><p>Affordances provide strong clues to the operations of things. Plates are for
pushing. Knobs are for turning. Slots are for inserting things into. Balls
are for throwing or bouncing. When affordances are taken advantage of, the
user knows what to do just by looking: no picture, label, or instruction
is required.</p></blockquote>

<p>When affordances and operations match, then the things we interact with work intuitively:
We flip the switch, and the light comes on.
When things <em>just work</em>, we might not even notice that affordance and operation are two separate things.
How could it be otherwise?
Well, for example, sometimes we pull a door handle, but the door doesn&rsquo;t open.
The handle affords pulling, but the door opens the other way.
It&rsquo;s when affordances and operations don&rsquo;t match that we get confused.</p>

<p><img class="right" src="http://blog.erw.dk/images/posts/tray_table_locks.png" title="Drawing of the IC3 tray lock design and a better alternative" alt="Drawing of the IC3 tray lock design and a better alternative"></p>

<p>The tray table lock in the train had a mismatch between affordance and operation.
The round hole surrounding the small plastic handle made the whole thing look like things we normally <em>turn</em>, like the knob on a stove, or a volume knob.
But it was actually meant to slide up to release the lock and let the table unfold.
Since the small handle is not as wide as the inner diameter of the circle, it is also possible to push the handle up/down.
Most users figure this out after a while.
But a rectangular shape would likely have given this association from the beginning, without the detour of trying to turn it.</p>

<p>As an example of well-matched affordance, here&rsquo;s a nice feature on my Braun shaver:
Grooves in the plastic make it look compressible, like an accordion.
The plastic isn&rsquo;t in fact compressible, but the supporting springs underneath are.
But independently of the mechanical implementation, the design speaks it&rsquo;s clear language: I&rsquo;m flexible.</p>

<p><img src="http://blog.erw.dk/images/posts/shaver.jpg" title="My groovy Braun shaver" alt="My groovy Braun shaver"></p>

<p>James J. Gibson has some <a href="http://www.trincoll.edu/depts/ecopsyc/perils/folder5/prelim.html">more examples of affordances</a>.</p>

<a name="Why.Usability.Matters"></a>
<h2>Why Usability Matters</h2>

<p>Affordance is related to <a href="http://www.nngroup.com/articles/usability-101-introduction-to-usability/">usability</a>, or, how easy and efficient things are to use.
Good use of affordance makes it easy to learn how to use something and less likely to make mistakes.
Mismatched or hidden affordances do the opposite.
We always make mistakes, but if the design is bad, we make lots more.</p>

<p>Tray tables and shavers are pretty harmless, but human perception works the same way in serious situations.
Another example of mismatched affordances comes from the 2000 United States presidential election.
The unlucky design of a ballot meant that <a href="http://en.wikipedia.org/wiki/United_States_presidential_election_in_Florida,_2000#Palm_Beach_County.27s_butterfly_ballots">Al Gore lost some votes</a> he could really have used.
Danish ballots also used to have an affordance problem, although it did not favor one candidate over another.
The problem was lack of affordance:
Ticking a box is just not very satisfying <a href="http://commons.wikimedia.org/wiki/File:Stemmesedler_2005.JPG#mediaviewer/File:Stemmesedler_2005.JPG">when there&rsquo;s no box</a>.
In addition, inattentive voters might have marked their vote with a ring around a name, thus invalidating their vote because only a cross is allowed.</p>

<p><span class='caption-wrapper left'><img class='caption' src='http://blog.erw.dk/images/posts/cockpit.jpg' width='320' height='240' alt='[Picture](http://pixabay.com/en/cockpit-kontrolpanel-466157/) by [gepardowa](http://pixabay.com/en/users/gepardowa-320124/) is licenced under [CC0](http://creativecommons.org/publicdomain/zero/1.0/)'><span class='caption-text'><a href="http://pixabay.com/en/cockpit-kontrolpanel-466157/">Picture</a> by <a href="http://pixabay.com/en/users/gepardowa-320124/">gepardowa</a> is licenced under <a href="http://creativecommons.org/publicdomain/zero/1.0/">CC0</a></span></span></p>

<p>You may wonder if this isn&rsquo;t just a question of paying attention.
Or put more bluntly: A question of not being <a href="http://www.nngroup.com/articles/are-users-stupid/">stupid</a>.
To some extent, yes.
While doing something important, such as voting or controlling a nuclear power plant, it would indeed be sensible to double-check and confirm you did the right thing.
But that doesn&rsquo;t legitimize making a confusing design in the first place.
A confusing design can be a waste of time in daily life.
This is in itself annoying, but sometimes time is more critical.
For example, while controlling an airplane or that nuclear power plant, there can be stressful situations with short time to do the right thing, and no time for double-checking.
Even though pilots and operators are trained, it doesn&rsquo;t mean that they are infallible.
Humans will always make mistakes, so the tools we use should not increase the risk of errors.</p>

<p>When human life is not at stake, money is.
Usability is also part of designing an attractive product that users want to buy.
I say &ldquo;part of&rdquo; because, as Don Norman details in his later book <a href="http://en.wikipedia.org/wiki/Emotional_Design">Emotional Design</a>, usability relates to our brains&#8217; behavioral thinking, but there are two more &ldquo;brain levels&rdquo; to satisfy to make a truly successful product.
Once the product itself is good enough, its website must also have good usability and be a good overall user experience.
Jakob Nielsen, a colleague of Don Norman, is known to say that &ldquo;a bad website is like a grumpy salesperson&rdquo;.
Web usability and user experience design are fields of their own, but they are based on human cognition, just like <em>the design of everyday things</em>.</p>

<p>Once you are aware of the concept of affordance, you might start looking for it in your surroundings.
I suspect Danish people reading this might remember a more obvious usability problem in the Danish IC3 trains, besides the tray table:
The doors between compartments are sliding doors, with no handles or buttons.
This is not uncommon; automatic sliding doors typically open when we approach them.
But these don&rsquo;t do that either.
So, what do you do with products that are not self-explanatory?
Of course you <strike>fix them</strike> provide instructions!</p>

<a name="Don.t.Make.Me.Think"></a>
<h2>Don&rsquo;t Make Me Think</h2>

<p>(I noticed that Don&rsquo;t Make Me Think is also <a href="http://www.sensible.com/dmmt.html">a book about web usability</a>. I have not read it, but I fully agree with the message of its title! And it doesn&rsquo;t apply only to web usability.)</p>

<p><span class='caption-wrapper left'><img class='caption' src='http://blog.erw.dk/images/posts/pushpull.jpg' width='450' height='338' alt='[Push Pull](https://www.flickr.com/photos/russmorris/481397004/) by [Russ Morris](https://www.flickr.com/photos/russmorris/) is licensed under [CC BY-NC-ND 2.0](https://creativecommons.org/licenses/by-nc-nd/2.0/)'><span class='caption-text'><a href="https://www.flickr.com/photos/russmorris/481397004/">Push Pull</a> by <a href="https://www.flickr.com/photos/russmorris/">Russ Morris</a> is licensed under <a href="https://creativecommons.org/licenses/by-nc-nd/2.0/">CC BY-NC-ND 2.0</a></span></span></p>

<p>A classic example of usage instructions is push/pull signs on doors.
Using affordance properly, it is wholly possible to design a door where the shape and position of the handles and the design of the frame subconsciously guide us to push when and where we should push, and pull when and where we should pull.
One way is to use a handle that is easy to pull on one side, and on the other side a handle that is easier to push &mdash; possibly a plate or bar that can only be pushed.
But while it is possible, that doesn&rsquo;t mean it is always done in practice.
Maybe nobody knew.
Or maybe it was just cheaper to put the same handle on both sides.
But probably the first.
So when it is discovered that the door works poorly and people want to improve it, they add the instructions.
However, Norman writes:</p>

<blockquote><p>Complex things may require explanation, but simple things should not. When
simple things need pictures, labels, or instructions, the design has failed.</p></blockquote>

<p>But why are instructions so bad?
Or at least potentially unnecessary instructions such as push/pull signs?
One problem is that when a task requires us to read and think more than what is necessary, it distracts us from thinking about more important or urgent matters.
This is especially important in those stressed situations, I have already mentioned.
But reading is also harder than picking up clues from physical shapes.
Our brains have evolved and adapted to a tangible environment, and reading is relatively new, and not as &ldquo;efficiently implemented&rdquo;.</p>

<p>But it turns out all instructions are not equally bad.
Here&rsquo;s a door I came across in the Gromada Airport Hotel in Warsaw:</p>

<p><img src="http://blog.erw.dk/images/posts/gromada.jpg" title="Hotel Gromada push&#47;pull doors signs" alt="Hotel Gromada push&#47;pull doors signs"></p>

<p>I think the 3D effect of the arrows can actually help speak directly to our spatial intelligence, bypassing the need for reading and language processing.
(Of course it helps that I don&rsquo;t read Polish!)
I think if the text was removed, the arrows might work as well as well placed door handles, if not as elegantly.
But I&rsquo;m probably too conscious about these subconscious things to be a good judge.
It would be up to user testing to tell.</p>

<p>While instructions are typically employed to meet the lack of affordance, they can also be used when there&rsquo;s <em>unwanted</em> affordance:</p>

<p><img src="http://blog.erw.dk/images/posts/dont_push.jpg" title="A don&#39;t push sign on a revolving door" alt="A don&#39;t push sign on a revolving door"></p>

<p>(This particular revolving door at the NH Utrecht hotel was however spinning so fast I had a hard time seeing why anyone would feel the need to push it.
I think it shows in my blurry picture.)</p>

<p>Of course, most rule signs follow from some action being afforded by the environment, but deemed unwanted.
Some rules are perhaps better enforced by removing the affordance.
For example, a <a href="http://www.citylab.com/design/2014/10/why-12-foot-traffic-lanes-are-disastrous-for-safety-and-must-be-replaced-now/381117/">narrow</a> or curvy road does not afford driving at high speed.
(Neither do roads with speed bumps, because the bumps afford unpleasant bouncing and perhaps damaging the car.)</p>

<p><img class="right" src="http://blog.erw.dk/images/posts/microfridge.jpg" width="350" title="A usable microwave oven" alt="A usable microwave oven"></p>

<p>We already established that it&rsquo;s better to guide the user with affordance than with instructions, but some things may be too complex to rely solely on affordance.
In those cases we might be asked to read instruction manuals instead of a single pictogram or sentence.
However, that doesn&rsquo;t remove the problems with instruction: They stand between us and what we want to do.</p>

<p>So the less the text, the better.
Case in point, here is a microwave oven that I think most people could use without a manual.
(It&rsquo;s just a pity that the brand name MicroFridge could suggest the device is a fridge!
Alas, it probably doesn&rsquo;t matter anyway, because&hellip;)</p>

<p>The biggest problem with instructions is that, most of the time, <em>people don&rsquo;t read instructions</em>!</p>

<p>This is why affordance was important in the first place, along with many other concepts related to usability such as <a href="http://www.nngroup.com/articles/mental-models/">mental models</a> and feedback to the user about the state of the system.</p>

<p><img class="left" src="http://blog.erw.dk/images/posts/hisf.jpg" title="An empathetic elevator sign" alt="An empathetic elevator sign"></p>

<p>Finally, an example that you can even have bad usability and still make your users (at least the ones who read!) walk away with a smile.
I found it next to the elevator in the HI-San Francisco Downtown hostel.
(The quality of the signage in that place <em>almost</em> made up for the quality of the breakfast!)</p>

<p>In conclusion, products that are compatible with our brains&#8217; autopilots work really well.
Part of achieving that is matching affordance to the functionality of the product.
This attention to detail is the difference between something that simply functions and something that really <em>works</em>.</p>

<p>I have presupposed that the products do function correctly.
This is of course far from always the case, especially in complex systems.
In fact, the field I do my PhD in, <a href="http://en.wikipedia.org/wiki/Formal_methods">formal methods</a>, is exactly about proving that complex computer controlled systems function as they are supposed to.
This in itself can require an enormous effort, but as we have seen in this post, correct functioning should be matched by good usability.</p>

<p><em>Except where it says otherwise, the
<span xmlns:dct="http://purl.org/dc/terms/" href="http://purl.org/dc/dcmitype/StillImage" rel="dct:type">images on this post</span> are by me, <span xmlns:cc="http://creativecommons.org/ns#" property="cc:attributionName">Erik Ramsgaard Wognsen</span>, and you may reuse them under the <a rel="license" href="http://creativecommons.org/licenses/by/4.0/">Creative Commons Attribution 4.0 International License</a>.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Essence of vi]]></title>
    <link href="http://blog.erw.dk/2014/10/31/the-essence-of-vi/"/>
    <updated>2014-10-31T09:49:46+01:00</updated>
    <id>http://blog.erw.dk/2014/10/31/the-essence-of-vi</id>
    <content type="html"><![CDATA[<p><a href="http://www.vim.org/about.php">Vim</a> is a popular and widely distributed text editor improving on the
legendary <a href="http://en.wikipedia.org/wiki/Vi">vi</a> from the late 1970s.  If you are reading this on Mac or
Linux, chances are that Vim is already installed on your computer, included
with your OS.  If you tried Vim and found it too strange to use, or if you use
it but still harbor the idea that it was made by (or for!) aliens, you&rsquo;ve come
to the right place!</p>

<p>Vim is a very powerful tool, but often misunderstood.  There are plenty of
tutorials that go through the basics, but they usually fail to paint the big
picture.  <em>Why</em> the weird keyboard shortcuts, and the modes?  Why is it
worthwhile to learn?  In this post I will try to answer these questions.  And
I am pleased to say that the answer doesn&rsquo;t start with <em>h</em>, <em>j</em>, <em>k</em>, <em>l</em>, or
<em>i</em>.</p>

<p>Instead of the traditional bottom-up tutorial, this will be a top-down
introduction, that uncovers to the <em>essence of vi</em> and the almost poetic
language you use to speak to Vim and vi.  It is my hope that reading it will
make your time with Vim both more useful and more enjoyable.  I have myself
enjoyed Vim since 2007, and I also <a href="https://code.google.com/p/vim/source/browse/runtime/syntax/asm.vim">contribute a tiny bit</a> to it.</p>

<!-- more -->




<div id="toc">
<ul>
 <li>
 <ul>
  <li><a href="#Don.t.Worry.About.Modes">Don&#8217;t Worry About Modes</a></li>
  <li><a href="#Play.with.the.Gamepad">Play with the Gamepad</a></li>
  <li><a href="#The.Language.of.vi">The Language of vi</a>
  <ul>
   <li><a href="#Verbs">Verbs</a></li>
   <li><a href="#Nouns.Objects">Nouns/Objects</a></li>
   <li><a href="#Prepositional.Phrases.Motions">Prepositional Phrases/Motions</a></li>
   <li><a href="#Numerals">Numerals</a></li>
  </ul>
  </li>
  <li><a href="#Expand.your.Vocabulary">Expand your Vocabulary</a></li>
  <li><a href="#Real.Keyboard.Shortcuts">Real Keyboard Shortcuts</a></li>
  <li><a href="#What.about.Usability.">What about Usability?</a></li>
  <li><a href="#Conclusion">Conclusion</a></li>
 </ul>
 </li>
</ul>


</div>


<a name="Don.t.Worry.About.Modes"></a>
<h2>Don&rsquo;t Worry About Modes</h2>

<p>In Adobe Photoshop, pressing <code>L</code> selects the lasso tool, and <code>M</code> the marquee
tool.  Photoshop has many tools and functions, and there are many letters on
the keyboard &mdash; good.  But for most writing applications and text editors, the
letter keys are used for typing.  In these programs (and Photoshop), keyboard
shortcuts use modifiers, for example <code>ctrl-s</code> to save changes.  This means that
prime keyboard real estate is not used to its fullest.  50+ easy-to-press
shortcuts &mdash; upper and lower case letters &mdash; are only used for a single
purpose.</p>

<p>A different approach to text editing is <em>modal editing</em>.  Here the &ldquo;typing
mode&rdquo; is just one of several modes of using the editor (and thus the keyboard).
It is distinct from the mode(s) wherein you move the cursor, copy, paste, etc.
Notably, it often makes sense that the typing mode, or insert mode as it is
commonly called, is <em>not the default mode</em>.  The reason is that it is far more
common to edit, write, and program incrementally, than it is to write a piece
from start to finish.  You navigate around the text to read, think, make small
adjustments, and enter a few words, sentences, or statements at a time.</p>

<p>Vim has many modes, with <em>normal</em> (&ldquo;command&rdquo;) mode and <em>insert</em> mode being the
two main modes.  Now, I could enumerate all the modes, their roles, and how to
switch between them, but I&rsquo;m not going to.  Because when you use Vim naturally,
you don&rsquo;t think about modes, you think about <em>actions</em>.  And the actions lead
you naturally to the mode changes.  Think about finding content on a web page
in your browser: You press <code>ctrl-f</code> which opens a text field.  Here you write
you search string, press <code>&lt;enter&gt;</code> a few times, then <code>&lt;esc&gt;</code> when you&rsquo;re done.
You just used FIND MODE!  (It was super effective!)</p>

<p>Modal editing simply gives you more buttons for actions.  As
<a href="http://www.viemu.com/a-why-vi-vim.html">Jon Beltran de Heredia wrote</a>:</p>

<blockquote><p>with vi, your keyboard becomes a huge specialized text-editing gamepad with
almost a hundred buttons.</p></blockquote>

<a name="Play.with.the.Gamepad"></a>
<h2>Play with the Gamepad</h2>

<p>It can be hard to separate what you usually do with a text editor from what you
want to do with <em>the text</em>.  Learning Vim, you might ask &ldquo;How do I select all
text?&rdquo; After all, in most editors, this is a simple <code>&lt;c-a&gt;</code> (this is another
way of writing <code>ctrl-a</code>).  I could tell you how to do it in Vim (one way is
<code>ggVG</code>), but it is not in the spirit of vi.  In fact, it&rsquo;s not even possible in
vi.  And <em>to master Vim, you must understand vi</em>.  (In a later post I will
cover some &ldquo;philosophical&rdquo; differences between Vim and vi.)  Instead, realize
that selecting text is a means, but to what end?  <em>Why</em> you want to select all?</p>

<p>Do you want to copy everything?  Then copy, don&rsquo;t select.  It&rsquo;s &ldquo;<code>ggyG</code>&rdquo;. Type
it one letter at a time, and pay attention to case.  What does it mean?  The
<code>gg</code> part moves the cursor to the first line, <code>y</code> then <em>yanks</em> (copies) every
line until (and including) <code>G</code>, the last line.  vi is older than the
standardized cut, copy, and paste, hence the name &ldquo;yank&rdquo;.</p>

<p>Now, if you would think <code>ggyG</code> is no faster than <code>&lt;c-a&gt;&lt;c-c&gt;</code> (select all,
copy) in a regular editor, you&rsquo;d be right.  But say you wanted to copy just
a paragraph?  Type <code>yap</code> to &ldquo;yank a paragraph&rdquo;, with the cursor anywhere in
that paragraph.  Or copy an HTML/XML element? Go ahead and &ldquo;yank a tag-block&rdquo;,
<code>yat</code>.  Then <em>put</em> (paste) three copies of it: <code>3P</code>.  And change the content
(of whichever one you put the cursor on): <code>cit</code> (&ldquo;change inner tag-block&rdquo;).</p>

<p>This last command is slightly different from the others.  It deletes the
content of the element, then drops you to insert mode with the cursor inside
the element, i.e. <code>&lt;foo bar="baz"&gt;</code>between the tags<code>&lt;/foo&gt;</code>.  Then you type
your new content, followed by <code>&lt;esc&gt;</code>, which returns you to normal mode,
simultaneously completing the action.  It might go like this, from start to
finish:  <code>citMy new content&lt;esc&gt;</code>.</p>

<p>Then move to another element and type <code>.</code> to repeat the action!</p>

<p>In
<a href="http://jeetworks.org/grokking-the-zen-of-the-vim-wu-wei/">the words of Jeet Sukumaran</a>:</p>

<blockquote><p>It seemed that, without my hands leaving the keyboard, just a few strokes
here and a few taps there, I was capable of dancing all over the document,
and perform everything from extremely precise [targeted] micro-surgery to
massive document-wide renovations.</p></blockquote>

<a name="The.Language.of.vi"></a>
<h2>The Language of vi</h2>

<p>Mode changes take time to get accustomed to.  They are very visible and
&ldquo;demanding&rdquo; the first many times you use a modal editor.  Hence, they get a lot
of attention.  But too often they steal the attention from the more important
concept of actions.</p>

<p><a href="http://stackoverflow.com/questions/1218390/what-is-your-most-productive-shortcut-with-vim/1220118#1220118">People</a>
<a href="http://yanpritzker.com/2011/12/16/learn-to-speak-vim-verbs-nouns-and-modifiers/">have</a>
<a href="http://stevelosh.com/blog/2010/09/coming-home-to-vim/#a-language-of-text-editing">described</a>
Vim/vi as having a language of editing.  Perhaps you already got the feeling
from the mnemonics above such as &ldquo;yank a paragraph&rdquo;.  The language of vi is how
you instruct the editor to perform actions.  One action is one sentence, and
a sentence consists of verbs, nouns, etc.  Here I will pursue the idea with
a bit more systematically than the aforementioned sources.</p>

<p>There are four possible sentences types/word orders:</p>

<ul>
<li>Verb</li>
<li>Verb Object</li>
<li>Verb [Prepositional Phrase]</li>
<li>[Prepositional Phrase]</li>
</ul>


<p>We shall explore the components of these sentences below, along with what it
means for a
<a href="http://en.wikipedia.org/wiki/Adpositional_phrase#Prepositional_phrases">prepositional phrase</a>
(e.g., &ldquo;to &hellip;&rdquo;, &ldquo;until &hellip;&rdquo;) to stand alone.  The subject is always the
implied &ldquo;you&rdquo; in the imperative.  We are commanding the editor, after all!</p>

<a name="Verbs"></a>
<h3>Verbs</h3>

<p>We have already seen verbs like yank <code>y</code>, change <code>c</code>, put <code>P</code>, and repeat <code>.</code>.
Verbs fall into two categories:  The first type has its &ldquo;area of effect&rdquo;
implied and the change will occur immediately:</p>

<ul>
<li><em>put</em> previously yanked or deleted text <code>P</code></li>
<li><em>repeat</em> last action in a new context <code>.</code></li>
<li><em>delete</em> a single character backwards <code>X</code></li>
<li><em>swap</em> case of a single character <code>~</code></li>
<li><em>insert</em> text <code>i</code></li>
<li><em>replace</em> text <code>R</code></li>
</ul>


<p>The second type is the
<a href="http://vimdoc.sourceforge.net/htmldoc/motion.html#operator"><em>operator</em></a> which
includes commands such as</p>

<ul>
<li>yank <code>y</code></li>
<li>change <code>c</code></li>
<li>delete <code>d</code></li>
<li>increase/decrease indentation <code>&gt;</code> <code>&lt;</code></li>
<li>make UPPER/lower/opposite case <code>gU</code> <code>gu</code> <code>g~</code></li>
</ul>


<p>The difference between &ldquo;immediate changes&rdquo; and operators is that when you type an
operator, the editor awaits the object or region that the operator should
affect.  This role is played by nouns and prepositional phrases.</p>

<p>There are many more verbs, and you indeed need more to use vi (and therefore
Vim) efficiently, but this selection will do fine in explaining the language
metaphor.  It&rsquo;s expected and normal that you find the commands hard to remember
at first.  But if you are curious and/or adamant enough to learn them, they
grow into muscle memory, and you reap the full benefits of the compactness and
efficiency.
<a href="http://pascalprecht.github.io/2014/03/18/why-i-use-vim/">Paraphrasing Pascal Precht</a>:</p>

<blockquote><p>Vim&rsquo;s learning curve is not a curve at all. It&rsquo;s a wall. But once you climb
that wall, you can lean back and slide down on the other side.  Once I was
able to do some basic operations in Vi, I made almost as twice as much
progress at work in about half the time.</p></blockquote>

<p>(If you want some tips on how to edit text better (not just in Vim) and do more
in the same amount of time, Bram Moolenaar, the creator of Vim, has
<a href="https://www.youtube.com/watch?v=p6K4iIMlouI">7 Habits For Effective Text Editing</a>.)</p>

<p>Verbs from both categories (immediate and operators) can involve a mode change.
The insert <code>i</code> and change <code>c</code> commands both switch to insert mode where you can
enter the new text.  The replace <code>R</code> command uses <em>replace mode</em>, which is
similar to insert mode, except you replace (overwrite) text as you type.  (This
is maybe another mode you already knew &ndash; in Microsoft Word and other
<a href="http://en.wikipedia.org/wiki/Word_processor">word processors</a>, it&rsquo;s toggled by the <code>&lt;insert&gt;</code> key.) Operators (as
opposed to immediate changes) in fact always incur mode a change: After typing
the operator, the editor will be in <em>operator pending mode</em>, awaiting the
choice of the text to operate on.  We will see how to choose that text in the
next two sections.</p>

<a name="Nouns.Objects"></a>
<h3>Nouns/Objects</h3>

<p>We have seen nouns such as a paragraph <code>ap</code> and a tag block <code>at</code>.  There are
others such as a word <code>aw</code>, a sentence <code>as</code>, and various blocks (delimited by
 <span class="nobreak"><code>{}</code>,</span>
 <span class="nobreak"><code>()</code>,</span>
 <span class="nobreak"><code>&lt;&gt;</code>,</span>
 <span class="nobreak"><code>[]</code>,</span>
 <span class="nobreak"><code>""</code>,</span>
 <span class="nobreak"><code>''</code>,</span>
 <span class="nobreak">and <code>``</code></span>).
Nouns, or <a href="http://vimdoc.sourceforge.net/htmldoc/motion.html#text-objects">text objects</a> as they are called in Vim, must be prefixed
with an <code>a</code> or <code>i</code>.  Above I showed them with <code>a</code> to help as a mnemonic (&ldquo;a
paragraph&rdquo; ~ <code>ap</code>).  The &ldquo;article&rdquo; serves two purposes: First, it distinguishes
the nouns from <em>prepositional phrases</em> that are bound to the same letter (&ldquo;a
word&rdquo; <code>aw</code>, for example, is not the same as <code>w</code> which means &ldquo;<em>to/until the
next</em> word&rdquo;, as we shall see in the next section).  Second, it marks whether
the whole object (<code>a</code>) or only its &ldquo;insides&rdquo; (<code>i</code>) are meant.  For example, we
have seen <code>yat</code> yank a whole tag block, while <code>cit</code> changes its contents (i.e.,
not the enclosing tags).  For objects that do not have an obvious crunchy shell
surrounding a soft, chewy center, the <code>a</code> version includes the trailing
whitespace while <code>i</code> doesn&rsquo;t.  Thus, <code>a</code> is useful for transplanting words and
sentences without having to clean up the whitespace afterwards.</p>

<p>Text objects are &ldquo;intelligent&rdquo;.  First, they are insensitive to the cursor
position within the text object: The whole object (or its inside) is used as
long as the cursor is somewhere inside it.  Second, they can depend on context:
The meaning of &ldquo;a word&rdquo; depends on the file type.  In C-style programming
languages, dashes are not part of a word, but in Lisps, they are.  For prose
writing, I have set Vim up to see apostrophes as parts of words such that
&ldquo;can&rsquo;t&rdquo; is seen as a single word (which would not be so useful in programming).
Paragraph boundaries can similarly be specified.  Strings are aware of escaped
quote characters.  For example, <code>"This is one \"string\""</code>.</p>

<p>I didn&rsquo;t mention &ldquo;line&rdquo; as a noun.  This is not because operating on lines is
uncommon, in fact it&rsquo;s the opposite.  Repeating an operator symbol makes the
operator work on the current line:
 <span class="nobreak"><code>yy</code>,</span>
 <span class="nobreak"><code>cc</code>,</span>
 <span class="nobreak"><code>dd</code>,</span>
 <span class="nobreak"><code>&gt;&gt;</code>,</span>
 <span class="nobreak"><code>&lt;&lt;</code>,</span>
 <span class="nobreak"><code>gUU</code>,</span>
 <span class="nobreak"><code>guu</code>,</span>
 <span class="nobreak"><code>g~~</code>,</span>
&hellip;</p>

<a name="Prepositional.Phrases.Motions"></a>
<h3>Prepositional Phrases/Motions</h3>

<p>There are also
<a href="http://en.wikipedia.org/wiki/Adpositional_phrase#Prepositional_phrases">prepositional phrases</a>,
which is the grammatical term I use for what Vim calls
<a href="http://vimdoc.sourceforge.net/htmldoc/motion.html#cursor-motions">cursor motions</a>.
We have already seen &ldquo;to the first line&rdquo; and &ldquo;to the last line&rdquo;, <code>gg</code> and <code>G</code>,
respectively.  The sequence <code>ggyG</code> we saw earlier reads as two sentences:
&ldquo;(First,) (go) to the first line of the buffer.  (Then) yank until the last
line.&rdquo;  This demonstrates an important point:
There is no need for punctuation in the &ldquo;vi language&rdquo; (at least figuratively
speaking!) because the word order is enough: A prepositional phrase without
a verb is taken to be a cursor movement command.  A prepositional phrase
following an operator verb means that the operator should act on the text
<em>from</em> the current cursor position and <em>to</em> wherever the motion leads.
(Here you can see that this is really a top-down introduction to Vim.
A tutorial would probably have told you first thing how to move the cursor!)</p>

<p>First, let&rsquo;s see some word motions:</p>

<ul>
<li>&ldquo;to the next beginning-of-a-word&rdquo; <code>w</code></li>
<li>&ldquo;(backwards) to the previous beginning-of-a-word&rdquo; <code>b</code></li>
<li>&ldquo;to the next/previous end-of-a-word&rdquo; <code>e</code> and <code>ge</code></li>
</ul>


<p>Unlike text objects such as &ldquo;a word&rdquo; <code>aw</code>, motions use your exact cursor
position as the point of origin.  Therefore, <code>b</code> and <code>e</code> will find the
beginning/end of the word the cursor is inside, unless you are already on the
beginning/end.  If you <em>are</em> on the beginning or end, they will move to the
previous or next word, respectively.  Notice that I say <em>on</em>.  In Vim/vi, the
cursor moves <em>on</em> characters, not between them as in many other editors.</p>

<p>If you move back and forth in a sentence using <code>b</code> and <code>w</code> you can exploit the
fact that the cursor is always on the first character of a word.  For example,
<code>dw</code> deletes a word without the need for <code>daw</code>.  The motions <code>(</code> and <code>)</code> work
like <code>b</code> and <code>w</code> but for sentences.  The motions <code>{</code> and <code>}</code> go to the
previous/next paragraph boundary.</p>

<p>Another powerful type of motion is the &ldquo;till&rdquo;/&ldquo;find&rdquo; motion. Till <code>t</code> moves to
the next character you specify.  For example, <code>t"</code> moves to right before the
next <code>"</code> in the line.  Find <code>f</code> is similar, except it moves onto the specified
character.  The motion <code>;</code> repeats the last <code>t</code> or <code>f</code> motion.  All three
motions have equivalents going to the left instead of right: <code>T</code>, <code>F</code> and <code>,</code>.</p>

<p>The till/find motions are for quick and simple jumps within the same line.
<a href="http://en.wikipedia.org/wiki/Regular_expression">Regex</a> search finds anything, anywhere in the file.  The commands <code>/</code>
and <code>?</code> open up a search field for forward and backward regex search,
respectively.  It even highlights the first match while you type to give you
live feedback on your search pattern.  After confirming the entered pattern
with <code>&lt;enter&gt;</code>, keys <code>n</code> and <code>N</code> jump in the same/opposite direction of the
current regex search.</p>

<p>Coming from other text editors, it&rsquo;s easy to think that <code>/</code> is &ldquo;just&rdquo; how you
search for text.  And it is.  But the four commands <span class="nobreak"><code>/</code>
<code>?</code> <code>n</code> <code>N</code></span> are all motions, and like any motion they can be used alone
or with an operator.  The design of vi is <a href="http://en.wikipedia.org/wiki/Orthogonality#Computer_science">orthogonal</a>:  You can learn
it piece by piece, and combine the new motion you just learned with the verbs
you already knew and vice versa.  This is extremely powerful and part of what
makes vi/Vim so special.  The idea may be almost 40 years old, but
<a href="https://medium.com/@mkozlows/why-atom-cant-replace-vim-433852f4b4d1">it&rsquo;s still relevant today and in the future</a>!</p>

<p>You may have noticed I didn&rsquo;t mention the most basic motions you already know
from your arrow keys.  Many Vim introductions (including the official
&ldquo;vimtutor&rdquo;) mention very early on that <span class="nobreak"><code>h</code> <code>j</code> <code>k</code> <code>l</code>
</span> work as <span class="nobreak">&#8592; &#8595; &#8593; &#8594;</span>,
respectively.  And people wonder why they can&rsquo;t just use the normal arrow keys.
But either kind of arrow keys are beside the point!  There&rsquo;s almost always
a smarter way &mdash; a more precise motion &mdash; to go somewhere than to hold down
arrow keys.  <a href="http://jeetworks.org/vim-making-those-arrow-keys-work-for-you-or-why-the-anti-arrow-key-propoganda-is-wrong/">Jeet Sukumaran tells it</a> again:</p>

<blockquote><p>being forced to use the rich suite of powerful normal mode movement commands
to get to exactly where I needed to be [&hellip;] was like
suddenly beginning to use the fifth and other gears while driving on an open
highway, whereas before I had been grinding along for mile after laborious
mile on first.</p></blockquote>

<p>Here are some more motions just to illustrate:</p>

<ul>
<li>&ldquo;to the matching parenthesis/brace/comment marker/HTML tag/if/else-stmt/etc. <code>%</code></li>
<li>&ldquo;to the next/previous misspelled word&rdquo; <code>]s</code> <code>[s</code></li>
<li>&ldquo;to the next/previous start/end of a method (Java/C# style) <code>]m</code> <code>]M</code> <code>[m</code> <code>[M</code></li>
</ul>


<a name="Numerals"></a>
<h3>Numerals</h3>

<p>So far we have covered verbs, nouns, and prepositional phrases. Let&rsquo;s look at
numerals, of which vi uses three types:</p>

<ul>
<li>Cardinal numbers, e.g., 1, 2, 7</li>
<li>Adverbial numbers, e.g., once, twice, sevenfold</li>
<li>Ordinal numbers, e.g. 1st, 2nd, 7th</li>
</ul>


<p>The grammatical distinction is mine; in vi they&rsquo;re all known as <em>counts</em>.  But
it helps to show the different roles counts have.
Cardinal numbers (1, 2, 7) can choose the number of lines to apply an operator
to, or the number of text objects (nouns) to apply an operator to:</p>

<ul>
<li>&ldquo;Indent ten lines&rdquo; <code>10&gt;&gt;</code></li>
<li>&ldquo;Uppercase two sentences&rdquo; <code>gU2as</code></li>
</ul>


<p>Adverbial numbers (once, twice, sevenfold) can decide the number of times to
do something:</p>

<ul>
<li>&ldquo;Twentyfold insert a blank line&rdquo; <code>20i&lt;enter&gt;&lt;esc&gt;</code> (-> &ldquo;Insert 20 blank
lines&rdquo;)</li>
<li>&ldquo;Delete until you have moved twice to the next word&rdquo; <code>d2w</code> (-> &ldquo;Delete two
words&rdquo;)</li>
</ul>


<p>Ordinal numbers (1st, 2nd, 7th) can choose where to go:</p>

<ul>
<li>&ldquo;To the 27th line&rdquo; <code>27gg</code></li>
<li>&ldquo;To the 20000th byte&rdquo; <code>20000go</code></li>
<li>&ldquo;To the 80&#8217;th column&rdquo; <code>80|</code></li>
<li>&ldquo;To the 70%&lsquo;th line&rdquo; <code>70%</code></li>
</ul>


<p>The ordinal numbers can also be though of just as cardinals (line 27 = 27th
line), but since they access ordered items, it makes sense to see them as
ordinals.</p>

<p>All motions and operators in fact take a count, but it usually defaults to 1.
This is another example of orthogonality in vi.</p>

<a name="Expand.your.Vocabulary"></a>
<h2>Expand your Vocabulary</h2>

<p>For even more orthogonality, you can even add verbs and nouns, as
<a href="http://yanpritzker.com/2011/12/16/learn-to-speak-vim-verbs-nouns-and-modifiers/">mentioned by Yan Pritzker</a>:</p>

<ul>
<li>Install Drew Niel&rsquo;s
<a href="https://github.com/nelstrom/vim-textobj-rubyblock">textobj-rubyblock</a>
plugin to get the new noun &ldquo;Ruby block&rdquo; <code>r</code>.</li>
<li>Install Tim Pope&rsquo;s <a href="https://github.com/tpope/vim-surround">surround.vim</a>
plugin to get three new verbs:

<ul>
<li>&ldquo;Surround with&rdquo;, which is even HTML aware (closes tags). Example:

<ul>
<li>&ldquo;(you) surround a word with em-tags <code>ysaw&lt;em&gt;</code></li>
</ul>
</li>
<li>&ldquo;Change surroundings&rdquo;, example:

<ul>
<li>&ldquo;change the nearest surrounding single quotes to double quotes&rdquo; <code>cs'"</code></li>
</ul>
</li>
<li>&ldquo;Delete surroundings&rdquo;, e.g.

<ul>
<li>&ldquo;delete the nearest surrounding asterisks&rdquo; <code>ds*</code></li>
</ul>
</li>
</ul>
</li>
</ul>


<a name="Real.Keyboard.Shortcuts"></a>
<h2>Real Keyboard Shortcuts</h2>

<p>The key <code>y</code> is not a shortcut for yank, it <em>is</em> the yank operator.  But vi
still has shortcuts (in the traditional sense of the word) for those actions
that are so common that having a shorter ways to get to them is useful:</p>

<ul>
<li>&ldquo;Delete left/right&rdquo; <code>dh</code> and <code>dl</code> are <code>X</code> and <code>x</code> (think backspace and
delete)</li>
<li>&ldquo;Change to the end of the line&rdquo; <code>c$</code> is <code>C</code></li>
<li>&ldquo;Delete to the end of the line&rdquo; <code>d$</code> is <code>D</code></li>
</ul>


<p>Recall that <code>$</code> means &ldquo;to the end of the line&rdquo;.  Similarly, <code>0</code> means &ldquo;to the
beginning of the line&rdquo; and <code>^</code> means &ldquo;to the first non-blank character on the
line&rdquo;. With these we get:</p>

<ul>
<li>&ldquo;Insert at the &#8220;beginning&rdquo; of the line&#8221; <code>^i</code> is <code>I</code></li>
<li>&ldquo;Really insert at the beginning of the line!&rdquo; <code>0i</code> is <code>gI</code></li>
<li>&ldquo;Append to the line&rdquo; <code>$a</code> is <code>A</code>  (append <code>a</code> is like insert <code>i</code>
except it inserts <em>after</em> the cursor position)</li>
</ul>


<p>The idea that &ldquo;vi is about pressing <code>i</code> to insert text&rdquo; is wrong.  We have
already seen that it takes focus away from what vi is really about, namely
actions.  But it&rsquo;s also wrong because it takes focus away from the above
insertion commands which are just as common as <code>i</code> for the effective user.  For
programmers, one type of action is even more common:</p>

<ul>
<li>&ldquo;Open a new line below&rdquo; <code>o</code></li>
<li>&ldquo;Open a new line above&rdquo; <code>O</code></li>
</ul>


<p>It inserts a blank line and leaves you in insert mode, ready to type a new
statement in your program.  With Vim&rsquo;s indentation features this even starts
inserting at the right indentation level, aware of nesting and control
structures. For example, if the previous line is an &ldquo;if&rdquo; statement or the start
of a new block, the next line&rsquo;s indentation level should be one higher.</p>

<a name="What.about.Usability."></a>
<h2>What about Usability?</h2>

<p>I figure I should mention usability because there could seem to be a conflict
between these two facts: (1) I care about usability, and (2) vi is definitely
not known to be user friendly. How can I reconcile this?  The thing to remember
is that usability is about more than user friendliness.  Using the first two
components of <a href="http://www.nngroup.com/articles/usability-101-introduction-to-usability/">Jakob Nielsen&rsquo;s definition of usability</a>:</p>

<ul>
<li><em><strong>Learnability</strong>: How easy is it for users to accomplish basic tasks the first time they encounter the design?</em></li>
<li><em><strong>Efficiency</strong>: Once users have learned the design, how quickly can they perform tasks?</em></li>
</ul>


<p>This is the fundamental trade-off with Vim/vi: Very hard to master and very
efficient when mastered.  The question then quickly arises: Can learnability be
improved without harming efficiency?  And what other options exist on the
learnability/efficiency plane?  (And what about the other aspects of
usability?)  These are all interesting topics for another time!  In the
meantime I hope the <a href="http://www.nngroup.com/articles/mental-models/">mental model</a> of vi explained in this post will
make, if not your first, then your next encounter with Vim more meaningful.</p>

<a name="Conclusion"></a>
<h2>Conclusion</h2>

<p>The essence of vi is not modality.  The essence of vi is performing actions on
text.  Actions are specified using an extensible and orthogonally composable
&ldquo;language&rdquo;, where the same motions that are part of actions are also used for
plain cursor movement.  Some of the actions involve mode switching, some don&rsquo;t.
The actions drive the editing process while the modes help put a large
vocabulary right under your fingertips.</p>

<p>I have only covered basic text manipulation, though Vim does much more.  Any
user would need to know how to open/close/save files, and maybe
open/close/switch buffers, windows, and tabs (Vim has them all).  Fancier
features include regex substitution, autocompletion, diff mode, scripting, key
remapping, (mutually recursive) macros, persistent undo, and encryption.</p>

<p>These features add tremendously to the usefulness of Vim.  And regex
substitution predates even vi.  But in my opinion they are not part of its
essence, action based editing.  In fact, I barely touched upon the
command-line/Ex mode.  Most people who have tried Vim know it because it is the
one you enter when you type <code>:w&lt;enter&gt;</code> to save and <code>:q&lt;enter&gt;</code> to quit.</p>

<p>Is command-line mode essential?
Maybe <a href="http://blog.sanctum.geek.nz/vim-koans/">the Vim Koan &ldquo;The superior editor&rdquo;</a> will enlighten you.</p>
]]></content>
  </entry>
  
</feed>
